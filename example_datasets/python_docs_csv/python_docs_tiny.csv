source,title,description,content,language,docs_sync_at
https://docs.python.org/3.11/,3.11.8 Documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\nDownload\nDownload these documents\nDocs by version\n\nPython 3.13 (in development)\nPython 3.12 (stable)\nPython 3.11 (stable)\nPython 3.10 (security-fixes)\nPython 3.9 (security-fixes)\nPython 3.8 (security-fixes)\nPython 3.7 (EOL)\nPython 3.6 (EOL)\nPython 3.5 (EOL)\nPython 3.4 (EOL)\nPython 3.3 (EOL)\nPython 3.2 (EOL)\nPython 3.1 (EOL)\nPython 3.0 (EOL)\nPython 2.7 (EOL)\nPython 2.6 (EOL)\nAll versions\n\nOther resources\n\nPEP Index\nBeginner's Guide\nBook List\nAudio/Visual Talks\nPython Developerâs Guide\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \n\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\nPython 3.11.8 documentation\n\n  Welcome! This is the official documentation for Python 3.11.8.\n  \nDocumentation sections:\n\n\nWhat's new in Python 3.11?\n Or all ""What's new"" documents since Python 2.0\nTutorial\nStart here: a tour of Python's syntax and features\nLibrary reference\nStandard library and builtins\nLanguage reference\nSyntax and language elements\nPython setup and usage\nHow to install, configure, and use Python\nPython HOWTOs\nIn-depth topic manuals\n\nInstalling Python modules\nThird-party modules and PyPI.org\nDistributing Python modules\nPublishing modules for use by other people\nExtending and embedding\nFor C/C++ programmers\nPython's C API\nC API reference\nFAQs\nFrequently asked questions (with answers!)\n\n\nIndices, glossary, and search:\n\n\nGlobal module index\nAll modules and libraries\nGeneral index\nAll functions, classes, and terms\nGlossary\nTerms explained\n\nSearch page\nSearch this documentation\nComplete table of contents\nLists all sections and subsections\n\n\nProject information:\n\n\nReporting issues\nContributing to Docs\nDownload the documentation\n\nHistory and license of Python\nCopyright\nAbout the documentation\n\n\n\n\n\n\n\n\nDownload\nDownload these documents\nDocs by version\n\nPython 3.13 (in development)\nPython 3.12 (stable)\nPython 3.11 (stable)\nPython 3.10 (security-fixes)\nPython 3.9 (security-fixes)\nPython 3.8 (security-fixes)\nPython 3.7 (EOL)\nPython 3.6 (EOL)\nPython 3.5 (EOL)\nPython 3.4 (EOL)\nPython 3.3 (EOL)\nPython 3.2 (EOL)\nPython 3.1 (EOL)\nPython 3.0 (EOL)\nPython 2.7 (EOL)\nPython 2.6 (EOL)\nAll versions\n\nOther resources\n\nPEP Index\nBeginner's Guide\nBook List\nAudio/Visual Talks\nPython Developerâs Guide\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \n\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/copyright.html,Copyright — Python 3.11.8 documentation,Python and this documentation is: Copyright Â© 2001-2023 Python Software Foundation. All rights reserved. Copyright Â© 2000 BeOpen.com. All rights reserved. Copyright Â© 1995-2000 Corporation for Nati...,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nDealing with Bugs\n\n\nNext topic\nHistory and License\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nCopyright\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nCopyrightÂ¶\nPython and this documentation is:\nCopyright Â© 2001-2023 Python Software Foundation. All rights reserved.\nCopyright Â© 2000 BeOpen.com. All rights reserved.\nCopyright Â© 1995-2000 Corporation for National Research Initiatives. All rights\nreserved.\nCopyright Â© 1991-1995 Stichting Mathematisch Centrum. All rights reserved.\n\nSee History and License for complete license and permissions information.\n\n\n\n\n\n\n\n\nPrevious topic\nDealing with Bugs\n\n\nNext topic\nHistory and License\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nCopyright\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/library/index.html,The Python Standard Library — Python 3.11.8 documentation,"While The Python Language Reference describes the exact syntax and semantics of the Python language, this library reference manual describes the standard library that is distributed with Python. It...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\n10. Full Grammar specification\n\n\nNext topic\nIntroduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Standard Library\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nThe Python Standard LibraryÂ¶\nWhile The Python Language Reference describes the exact syntax and\nsemantics of the Python language, this library reference manual\ndescribes the standard library that is distributed with Python. It also\ndescribes some of the optional components that are commonly included\nin Python distributions.\nPythonâs standard library is very extensive, offering a wide range of\nfacilities as indicated by the long table of contents listed below. The\nlibrary contains built-in modules (written in C) that provide access to\nsystem functionality such as file I/O that would otherwise be\ninaccessible to Python programmers, as well as modules written in Python\nthat provide standardized solutions for many problems that occur in\neveryday programming. Some of these modules are explicitly designed to\nencourage and enhance the portability of Python programs by abstracting\naway platform-specifics into platform-neutral APIs.\nThe Python installers for the Windows platform usually include\nthe entire standard library and often also include many additional\ncomponents. For Unix-like operating systems Python is normally provided\nas a collection of packages, so it may be necessary to use the packaging\ntools provided with the operating system to obtain some or all of the\noptional components.\nIn addition to the standard library, there is an active collection of\nhundreds of thousands of components (from individual programs and modules to\npackages and entire application development frameworks), available from\nthe Python Package Index.\n\n\nIntroduction\nNotes on availability\n\n\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the site module\n\n\nBuilt-in Types\nTruth Value Testing\nBoolean Operations â and, or, not\nComparisons\nNumeric Types â int, float, complex\nIterator Types\nSequence Types â list, tuple, range\nText Sequence Type â str\nBinary Sequence Types â bytes, bytearray, memoryview\nSet Types â set, frozenset\nMapping Types â dict\nContext Manager Types\nType Annotation Types â Generic Alias, Union\nOther Built-in Types\nSpecial Attributes\nInteger string conversion length limitation\n\n\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nWarnings\nException groups\nException hierarchy\n\n\nText Processing Services\nstring â Common string operations\nre â Regular expression operations\ndifflib â Helpers for computing deltas\ntextwrap â Text wrapping and filling\nunicodedata â Unicode Database\nstringprep â Internet String Preparation\nreadline â GNU readline interface\nrlcompleter â Completion function for GNU readline\n\n\nBinary Data Services\nstruct â Interpret bytes as packed binary data\ncodecs â Codec registry and base classes\n\n\nData Types\ndatetime â Basic date and time types\nzoneinfo â IANA time zone support\ncalendar â General calendar-related functions\ncollections â Container datatypes\ncollections.abc â Abstract Base Classes for Containers\nheapq â Heap queue algorithm\nbisect â Array bisection algorithm\narray â Efficient arrays of numeric values\nweakref â Weak references\ntypes â Dynamic type creation and names for built-in types\ncopy â Shallow and deep copy operations\npprint â Data pretty printer\nreprlib â Alternate repr() implementation\nenum â Support for enumerations\ngraphlib â Functionality to operate with graph-like structures\n\n\nNumeric and Mathematical Modules\nnumbers â Numeric abstract base classes\nmath â Mathematical functions\ncmath â Mathematical functions for complex numbers\ndecimal â Decimal fixed point and floating point arithmetic\nfractions â Rational numbers\nrandom â Generate pseudo-random numbers\nstatistics â Mathematical statistics functions\n\n\nFunctional Programming Modules\nitertools â Functions creating iterators for efficient looping\nfunctools â Higher-order functions and operations on callable objects\noperator â Standard operators as functions\n\n\nFile and Directory Access\npathlib â Object-oriented filesystem paths\nos.path â Common pathname manipulations\nfileinput â Iterate over lines from multiple input streams\nstat â Interpreting stat() results\nfilecmp â File and Directory Comparisons\ntempfile â Generate temporary files and directories\nglob â Unix style pathname pattern expansion\nfnmatch â Unix filename pattern matching\nlinecache â Random access to text lines\nshutil â High-level file operations\n\n\nData Persistence\npickle â Python object serialization\ncopyreg â Register pickle support functions\nshelve â Python object persistence\nmarshal â Internal Python object serialization\ndbm â Interfaces to Unix âdatabasesâ\nsqlite3 â DB-API 2.0 interface for SQLite databases\n\n\nData Compression and Archiving\nzlib â Compression compatible with gzip\ngzip â Support for gzip files\nbz2 â Support for bzip2 compression\nlzma â Compression using the LZMA algorithm\nzipfile â Work with ZIP archives\ntarfile â Read and write tar archive files\n\n\nFile Formats\ncsv â CSV File Reading and Writing\nconfigparser â Configuration file parser\ntomllib â Parse TOML files\nnetrc â netrc file processing\nplistlib â Generate and parse Apple .plist files\n\n\nCryptographic Services\nhashlib â Secure hashes and message digests\nhmac â Keyed-Hashing for Message Authentication\nsecrets â Generate secure random numbers for managing secrets\n\n\nGeneric Operating System Services\nos â Miscellaneous operating system interfaces\nio â Core tools for working with streams\ntime â Time access and conversions\nargparse â Parser for command-line options, arguments and sub-commands\ngetopt â C-style parser for command line options\nlogging â Logging facility for Python\nlogging.config â Logging configuration\nlogging.handlers â Logging handlers\ngetpass â Portable password input\ncurses â Terminal handling for character-cell displays\ncurses.textpad â Text input widget for curses programs\ncurses.ascii â Utilities for ASCII characters\ncurses.panel â A panel stack extension for curses\nplatform â  Access to underlying platformâs identifying data\nerrno â Standard errno system symbols\nctypes â A foreign function library for Python\n\n\nConcurrent Execution\nthreading â Thread-based parallelism\nmultiprocessing â Process-based parallelism\nmultiprocessing.shared_memory â Shared memory for direct access across processes\nThe concurrent package\nconcurrent.futures â Launching parallel tasks\nsubprocess â Subprocess management\nsched â Event scheduler\nqueue â A synchronized queue class\ncontextvars â Context Variables\n_thread â Low-level threading API\n\n\nNetworking and Interprocess Communication\nasyncio â Asynchronous I/O\nsocket â Low-level networking interface\nssl â TLS/SSL wrapper for socket objects\nselect â Waiting for I/O completion\nselectors â High-level I/O multiplexing\nsignal â Set handlers for asynchronous events\nmmap â Memory-mapped file support\n\n\nInternet Data Handling\nemail â An email and MIME handling package\njson â JSON encoder and decoder\nmailbox â Manipulate mailboxes in various formats\nmimetypes â Map filenames to MIME types\nbase64 â Base16, Base32, Base64, Base85 Data Encodings\nbinascii â Convert between binary and ASCII\nquopri â Encode and decode MIME quoted-printable data\n\n\nStructured Markup Processing Tools\nhtml â HyperText Markup Language support\nhtml.parser â Simple HTML and XHTML parser\nhtml.entities â Definitions of HTML general entities\nXML Processing Modules\nxml.etree.ElementTree â The ElementTree XML API\nxml.dom â The Document Object Model API\nxml.dom.minidom â Minimal DOM implementation\nxml.dom.pulldom â Support for building partial DOM trees\nxml.sax â Support for SAX2 parsers\nxml.sax.handler â Base classes for SAX handlers\nxml.sax.saxutils â SAX Utilities\nxml.sax.xmlreader â Interface for XML parsers\nxml.parsers.expat â Fast XML parsing using Expat\n\n\nInternet Protocols and Support\nwebbrowser â Convenient web-browser controller\nwsgiref â WSGI Utilities and Reference Implementation\nurllib â URL handling modules\nurllib.request â Extensible library for opening URLs\nurllib.response â Response classes used by urllib\nurllib.parse â Parse URLs into components\nurllib.error â Exception classes raised by urllib.request\nurllib.robotparser â  Parser for robots.txt\nhttp â HTTP modules\nhttp.client â HTTP protocol client\nftplib â FTP protocol client\npoplib â POP3 protocol client\nimaplib â IMAP4 protocol client\nsmtplib â SMTP protocol client\nuuid â UUID objects according to RFC 4122\nsocketserver â A framework for network servers\nhttp.server â HTTP servers\nhttp.cookies â HTTP state management\nhttp.cookiejar â Cookie handling for HTTP clients\nxmlrpc â XMLRPC server and client modules\nxmlrpc.client â XML-RPC client access\nxmlrpc.server â Basic XML-RPC servers\nipaddress â IPv4/IPv6 manipulation library\n\n\nMultimedia Services\nwave â Read and write WAV files\ncolorsys â Conversions between color systems\n\n\nInternationalization\ngettext â Multilingual internationalization services\nlocale â Internationalization services\n\n\nProgram Frameworks\nturtle â Turtle graphics\ncmd â Support for line-oriented command interpreters\nshlex â Simple lexical analysis\n\n\nGraphical User Interfaces with Tk\ntkinter â Python interface to Tcl/Tk\ntkinter.colorchooser â Color choosing dialog\ntkinter.font â Tkinter font wrapper\nTkinter Dialogs\ntkinter.messagebox â Tkinter message prompts\ntkinter.scrolledtext â Scrolled Text Widget\ntkinter.dnd â Drag and drop support\ntkinter.ttk â Tk themed widgets\ntkinter.tix â Extension widgets for Tk\nIDLE\n\n\nDevelopment Tools\ntyping â Support for type hints\npydoc â Documentation generator and online help system\nPython Development Mode\ndoctest â Test interactive Python examples\nunittest â Unit testing framework\nunittest.mock â mock object library\nunittest.mock â getting started\n2to3 â Automated Python 2 to 3 code translation\ntest â Regression tests package for Python\ntest.support â Utilities for the Python test suite\ntest.support.socket_helper â Utilities for socket tests\ntest.support.script_helper â Utilities for the Python execution tests\ntest.support.bytecode_helper â Support tools for testing correct bytecode generation\ntest.support.threading_helper â Utilities for threading tests\ntest.support.os_helper â Utilities for os tests\ntest.support.import_helper â Utilities for import tests\ntest.support.warnings_helper â Utilities for warnings tests\n\n\nDebugging and Profiling\nAudit events table\nbdb â Debugger framework\nfaulthandler â Dump the Python traceback\npdb â The Python Debugger\nThe Python Profilers\ntimeit â Measure execution time of small code snippets\ntrace â Trace or track Python statement execution\ntracemalloc â Trace memory allocations\n\n\nSoftware Packaging and Distribution\ndistutils â Building and installing Python modules\nensurepip â Bootstrapping the pip installer\nvenv â Creation of virtual environments\nzipapp â Manage executable Python zip archives\n\n\nPython Runtime Services\nsys â System-specific parameters and functions\nsysconfig â Provide access to Pythonâs configuration information\nbuiltins â Built-in objects\n__main__ â Top-level code environment\nwarnings â Warning control\ndataclasses â Data Classes\ncontextlib â Utilities for with-statement contexts\nabc â Abstract Base Classes\natexit â Exit handlers\ntraceback â Print or retrieve a stack traceback\n__future__ â Future statement definitions\ngc â Garbage Collector interface\ninspect â Inspect live objects\nsite â Site-specific configuration hook\n\n\nCustom Python Interpreters\ncode â Interpreter base classes\ncodeop â Compile Python code\n\n\nImporting Modules\nzipimport â Import modules from Zip archives\npkgutil â Package extension utility\nmodulefinder â Find modules used by a script\nrunpy â Locating and executing Python modules\nimportlib â The implementation of import\nimportlib.resources â Package resource reading, opening and access\nimportlib.resources.abc â Abstract base classes for resources\nimportlib.metadata â Accessing package metadata\nThe initialization of the sys.path module search path\n\n\nPython Language Services\nast â Abstract Syntax Trees\nsymtable â Access to the compilerâs symbol tables\ntoken â Constants used with Python parse trees\nkeyword â Testing for Python keywords\ntokenize â Tokenizer for Python source\ntabnanny â Detection of ambiguous indentation\npyclbr â Python module browser support\npy_compile â Compile Python source files\ncompileall â Byte-compile Python libraries\ndis â Disassembler for Python bytecode\npickletools â Tools for pickle developers\n\n\nMS Windows Specific Services\nmsvcrt â Useful routines from the MS VC++ runtime\nwinreg â Windows registry access\nwinsound â Sound-playing interface for Windows\n\n\nUnix Specific Services\nposix â The most common POSIX system calls\npwd â The password database\ngrp â The group database\ntermios â POSIX style tty control\ntty â Terminal control functions\npty â Pseudo-terminal utilities\nfcntl â The fcntl and ioctl system calls\nresource â Resource usage information\nsyslog â Unix syslog library routines\n\n\nModules command-line interface (CLI)\nSuperseded Modules\naifc â Read and write AIFF and AIFC files\nasynchat â Asynchronous socket command/response handler\nasyncore â Asynchronous socket handler\naudioop â Manipulate raw audio data\ncgi â Common Gateway Interface support\ncgitb â Traceback manager for CGI scripts\nchunk â Read IFF chunked data\ncrypt â Function to check Unix passwords\nimghdr â Determine the type of an image\nimp â Access the import internals\nmailcap â Mailcap file handling\nmsilib â Read and write Microsoft Installer files\nnis â Interface to Sunâs NIS (Yellow Pages)\nnntplib â NNTP protocol client\noptparse â Parser for command line options\nossaudiodev â Access to OSS-compatible audio devices\npipes â Interface to shell pipelines\nsmtpd â SMTP Server\nsndhdr â Determine type of sound file\nspwd â The shadow password database\nsunau â Read and write Sun AU files\ntelnetlib â Telnet client\nuu â Encode and decode uuencode files\nxdrlib â Encode and decode XDR data\n\n\nSecurity Considerations\n\n\n\n\n\n\n\n\n\n\nPrevious topic\n10. Full Grammar specification\n\n\nNext topic\nIntroduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Standard Library\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/reference/index.html,The Python Language Reference — Python 3.11.8 documentation,"This reference manual describes the syntax and âcore semanticsâ of the language. It is terse, but attempts to be exact and complete. The semantics of non-essential built-in object types and of the ...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\n6. Editors and IDEs\n\n\nNext topic\n1. Introduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Language Reference\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nThe Python Language ReferenceÂ¶\nThis reference manual describes the syntax and âcore semanticsâ of the\nlanguage. It is terse, but attempts to be exact and complete. The semantics of\nnon-essential built-in object types and of the built-in functions and modules\nare described in The Python Standard Library. For an informal introduction to the\nlanguage, see The Python Tutorial. For C or C++ programmers, two additional\nmanuals exist: Extending and Embedding the Python Interpreter describes the high-level picture of how to\nwrite a Python extension module, and the Python/C API Reference Manual describes the\ninterfaces available to C/C++ programmers in detail.\n\n\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n\n\n2. Lexical analysis\n2.1. Line structure\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.4. Literals\n2.5. Operators\n2.6. Delimiters\n\n\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.3. Special method names\n3.4. Coroutines\n\n\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.3. Exceptions\n\n\n5. The import system\n5.1. importlib\n5.2. Packages\n5.3. Searching\n5.4. Loading\n5.5. The Path Based Finder\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.9. References\n\n\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.3. Primaries\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n\n\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.3. The assert statement\n7.4. The pass statement\n7.5. The del statement\n7.6. The return statement\n7.7. The yield statement\n7.8. The raise statement\n7.9. The break statement\n7.10. The continue statement\n7.11. The import statement\n7.12. The global statement\n7.13. The nonlocal statement\n\n\n8. Compound statements\n8.1. The if statement\n8.2. The while statement\n8.3. The for statement\n8.4. The try statement\n8.5. The with statement\n8.6. The match statement\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n\n\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n\n\n10. Full Grammar specification\n\n\n\n\n\n\n\n\n\n\nPrevious topic\n6. Editors and IDEs\n\n\nNext topic\n1. Introduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Language Reference\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/_static/pygments.css,,,None,,
https://docs.python.org/3.11/c-api/index.html,Python/C API Reference Manual — Python 3.11.8 documentation,"This manual documents the API used by C and C++ programmers who want to write extension modules or embed Python. It is a companion to Extending and Embedding the Python Interpreter, which describes...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\n1. Embedding Python in Another Application\n\n\nNext topic\nIntroduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython/C API Reference Manual\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nPython/C API Reference ManualÂ¶\nThis manual documents the API used by C and C++ programmers who want to write\nextension modules or embed Python.  It is a companion to Extending and Embedding the Python Interpreter,\nwhich describes the general principles of extension writing but does not\ndocument the API functions in detail.\n\n\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nExceptions\nEmbedding Python\nDebugging Builds\n\n\nC API Stability\nStable Application Binary Interface\nPlatform Considerations\nContents of Limited API\n\n\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nStandard Exceptions\nStandard Warning Categories\n\n\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\n\n\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nOld Buffer Protocol\n\n\nConcrete Objects Layer\nFundamental Objects\nNumeric Objects\nSequence Objects\nContainer Objects\nFunction Objects\nOther Objects\n\n\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nSub-interpreter support\nAsynchronous Notifications\nProfiling and Tracing\nAdvanced Debugger Support\nThread Local Storage Support\n\n\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_RunMain()\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\n\n\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\ntracemalloc C API\nExamples\n\n\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nType Objects\nNumber Object Structures\nMapping Object Structures\nSequence Object Structures\nBuffer Object Structures\nAsync Object Structures\nSlot Type typedefs\nExamples\nSupporting Cyclic Garbage Collection\n\n\nAPI and ABI Versioning\n\n\n\n\n\n\n\n\n\n\nPrevious topic\n1. Embedding Python in Another Application\n\n\nNext topic\nIntroduction\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython/C API Reference Manual\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/installing/index.html,Installing Python Modules — Python 3.11.8 documentation,"Email, distutils-sig@python.org,. As a popular open source development project, Python has an active supporting community of contributors and users that also make their software available for other...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I â¦?\nâ¦ install pip in versions of Python prior to Python 3.4?\nâ¦ install packages just for the current user?\nâ¦ install scientific Python packages?\nâ¦ work with multiple versions of Python installed in parallel?\n\n\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\n\n\n\n\n\n\n\nPrevious topic\nAPI and ABI Versioning\n\n\nNext topic\nPython HOWTOs\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nInstalling Python Modules\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nInstalling Python ModulesÂ¶\n\nEmail:\ndistutils-sig@python.org\n\n\nAs a popular open source development project, Python has an active\nsupporting community of contributors and users that also make their software\navailable for other Python developers to use under open source license terms.\nThis allows Python users to share and collaborate effectively, benefiting\nfrom the solutions others have already created to common (and sometimes\neven rare!) problems, as well as potentially contributing their own\nsolutions to the common pool.\nThis guide covers the installation part of the process. For a guide to\ncreating and sharing your own Python projects, refer to the\nPython packaging user guide.\n\nNote\nFor corporate and other institutional users, be aware that many\norganisations have their own policies around using and contributing to\nopen source software. Please take such policies into account when making\nuse of the distribution and installation tools provided with Python.\n\n\nKey termsÂ¶\n\npip is the preferred installer program. Starting with Python 3.4, it\nis included by default with the Python binary installers.\nA virtual environment is a semi-isolated Python environment that allows\npackages to be installed for use by a particular application, rather than\nbeing installed system wide.\nvenv is the standard tool for creating virtual environments, and has\nbeen part of Python since Python 3.3. Starting with Python 3.4, it\ndefaults to installing pip into all created virtual environments.\nvirtualenv is a third party alternative (and predecessor) to\nvenv. It allows virtual environments to be used on versions of\nPython prior to 3.4, which either donât provide venv at all, or\narenât able to automatically install pip into created environments.\nThe Python Package Index is a public\nrepository of open source licensed packages made available for use by\nother Python users.\nthe Python Packaging Authority is the group of\ndevelopers and documentation authors responsible for the maintenance and\nevolution of the standard packaging tools and the associated metadata and\nfile format standards. They maintain a variety of tools, documentation,\nand issue trackers on both GitHub and\nBitbucket.\ndistutils is the original build and distribution system first added to\nthe Python standard library in 1998. While direct use of distutils is\nbeing phased out, it still laid the foundation for the current packaging\nand distribution infrastructure, and it not only remains part of the\nstandard library, but its name lives on in other ways (such as the name\nof the mailing list used to coordinate Python packaging standards\ndevelopment).\n\n\nChanged in version 3.5: The use of venv is now recommended for creating virtual environments.\n\n\nSee also\nPython Packaging User Guide: Creating and using virtual environments\n\n\n\nBasic usageÂ¶\nThe standard packaging tools are all designed to be used from the command\nline.\nThe following command will install the latest version of a module and its\ndependencies from the Python Package Index:\npython -m pip install SomePackage\n\n\n\nNote\nFor POSIX users (including macOS and Linux users), the examples in\nthis guide assume the use of a virtual environment.\nFor Windows users, the examples in this guide assume that the option to\nadjust the system PATH environment variable was selected when installing\nPython.\n\nItâs also possible to specify an exact or minimum version directly on the\ncommand line. When using comparator operators such as >, < or some other\nspecial character which get interpreted by shell, the package name and the\nversion should be enclosed within double quotes:\npython -m pip install SomePackage==1.0.4    # specific version\npython -m pip install ""SomePackage>=1.0.4""  # minimum version\n\n\nNormally, if a suitable module is already installed, attempting to install\nit again will have no effect. Upgrading existing modules must be requested\nexplicitly:\npython -m pip install --upgrade SomePackage\n\n\nMore information and resources regarding pip and its capabilities can be\nfound in the Python Packaging User Guide.\nCreation of virtual environments is done through the venv module.\nInstalling packages into an active virtual environment uses the commands shown\nabove.\n\nSee also\nPython Packaging User Guide: Installing Python Distribution Packages\n\n\n\nHow do I â¦?Â¶\nThese are quick answers or links for some common tasks.\n\nâ¦ install pip in versions of Python prior to Python 3.4?Â¶\nPython only started bundling pip with Python 3.4. For earlier versions,\npip needs to be âbootstrappedâ as described in the Python Packaging\nUser Guide.\n\nSee also\nPython Packaging User Guide: Requirements for Installing Packages\n\n\n\nâ¦ install packages just for the current user?Â¶\nPassing the --user option to python -m pip install will install a\npackage just for the current user, rather than for all users of the system.\n\n\nâ¦ install scientific Python packages?Â¶\nA number of scientific Python packages have complex binary dependencies, and\narenât currently easy to install using pip directly. At this point in\ntime, it will often be easier for users to install these packages by\nother means\nrather than attempting to install them with pip.\n\nSee also\nPython Packaging User Guide: Installing Scientific Packages\n\n\n\nâ¦ work with multiple versions of Python installed in parallel?Â¶\nOn Linux, macOS, and other POSIX systems, use the versioned Python commands\nin combination with the -m switch to run the appropriate copy of\npip:\npython2   -m pip install SomePackage  # default Python 2\npython2.7 -m pip install SomePackage  # specifically Python 2.7\npython3   -m pip install SomePackage  # default Python 3\npython3.4 -m pip install SomePackage  # specifically Python 3.4\n\n\nAppropriately versioned pip commands may also be available.\nOn Windows, use the py Python launcher in combination with the -m\nswitch:\npy -2   -m pip install SomePackage  # default Python 2\npy -2.7 -m pip install SomePackage  # specifically Python 2.7\npy -3   -m pip install SomePackage  # default Python 3\npy -3.4 -m pip install SomePackage  # specifically Python 3.4\n\n\n\n\n\nCommon installation issuesÂ¶\n\nInstalling into the system Python on LinuxÂ¶\nOn Linux systems, a Python installation will typically be included as part\nof the distribution. Installing into this Python installation requires\nroot access to the system, and may interfere with the operation of the\nsystem package manager and other components of the system if a component\nis unexpectedly upgraded using pip.\nOn such systems, it is often better to use a virtual environment or a\nper-user installation when installing packages with pip.\n\n\nPip not installedÂ¶\nIt is possible that pip does not get installed by default. One potential fix is:\npython -m ensurepip --default-pip\n\n\nThere are also additional resources for installing pip.\n\n\nInstalling binary extensionsÂ¶\nPython has typically relied heavily on source based distribution, with end\nusers being expected to compile extension modules from source as part of\nthe installation process.\nWith the introduction of support for the binary wheel format, and the\nability to publish wheels for at least Windows and macOS through the\nPython Package Index, this problem is expected to diminish over time,\nas users are more regularly able to install pre-built extensions rather\nthan needing to build them themselves.\nSome of the solutions for installing scientific software\nthat are not yet available as pre-built wheel files may also help with\nobtaining other binary extensions without needing to build them locally.\n\nSee also\nPython Packaging User Guide: Binary Extensions\n\n\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I â¦?\nâ¦ install pip in versions of Python prior to Python 3.4?\nâ¦ install packages just for the current user?\nâ¦ install scientific Python packages?\nâ¦ work with multiple versions of Python installed in parallel?\n\n\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\n\n\n\n\n\n\n\nPrevious topic\nAPI and ABI Versioning\n\n\nNext topic\nPython HOWTOs\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nInstalling Python Modules\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/download.html,Download — Python 3.11.8 documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDownload\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\nDownload Python 3.11.8 Documentation\nLast updated on: Apr 02, 2024 (12:13 UTC).\nTo download an archive containing all the documents for this version of\nPython in one of various formats, follow one of links in this table.\n\nFormatPacked as .zipPacked as .tar.bz2\nPDF (US-Letter paper size)\nDownload (ca. 13 MiB)\nDownload (ca. 13 MiB)\n\nPDF (A4 paper size)\nDownload (ca. 13 MiB)\nDownload (ca. 13 MiB)\n\nHTML\nDownload (ca. 9 MiB)\nDownload (ca. 6 MiB)\n\nPlain Text\nDownload (ca. 3 MiB)\nDownload (ca. 2 MiB)\n\nEPUB\nDownload (ca. 5 MiB)\n\n\n\nThese archives contain all the content in the documentation.\nUnpacking\nUnix users should download the .tar.bz2 archives; these are bzipped tar\narchives and can be handled in the usual way using tar and the bzip2\nprogram. The Info-ZIP unzip program can be\nused to handle the ZIP archives if desired. The .tar.bz2 archives provide the\nbest compression and fastest download times.\nWindows users can use the ZIP archives since those are customary on that\nplatform. These are created on Unix using the Info-ZIP zip program.\nProblems\nIf you have comments or suggestions for the Python documentation, please send\nemail to docs@python.org.\n\n\n\n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDownload\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/contents.html,Python Documentation contents — Python 3.11.8 documentation,"Whatâs New in Python- Whatâs New In Python 3.11- Summary â Release highlights, New Features- PEP 657: Fine-grained error locations in tracebacks, PEP 654: Exception Groups and except*, PEP 678: Exc...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nNext topic\nWhatâs New in Python\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Documentation contents\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nPython Documentation contentsÂ¶\n\n\nWhatâs New in Python\nWhatâs New In Python 3.11\nSummary â Release highlights\nNew Features\nPEP 657: Fine-grained error locations in tracebacks\nPEP 654: Exception Groups and except*\nPEP 678: Exceptions can be enriched with notes\nWindows py.exe launcher improvements\n\n\nNew Features Related to Type Hints\nPEP 646: Variadic generics\nPEP 655: Marking individual TypedDict items as required or not-required\nPEP 673: Self type\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\nPEP 563 may not be the future\n\n\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nasyncio\ncontextlib\ndataclasses\ndatetime\nenum\nfcntl\nfractions\nfunctools\nhashlib\nIDLE and idlelib\ninspect\nlocale\nlogging\nmath\noperator\nos\npathlib\nre\nshutil\nsocket\nsqlite3\nstring\nsys\nsysconfig\ntempfile\nthreading\ntime\ntkinter\ntraceback\ntyping\nunicodedata\nunittest\nvenv\nwarnings\nzipfile\n\n\nOptimizations\nFaster CPython\nFaster Startup\nFrozen imports / Static code objects\n\n\nFaster Runtime\nCheaper, lazy Python frames\nInlined Python function calls\nPEP 659: Specializing Adaptive Interpreter\n\n\nMisc\nFAQ\nHow should I write my code to utilize these speedups?\nWill CPython 3.11 use more memory?\nI donât see any speedups in my workload. Why?\nIs there a JIT compiler?\n\n\nAbout\n\n\nCPython bytecode changes\nNew opcodes\nReplaced opcodes\nChanged/removed opcodes\n\n\nDeprecated\nLanguage/Builtins\nModules\nStandard Library\n\n\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.11\nDeprecated\nPending Removal in Python 3.12\nRemoved\n\n\nNotable Changes in 3.11.4\ntarfile\n\n\nNotable Changes in 3.11.5\nOpenSSL\n\n\n\n\nWhatâs New In Python 3.10\nSummary â Release highlights\nNew Features\nParenthesized context managers\nBetter error messages\nSyntaxErrors\nIndentationErrors\nAttributeErrors\nNameErrors\n\n\nPEP 626: Precise line numbers for debugging and other tools\nPEP 634: Structural Pattern Matching\nSyntax and operations\nDeclarative approach\nSimple pattern: match to a literal\nBehavior without the wildcard\n\n\nPatterns with a literal and variable\nPatterns and classes\nPatterns with positional parameters\n\n\nNested patterns\nComplex patterns and the wildcard\nGuard\nOther Key Features\n\n\nOptional EncodingWarning and encoding=""locale"" option\n\n\nNew Features Related to Type Hints\nPEP 604: New Type Union Operator\nPEP 612: Parameter Specification Variables\nPEP 613: TypeAlias\nPEP 647: User-Defined Type Guards\n\n\nOther Language Changes\nNew Modules\nImproved Modules\nasyncio\nargparse\narray\nasynchat, asyncore, smtpd\nbase64\nbdb\nbisect\ncodecs\ncollections.abc\ncontextlib\ncurses\ndataclasses\n__slots__\nKeyword-only fields\n\n\ndistutils\ndoctest\nencodings\nenum\nfileinput\nfaulthandler\ngc\nglob\nhashlib\nhmac\nIDLE and idlelib\nimportlib.metadata\ninspect\nitertools\nlinecache\nos\nos.path\npathlib\nplatform\npprint\npy_compile\npyclbr\nshelve\nstatistics\nsite\nsocket\nssl\nsqlite3\nsys\n_thread\nthreading\ntraceback\ntypes\ntyping\nunittest\nurllib.parse\nxml\nzipimport\n\n\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nChanges in the Python syntax\nChanges in the Python API\nChanges in the C API\n\n\nCPython bytecode changes\nBuild Changes\nC API Changes\nPEP 652: Maintaining the Stable ABI\nNew Features\nPorting to Python 3.10\nDeprecated\nRemoved\n\n\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\ntarfile\n\n\n\n\nWhatâs New In Python 3.9\nSummary â Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nDictionary Merge & Update Operators\nNew String Methods to Remove Prefixes and Suffixes\nType Hinting Generics in Standard Collections\nNew Parser\n\n\nOther Language Changes\nNew Modules\nzoneinfo\ngraphlib\n\n\nImproved Modules\nast\nasyncio\ncompileall\nconcurrent.futures\ncurses\ndatetime\ndistutils\nfcntl\nftplib\ngc\nhashlib\nhttp\nIDLE and idlelib\nimaplib\nimportlib\ninspect\nipaddress\nmath\nmultiprocessing\nnntplib\nos\npathlib\npdb\npoplib\npprint\npydoc\nrandom\nsignal\nsmtplib\nsocket\ntime\nsys\ntracemalloc\ntyping\nunicodedata\nvenv\nxml\n\n\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\n\n\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.9\nRemoved\n\n\nNotable changes in Python 3.9.1\ntyping\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\n\n\nNotable changes in Python 3.9.2\ncollections.abc\nurllib.parse\n\n\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nurllib.parse\n\n\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\ntarfile\n\n\n\n\nWhatâs New In Python 3.8\nSummary â Release highlights\nNew Features\nAssignment expressions\nPositional-only parameters\nParallel filesystem cache for compiled bytecode files\nDebug build uses the same ABI as release build\nf-strings support = for self-documenting expressions and debugging\nPEP 578: Python Runtime Audit Hooks\nPEP 587: Python Initialization Configuration\nPEP 590: Vectorcall: a fast calling protocol for CPython\nPickle protocol 5 with out-of-band data buffers\n\n\nOther Language Changes\nNew Modules\nImproved Modules\nast\nasyncio\nbuiltins\ncollections\ncProfile\ncsv\ncurses\nctypes\ndatetime\nfunctools\ngc\ngettext\ngzip\nIDLE and idlelib\ninspect\nio\nitertools\njson.tool\nlogging\nmath\nmmap\nmultiprocessing\nos\nos.path\npathlib\npickle\nplistlib\npprint\npy_compile\nshlex\nshutil\nsocket\nssl\nstatistics\nsys\ntarfile\nthreading\ntokenize\ntkinter\ntime\ntyping\nunicodedata\nunittest\nvenv\nweakref\nxml\nxmlrpc\n\n\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nDemos and Tools\n\n\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nmacOS 11.0 (Big Sur) and Apple Silicon Mac support\n\n\nNotable changes in Python 3.8.10\nurllib.parse\n\n\nNotable changes in Python 3.8.12\nChanges in the Python API\n\n\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\ntarfile\n\n\n\n\nWhatâs New In Python 3.7\nSummary â Release Highlights\nNew Features\nPEP 563: Postponed Evaluation of Annotations\nPEP 538: Legacy C Locale Coercion\nPEP 540: Forced UTF-8 Runtime Mode\nPEP 553: Built-in breakpoint()\nPEP 539: New C API for Thread-Local Storage\nPEP 562: Customization of Access to Module Attributes\nPEP 564: New Time Functions With Nanosecond Resolution\nPEP 565: Show DeprecationWarning in __main__\nPEP 560: Core Support for typing module and Generic Types\nPEP 552: Hash-based .pyc Files\nPEP 545: Python Documentation Translations\nPython Development Mode (-X dev)\n\n\nOther Language Changes\nNew Modules\ncontextvars\ndataclasses\nimportlib.resources\n\n\nImproved Modules\nargparse\nasyncio\nbinascii\ncalendar\ncollections\ncompileall\nconcurrent.futures\ncontextlib\ncProfile\ncrypt\ndatetime\ndbm\ndecimal\ndis\ndistutils\nenum\nfunctools\ngc\nhmac\nhttp.client\nhttp.server\nidlelib and IDLE\nimportlib\nio\nipaddress\nitertools\nlocale\nlogging\nmath\nmimetypes\nmsilib\nmultiprocessing\nos\npathlib\npdb\npy_compile\npydoc\nqueue\nre\nsignal\nsocket\nsocketserver\nsqlite3\nssl\nstring\nsubprocess\nsys\ntime\ntkinter\ntracemalloc\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib.parse\nuu\nuuid\nwarnings\nxml\nxml.etree\nxmlrpc.server\nzipapp\nzipfile\n\n\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\naifc\nasyncio\ncollections\ndbm\nenum\ngettext\nimportlib\nlocale\nmacpath\nthreading\nsocket\nssl\nsunau\nsys\nwave\n\n\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nChanges in Python Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\nWindows-only Changes\nOther CPython implementation changes\n\n\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\n\n\nWhatâs New In Python 3.6\nSummary â Release highlights\nNew Features\nPEP 498: Formatted string literals\nPEP 526: Syntax for variable annotations\nPEP 515: Underscores in Numeric Literals\nPEP 525: Asynchronous Generators\nPEP 530: Asynchronous Comprehensions\nPEP 487: Simpler customization of class creation\nPEP 487: Descriptor Protocol Enhancements\nPEP 519: Adding a file system path protocol\nPEP 495: Local Time Disambiguation\nPEP 529: Change Windows filesystem encoding to UTF-8\nPEP 528: Change Windows console encoding to UTF-8\nPEP 520: Preserving Class Attribute Definition Order\nPEP 468: Preserving Keyword Argument Order\nNew dict implementation\nPEP 523: Adding a frame evaluation API to CPython\nPYTHONMALLOC environment variable\nDTrace and SystemTap probing support\n\n\nOther Language Changes\nNew Modules\nsecrets\n\n\nImproved Modules\narray\nast\nasyncio\nbinascii\ncmath\ncollections\nconcurrent.futures\ncontextlib\ndatetime\ndecimal\ndistutils\nemail\nencodings\nenum\nfaulthandler\nfileinput\nhashlib\nhttp.client\nidlelib and IDLE\nimportlib\ninspect\njson\nlogging\nmath\nmultiprocessing\nos\npathlib\npdb\npickle\npickletools\npydoc\nrandom\nre\nreadline\nrlcompleter\nshlex\nsite\nsqlite3\nsocket\nsocketserver\nssl\nstatistics\nstruct\nsubprocess\nsys\ntelnetlib\ntime\ntimeit\ntkinter\ntraceback\ntracemalloc\ntyping\nunicodedata\nunittest.mock\nurllib.request\nurllib.robotparser\nvenv\nwarnings\nwinreg\nwinsound\nxmlrpc.client\nzipfile\nzlib\n\n\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nNew Keywords\nDeprecated Python behavior\nDeprecated Python modules, functions and methods\nasynchat\nasyncore\ndbm\ndistutils\ngrp\nimportlib\nos\nre\nssl\ntkinter\nvenv\n\n\nxml\nDeprecated functions and types of the C API\nDeprecated Build Options\n\n\nRemoved\nAPI and Feature Removals\n\n\nPorting to Python 3.6\nChanges in âpythonâ Command Behavior\nChanges in the Python API\nChanges in the C API\nCPython bytecode changes\n\n\nNotable changes in Python 3.6.2\nNew make regen-all build target\nRemoval of make touch build target\n\n\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\n\n\nWhatâs New In Python 3.5\nSummary â Release highlights\nNew Features\nPEP 492 - Coroutines with async and await syntax\nPEP 465 - A dedicated infix operator for matrix multiplication\nPEP 448 - Additional Unpacking Generalizations\nPEP 461 - percent formatting support for bytes and bytearray\nPEP 484 - Type Hints\nPEP 471 - os.scandir() function â a better and faster directory iterator\nPEP 475: Retry system calls failing with EINTR\nPEP 479: Change StopIteration handling inside generators\nPEP 485: A function for testing approximate equality\nPEP 486: Make the Python Launcher aware of virtual environments\nPEP 488: Elimination of PYO files\nPEP 489: Multi-phase extension module initialization\n\n\nOther Language Changes\nNew Modules\ntyping\nzipapp\n\n\nImproved Modules\nargparse\nasyncio\nbz2\ncgi\ncmath\ncode\ncollections\ncollections.abc\ncompileall\nconcurrent.futures\nconfigparser\ncontextlib\ncsv\ncurses\ndbm\ndifflib\ndistutils\ndoctest\nemail\nenum\nfaulthandler\nfunctools\nglob\ngzip\nheapq\nhttp\nhttp.client\nidlelib and IDLE\nimaplib\nimghdr\nimportlib\ninspect\nio\nipaddress\njson\nlinecache\nlocale\nlogging\nlzma\nmath\nmultiprocessing\noperator\nos\npathlib\npickle\npoplib\nre\nreadline\nselectors\nshutil\nsignal\nsmtpd\nsmtplib\nsndhdr\nsocket\nssl\nMemory BIO Support\nApplication-Layer Protocol Negotiation Support\nOther Changes\n\n\nsqlite3\nsubprocess\nsys\nsysconfig\ntarfile\nthreading\ntime\ntimeit\ntkinter\ntraceback\ntypes\nunicodedata\nunittest\nunittest.mock\nurllib\nwsgiref\nxmlrpc\nxml.sax\nzipfile\n\n\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nNew Keywords\nDeprecated Python Behavior\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\n\n\nRemoved\nAPI and Feature Removals\n\n\nPorting to Python 3.5\nChanges in Python behavior\nChanges in the Python API\nChanges in the C API\n\n\nNotable changes in Python 3.5.4\nNew make regen-all build target\nRemoval of make touch build target\n\n\n\n\nWhatâs New In Python 3.4\nSummary â Release Highlights\nNew Features\nPEP 453: Explicit Bootstrapping of PIP in Python Installations\nBootstrapping pip By Default\nDocumentation Changes\n\n\nPEP 446: Newly Created File Descriptors Are Non-Inheritable\nImprovements to Codec Handling\nPEP 451: A ModuleSpec Type for the Import System\nOther Language Changes\n\n\nNew Modules\nasyncio\nensurepip\nenum\npathlib\nselectors\nstatistics\ntracemalloc\n\n\nImproved Modules\nabc\naifc\nargparse\naudioop\nbase64\ncollections\ncolorsys\ncontextlib\ndbm\ndis\ndoctest\nemail\nfilecmp\nfunctools\ngc\nglob\nhashlib\nhmac\nhtml\nhttp\nidlelib and IDLE\nimportlib\ninspect\nipaddress\nlogging\nmarshal\nmmap\nmultiprocessing\noperator\nos\npdb\npickle\nplistlib\npoplib\npprint\npty\npydoc\nre\nresource\nselect\nshelve\nshutil\nsmtpd\nsmtplib\nsocket\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsunau\nsys\ntarfile\ntextwrap\nthreading\ntraceback\ntypes\nurllib\nunittest\nvenv\nwave\nweakref\nxml.etree\nzipfile\n\n\nCPython Implementation Changes\nPEP 445: Customization of CPython Memory Allocators\nPEP 442: Safe Object Finalization\nPEP 456: Secure and Interchangeable Hash Algorithm\nPEP 436: Argument Clinic\nOther Build and C API Changes\nOther Improvements\nSignificant Optimizations\n\n\nDeprecated\nDeprecations in the Python API\nDeprecated Features\n\n\nRemoved\nOperating Systems No Longer Supported\nAPI and Feature Removals\nCode Cleanups\n\n\nPorting to Python 3.4\nChanges in âpythonâ Command Behavior\nChanges in the Python API\nChanges in the C API\n\n\nChanged in 3.4.3\nPEP 476: Enabling certificate verification by default for stdlib http clients\n\n\n\n\nWhatâs New In Python 3.3\nSummary â Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nFeatures\nAPI changes\n\n\nPEP 393: Flexible String Representation\nFunctionality\nPerformance and resource usage\n\n\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nSimpleNamespace\n\n\nUsing importlib as the Implementation of Import\nNew APIs\nVisible Changes\n\n\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nfaulthandler\nipaddress\nlzma\n\n\nImproved Modules\nabc\narray\nbase64\nbinascii\nbz2\ncodecs\ncollections\ncontextlib\ncrypt\ncurses\ndatetime\ndecimal\nFeatures\nAPI changes\n\n\nemail\nPolicy Framework\nProvisional Policy with New Header API\nOther API Changes\n\n\nftplib\nfunctools\ngc\nhmac\nhttp\nhtml\nimaplib\ninspect\nio\nitertools\nlogging\nmath\nmmap\nmultiprocessing\nnntplib\nos\npdb\npickle\npydoc\nre\nsched\nselect\nshlex\nshutil\nsignal\nsmtpd\nsmtplib\nsocket\nsocketserver\nsqlite3\nssl\nstat\nstruct\nsubprocess\nsys\ntarfile\ntempfile\ntextwrap\nthreading\ntime\ntypes\nunittest\nurllib\nwebbrowser\nxml.etree.ElementTree\nzlib\n\n\nOptimizations\nBuild and C API Changes\nDeprecated\nUnsupported Operating Systems\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nDeprecated features\n\n\nPorting to Python 3.3\nPorting Python code\nPorting C code\nBuilding C extensions\nCommand Line Switch Changes\n\n\n\n\nWhatâs New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The concurrent.futures module\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nemail\nelementtree\nfunctools\nitertools\ncollections\nthreading\ndatetime and time\nmath\nabc\nio\nreprlib\nlogging\ncsv\ncontextlib\ndecimal and fractions\nftp\npopen\nselect\ngzip and zipfile\ntarfile\nhashlib\nast\nos\nshutil\nsqlite3\nhtml\nsocket\nssl\nnntp\ncertificates\nimaplib\nhttp.client\nunittest\nrandom\npoplib\nasyncore\ntempfile\ninspect\npydoc\ndis\ndbm\nctypes\nsite\nsysconfig\npdb\nconfigparser\nurllib.parse\nmailbox\nturtledemo\n\n\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\n\n\nWhatâs New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\n\n\nWhatâs New In Python 3.0\nCommon Stumbling Blocks\nPrint Is A Function\nViews And Iterators Instead Of Lists\nOrdering Comparisons\nIntegers\nText Vs. Data Instead Of Unicode Vs. 8-bit\n\n\nOverview Of Syntax Changes\nNew Syntax\nChanged Syntax\nRemoved Syntax\n\n\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nOperators And Special Methods\nBuiltins\n\n\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\n\n\nWhatâs New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nInterpreter Changes\nOptimizations\n\n\nNew and Improved Modules\nNew module: importlib\nNew module: sysconfig\nttk: Themed Widgets for Tk\nUpdated module: unittest\nUpdated module: ElementTree 1.3\n\n\nBuild and C API Changes\nCapsules\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: FreeBSD\n\n\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nTwo new environment variables for debug mode\nPEP 434: IDLE Enhancement Exception for All Branches\nPEP 466: Network Security Enhancements for Python 2.7\nPEP 477: Backport ensurepip (PEP 453) to Python 2.7\nBootstrapping pip By Default\nDocumentation Changes\n\n\nPEP 476: Enabling certificate verification by default for stdlib http clients\nPEP 493: HTTPS verification migration tools for Python 2.7\nNew make regen-all build target\nRemoval of make touch build target\n\n\nAcknowledgements\n\n\nWhatâs New in Python 2.6\nPython 3.0\nChanges to the Development Process\nNew Issue Tracker: Roundup\nNew Documentation Format: reStructuredText Using Sphinx\n\n\nPEP 343: The âwithâ statement\nWriting Context Managers\nThe contextlib module\n\n\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user site-packages Directory\nPEP 371: The multiprocessing Package\nPEP 3101: Advanced String Formatting\nPEP 3105: print As a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nThe fractions Module\n\n\nOther Language Changes\nOptimizations\nInterpreter Changes\n\n\nNew and Improved Modules\nThe ast module\nThe future_builtins module\nThe json module: JavaScript Object Notation\nThe plistlib module: A Property-List Parser\nctypes Enhancements\nImproved SSL Support\n\n\nDeprecations and Removals\nBuild and C API Changes\nPort-Specific Changes: Windows\nPort-Specific Changes: Mac OS X\nPort-Specific Changes: IRIX\n\n\nPorting to Python 2.6\nAcknowledgements\n\n\nWhatâs New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The âwithâ statement\nWriting Context Managers\nThe contextlib module\n\n\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The â__index__â method\nOther Language Changes\nInteractive Interpreter Changes\nOptimizations\n\n\nNew, Improved, and Removed Modules\nThe ctypes package\nThe ElementTree package\nThe hashlib package\nThe sqlite3 package\nThe wsgiref package\n\n\nBuild and C API Changes\nPort-Specific Changes\n\n\nPorting to Python 2.5\nAcknowledgements\n\n\nWhatâs New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nWhy is Decimal needed?\nThe Decimal type\nThe Context type\n\n\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nOptimizations\n\n\nNew, Improved, and Deprecated Modules\ncookielib\ndoctest\n\n\nBuild and C API Changes\nPort-Specific Changes\n\n\nPorting to Python 2.4\nAcknowledgements\n\n\nWhatâs New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nString Changes\nOptimizations\n\n\nNew, Improved, and Deprecated Modules\nDate/Time Type\nThe optparse Module\n\n\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nPort-Specific Changes\n\n\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\n\n\nWhatâs New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nOld and New Classes\nDescriptors\nMultiple Inheritance: The Diamond Rule\nAttribute Access\nRelated Links\n\n\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\n\n\nWhatâs New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\n\n\nWhatâs New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nMinor Language Changes\nChanges to Built-in Functions\n\n\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nSAX2 Support\nDOM Support\nRelationship to PyXML\n\n\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\n\n\nChangelog\nPython next\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\n\n\nPython 3.11.8 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\n\n\nPython 3.11.7 final\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.11.6 final\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\n\n\nPython 3.11.5 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\n\n\nPython 3.11.4 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\n\n\nPython 3.11.3 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\n\n\nPython 3.11.2 final\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\n\n\nPython 3.11.1 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.11.0 final\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\n\n\nPython 3.11.0 release candidate 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\n\n\nPython 3.11.0 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\n\n\nPython 3.11.0 beta 5\nCore and Builtins\nLibrary\nTests\nBuild\nWindows\nC API\n\n\nPython 3.11.0 beta 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\n\n\nPython 3.11.0 beta 3\nCore and Builtins\nBuild\n\n\nPython 3.11.0 beta 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\n\n\nPython 3.11.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\n\n\nPython 3.11.0 alpha 7\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\n\n\nPython 3.11.0 alpha 6\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\n\n\nPython 3.11.0 alpha 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.11.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\n\n\nPython 3.11.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\n\n\nPython 3.11.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.11.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.10.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.10.0 alpha 7\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\n\n\nPython 3.10.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.10.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.10.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nTools/Demos\nC API\n\n\nPython 3.10.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.10.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.10.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.9.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nTools/Demos\nC API\n\n\nPython 3.9.0 alpha 6\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.9.0 alpha 5\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.9.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nC API\n\n\nPython 3.9.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\n\n\nPython 3.9.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nC API\n\n\nPython 3.9.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.8.0 beta 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.8.0 alpha 4\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.8.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\n\n\nPython 3.8.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nIDLE\n\n\nPython 3.8.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.7.0 final\nLibrary\nC API\n\n\nPython 3.7.0 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nBuild\nWindows\nIDLE\n\n\nPython 3.7.0 beta 5\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nmacOS\nIDLE\n\n\nPython 3.7.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\n\n\nPython 3.7.0 beta 3\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.7.0 beta 2\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\n\n\nPython 3.7.0 beta 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nC API\n\n\nPython 3.7.0 alpha 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nWindows\nTools/Demos\nC API\n\n\nPython 3.7.0 alpha 3\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.7.0 alpha 2\nCore and Builtins\nLibrary\nDocumentation\nBuild\nIDLE\nC API\n\n\nPython 3.7.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\nC API\n\n\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.6.5 final\nTests\nBuild\n\n\nPython 3.6.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nmacOS\nIDLE\nTools/Demos\nC API\n\n\nPython 3.6.3 final\nLibrary\nBuild\n\n\nPython 3.6.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nIDLE\nTools/Demos\n\n\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nSecurity\n\n\nPython 3.6.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nDocumentation\nTools/Demos\nTests\nWindows\n\n\nPython 3.6.1 final\nCore and Builtins\nBuild\n\n\nPython 3.6.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nWindows\nC API\nDocumentation\nTests\nBuild\n\n\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nCore and Builtins\nTools/Demos\nWindows\nBuild\n\n\nPython 3.6.0 release candidate 1\nCore and Builtins\nLibrary\nC API\nDocumentation\nTools/Demos\n\n\nPython 3.6.0 beta 4\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\n\n\nPython 3.6.0 beta 3\nCore and Builtins\nLibrary\nWindows\nBuild\nTests\n\n\nPython 3.6.0 beta 2\nCore and Builtins\nLibrary\nWindows\nC API\nBuild\nTests\n\n\nPython 3.6.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nC API\nTests\nBuild\nTools/Demos\nWindows\n\n\nPython 3.6.0 alpha 4\nCore and Builtins\nLibrary\nIDLE\nTests\nWindows\nBuild\n\n\nPython 3.6.0 alpha 3\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nBuild\nTools/Demos\nDocumentation\nTests\n\n\nPython 3.6.0 alpha 2\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nWindows\nBuild\nC API\nTools/Demos\n\n\nPython 3.6.0 alpha 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\nC API\n\n\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nSecurity\nCore and Builtins\nLibrary\n\n\nPython 3.5.4 final\nLibrary\n\n\nPython 3.5.4 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nDocumentation\nTests\nBuild\nWindows\nC API\n\n\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nC API\nDocumentation\nTests\nTools/Demos\nWindows\nBuild\n\n\nPython 3.5.2 final\nCore and Builtins\nTests\nIDLE\n\n\nPython 3.5.2 release candidate 1\nSecurity\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\n\n\nPython 3.5.1 final\nCore and Builtins\nWindows\n\n\nPython 3.5.1 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\nBuild\nWindows\nTools/Demos\n\n\nPython 3.5.0 final\nBuild\n\n\nPython 3.5.0 release candidate 4\nLibrary\nBuild\n\n\nPython 3.5.0 release candidate 3\nCore and Builtins\nLibrary\n\n\nPython 3.5.0 release candidate 2\nCore and Builtins\nLibrary\n\n\nPython 3.5.0 release candidate 1\nCore and Builtins\nLibrary\nIDLE\nDocumentation\nTests\n\n\nPython 3.5.0 beta 4\nCore and Builtins\nLibrary\nBuild\n\n\nPython 3.5.0 beta 3\nCore and Builtins\nLibrary\nTests\nDocumentation\nBuild\n\n\nPython 3.5.0 beta 2\nCore and Builtins\nLibrary\n\n\nPython 3.5.0 beta 1\nCore and Builtins\nLibrary\nIDLE\nTests\nDocumentation\nTools/Demos\n\n\nPython 3.5.0 alpha 4\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\nC API\n\n\nPython 3.5.0 alpha 3\nCore and Builtins\nLibrary\nBuild\nTests\nTools/Demos\n\n\nPython 3.5.0 alpha 2\nCore and Builtins\nLibrary\nBuild\nC API\nWindows\n\n\nPython 3.5.0 alpha 1\nCore and Builtins\nLibrary\nIDLE\nBuild\nC API\nDocumentation\nTests\nTools/Demos\nWindows\n\n\n\n\n\n\nThe Python Tutorial\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n\n\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n\n\n\n\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n\n\n3.2. First Steps Towards Programming\n\n\n4. More Control Flow Tools\n4.1. if Statements\n4.2. for Statements\n4.3. The range() Function\n4.4. break and continue Statements, and else Clauses on Loops\n4.5. pass Statements\n4.6. match Statements\n4.7. Defining Functions\n4.8. More on Defining Functions\n4.8.1. Default Argument Values\n4.8.2. Keyword Arguments\n4.8.3. Special parameters\n4.8.3.1. Positional-or-Keyword Arguments\n4.8.3.2. Positional-Only Parameters\n4.8.3.3. Keyword-Only Arguments\n4.8.3.4. Function Examples\n4.8.3.5. Recap\n\n\n4.8.4. Arbitrary Argument Lists\n4.8.5. Unpacking Argument Lists\n4.8.6. Lambda Expressions\n4.8.7. Documentation Strings\n4.8.8. Function Annotations\n\n\n4.9. Intermezzo: Coding Style\n\n\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n\n\n5.2. The del statement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n\n\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. âCompiledâ Python files\n\n\n6.2. Standard Modules\n6.3. The dir() Function\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n\n\n\n\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n\n\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with json\n\n\n\n\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n\n\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n\n\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n\n\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n\n\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n\n\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n\n\n11. Brief Tour of the Standard Library â Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating Point Arithmetic\n\n\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n\n\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n\n\n15. Floating Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n\n\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\n\n\n\n\n\n\nPython Setup and Usage\n1. Command line and environment\n1.1. Command line\n1.1.1. Interface options\n1.1.2. Generic options\n1.1.3. Miscellaneous options\n1.1.4. Options you shouldnât use\n\n\n1.2. Environment variables\n1.2.1. Debug-mode variables\n\n\n\n\n2. Using Python on Unix platforms\n2.1. Getting and installing the latest version of Python\n2.1.1. On Linux\n2.1.2. On FreeBSD and OpenBSD\n2.1.3. On OpenSolaris\n\n\n2.2. Building Python\n2.3. Python-related paths and files\n2.4. Miscellaneous\n2.5. Custom OpenSSL\n\n\n3. Configure Python\n3.1. Configure Options\n3.1.1. General Options\n3.1.2. WebAssembly Options\n3.1.3. Install Options\n3.1.4. Performance options\n3.1.5. Python Debug Build\n3.1.6. Debug options\n3.1.7. Linker options\n3.1.8. Libraries options\n3.1.9. Security Options\n3.1.10. macOS Options\n3.1.11. Cross Compiling Options\n\n\n3.2. Python Build System\n3.2.1. Main files of the build system\n3.2.2. Main build steps\n3.2.3. Main Makefile targets\n3.2.4. C extensions\n\n\n3.3. Compiler and linker flags\n3.3.1. Preprocessor flags\n3.3.2. Compiler flags\n3.3.3. Linker flags\n\n\n\n\n4. Using Python on Windows\n4.1. The full installer\n4.1.1. Installation steps\n4.1.2. Removing the MAX_PATH Limitation\n4.1.3. Installing Without UI\n4.1.4. Installing Without Downloading\n4.1.5. Modifying an install\n\n\n4.2. The Microsoft Store package\n4.2.1. Known issues\n4.2.1.1. Redirection of local data, registry, and temporary paths\n\n\n\n\n4.3. The nuget.org packages\n4.4. The embeddable package\n4.4.1. Python Application\n4.4.2. Embedding Python\n\n\n4.5. Alternative bundles\n4.6. Configuring Python\n4.6.1. Excursus: Setting environment variables\n4.6.2. Finding the Python executable\n\n\n4.7. UTF-8 mode\n4.8. Python Launcher for Windows\n4.8.1. Getting started\n4.8.1.1. From the command-line\n4.8.1.2. Virtual environments\n4.8.1.3. From a script\n4.8.1.4. From file associations\n\n\n4.8.2. Shebang Lines\n4.8.3. Arguments in shebang lines\n4.8.4. Customization\n4.8.4.1. Customization via INI files\n4.8.4.2. Customizing default Python versions\n\n\n4.8.5. Diagnostics\n4.8.6. Dry Run\n4.8.7. Install on demand\n4.8.8. Return codes\n\n\n4.9. Finding modules\n4.10. Additional modules\n4.10.1. PyWin32\n4.10.2. cx_Freeze\n\n\n4.11. Compiling Python on Windows\n4.12. Other Platforms\n\n\n5. Using Python on a Mac\n5.1. Getting and Installing Python\n5.1.1. How to run a Python script\n5.1.2. Running scripts with a GUI\n5.1.3. Configuration\n\n\n5.2. The IDE\n5.3. Installing Additional Python Packages\n5.4. GUI Programming\n5.5. Distributing Python Applications\n5.6. Other Resources\n\n\n6. Editors and IDEs\n\n\nThe Python Language Reference\n1. Introduction\n1.1. Alternate Implementations\n1.2. Notation\n\n\n2. Lexical analysis\n2.1. Line structure\n2.1.1. Logical lines\n2.1.2. Physical lines\n2.1.3. Comments\n2.1.4. Encoding declarations\n2.1.5. Explicit line joining\n2.1.6. Implicit line joining\n2.1.7. Blank lines\n2.1.8. Indentation\n2.1.9. Whitespace between tokens\n\n\n2.2. Other tokens\n2.3. Identifiers and keywords\n2.3.1. Keywords\n2.3.2. Soft Keywords\n2.3.3. Reserved classes of identifiers\n\n\n2.4. Literals\n2.4.1. String and Bytes literals\n2.4.1.1. Escape sequences\n\n\n2.4.2. String literal concatenation\n2.4.3. f-strings\n2.4.4. Numeric literals\n2.4.5. Integer literals\n2.4.6. Floating point literals\n2.4.7. Imaginary literals\n\n\n2.5. Operators\n2.6. Delimiters\n\n\n3. Data model\n3.1. Objects, values and types\n3.2. The standard type hierarchy\n3.2.1. None\n3.2.2. NotImplemented\n3.2.3. Ellipsis\n3.2.4. numbers.Number\n3.2.4.1. numbers.Integral\n3.2.4.2. numbers.Real (float)\n3.2.4.3. numbers.Complex (complex)\n\n\n3.2.5. Sequences\n3.2.5.1. Immutable sequences\n3.2.5.2. Mutable sequences\n\n\n3.2.6. Set types\n3.2.7. Mappings\n3.2.7.1. Dictionaries\n\n\n3.2.8. Callable types\n3.2.8.1. User-defined functions\n3.2.8.1.1. Special read-only attributes\n3.2.8.1.2. Special writable attributes\n\n\n3.2.8.2. Instance methods\n3.2.8.3. Generator functions\n3.2.8.4. Coroutine functions\n3.2.8.5. Asynchronous generator functions\n3.2.8.6. Built-in functions\n3.2.8.7. Built-in methods\n3.2.8.8. Classes\n3.2.8.9. Class Instances\n\n\n3.2.9. Modules\n3.2.10. Custom classes\n3.2.11. Class instances\n3.2.12. I/O objects (also known as file objects)\n3.2.13. Internal types\n3.2.13.1. Code objects\n3.2.13.1.1. Special read-only attributes\n3.2.13.1.2. Methods on code objects\n\n\n3.2.13.2. Frame objects\n3.2.13.2.1. Special read-only attributes\n3.2.13.2.2. Special writable attributes\n3.2.13.2.3. Frame object methods\n\n\n3.2.13.3. Traceback objects\n3.2.13.4. Slice objects\n3.2.13.5. Static method objects\n3.2.13.6. Class method objects\n\n\n\n\n3.3. Special method names\n3.3.1. Basic customization\n3.3.2. Customizing attribute access\n3.3.2.1. Customizing module attribute access\n3.3.2.2. Implementing Descriptors\n3.3.2.3. Invoking Descriptors\n3.3.2.4. __slots__\n\n\n3.3.3. Customizing class creation\n3.3.3.1. Metaclasses\n3.3.3.2. Resolving MRO entries\n3.3.3.3. Determining the appropriate metaclass\n3.3.3.4. Preparing the class namespace\n3.3.3.5. Executing the class body\n3.3.3.6. Creating the class object\n3.3.3.7. Uses for metaclasses\n\n\n3.3.4. Customizing instance and subclass checks\n3.3.5. Emulating generic types\n3.3.5.1. The purpose of __class_getitem__\n3.3.5.2. __class_getitem__ versus __getitem__\n\n\n3.3.6. Emulating callable objects\n3.3.7. Emulating container types\n3.3.8. Emulating numeric types\n3.3.9. With Statement Context Managers\n3.3.10. Customizing positional arguments in class pattern matching\n3.3.11. Special method lookup\n\n\n3.4. Coroutines\n3.4.1. Awaitable Objects\n3.4.2. Coroutine Objects\n3.4.3. Asynchronous Iterators\n3.4.4. Asynchronous Context Managers\n\n\n\n\n4. Execution model\n4.1. Structure of a program\n4.2. Naming and binding\n4.2.1. Binding of names\n4.2.2. Resolution of names\n4.2.3. Builtins and restricted execution\n4.2.4. Interaction with dynamic features\n\n\n4.3. Exceptions\n\n\n5. The import system\n5.1. importlib\n5.2. Packages\n5.2.1. Regular packages\n5.2.2. Namespace packages\n\n\n5.3. Searching\n5.3.1. The module cache\n5.3.2. Finders and loaders\n5.3.3. Import hooks\n5.3.4. The meta path\n\n\n5.4. Loading\n5.4.1. Loaders\n5.4.2. Submodules\n5.4.3. Module spec\n5.4.4. Import-related module attributes\n5.4.5. module.__path__\n5.4.6. Module reprs\n5.4.7. Cached bytecode invalidation\n\n\n5.5. The Path Based Finder\n5.5.1. Path entry finders\n5.5.2. Path entry finder protocol\n\n\n5.6. Replacing the standard import system\n5.7. Package Relative Imports\n5.8. Special considerations for __main__\n5.8.1. __main__.__spec__\n\n\n5.9. References\n\n\n6. Expressions\n6.1. Arithmetic conversions\n6.2. Atoms\n6.2.1. Identifiers (Names)\n6.2.2. Literals\n6.2.3. Parenthesized forms\n6.2.4. Displays for lists, sets and dictionaries\n6.2.5. List displays\n6.2.6. Set displays\n6.2.7. Dictionary displays\n6.2.8. Generator expressions\n6.2.9. Yield expressions\n6.2.9.1. Generator-iterator methods\n6.2.9.2. Examples\n6.2.9.3. Asynchronous generator functions\n6.2.9.4. Asynchronous generator-iterator methods\n\n\n\n\n6.3. Primaries\n6.3.1. Attribute references\n6.3.2. Subscriptions\n6.3.3. Slicings\n6.3.4. Calls\n\n\n6.4. Await expression\n6.5. The power operator\n6.6. Unary arithmetic and bitwise operations\n6.7. Binary arithmetic operations\n6.8. Shifting operations\n6.9. Binary bitwise operations\n6.10. Comparisons\n6.10.1. Value comparisons\n6.10.2. Membership test operations\n6.10.3. Identity comparisons\n\n\n6.11. Boolean operations\n6.12. Assignment expressions\n6.13. Conditional expressions\n6.14. Lambdas\n6.15. Expression lists\n6.16. Evaluation order\n6.17. Operator precedence\n\n\n7. Simple statements\n7.1. Expression statements\n7.2. Assignment statements\n7.2.1. Augmented assignment statements\n7.2.2. Annotated assignment statements\n\n\n7.3. The assert statement\n7.4. The pass statement\n7.5. The del statement\n7.6. The return statement\n7.7. The yield statement\n7.8. The raise statement\n7.9. The break statement\n7.10. The continue statement\n7.11. The import statement\n7.11.1. Future statements\n\n\n7.12. The global statement\n7.13. The nonlocal statement\n\n\n8. Compound statements\n8.1. The if statement\n8.2. The while statement\n8.3. The for statement\n8.4. The try statement\n8.4.1. except clause\n8.4.2. except* clause\n8.4.3. else clause\n8.4.4. finally clause\n\n\n8.5. The with statement\n8.6. The match statement\n8.6.1. Overview\n8.6.2. Guards\n8.6.3. Irrefutable Case Blocks\n8.6.4. Patterns\n8.6.4.1. OR Patterns\n8.6.4.2. AS Patterns\n8.6.4.3. Literal Patterns\n8.6.4.4. Capture Patterns\n8.6.4.5. Wildcard Patterns\n8.6.4.6. Value Patterns\n8.6.4.7. Group Patterns\n8.6.4.8. Sequence Patterns\n8.6.4.9. Mapping Patterns\n8.6.4.10. Class Patterns\n\n\n\n\n8.7. Function definitions\n8.8. Class definitions\n8.9. Coroutines\n8.9.1. Coroutine function definition\n8.9.2. The async for statement\n8.9.3. The async with statement\n\n\n\n\n9. Top-level components\n9.1. Complete Python programs\n9.2. File input\n9.3. Interactive input\n9.4. Expression input\n\n\n10. Full Grammar specification\n\n\nThe Python Standard Library\nIntroduction\nNotes on availability\nWebAssembly platforms\n\n\n\n\nBuilt-in Functions\nBuilt-in Constants\nConstants added by the site module\n\n\nBuilt-in Types\nTruth Value Testing\nBoolean Operations â and, or, not\nComparisons\nNumeric Types â int, float, complex\nBitwise Operations on Integer Types\nAdditional Methods on Integer Types\nAdditional Methods on Float\nHashing of numeric types\n\n\nIterator Types\nGenerator Types\n\n\nSequence Types â list, tuple, range\nCommon Sequence Operations\nImmutable Sequence Types\nMutable Sequence Types\nLists\nTuples\nRanges\n\n\nText Sequence Type â str\nString Methods\nprintf-style String Formatting\n\n\nBinary Sequence Types â bytes, bytearray, memoryview\nBytes Objects\nBytearray Objects\nBytes and Bytearray Operations\nprintf-style Bytes Formatting\nMemory Views\n\n\nSet Types â set, frozenset\nMapping Types â dict\nDictionary view objects\n\n\nContext Manager Types\nType Annotation Types â Generic Alias, Union\nGeneric Alias Type\nStandard Generic Classes\nSpecial Attributes of GenericAlias objects\n\n\nUnion Type\n\n\nOther Built-in Types\nModules\nClasses and Class Instances\nFunctions\nMethods\nCode Objects\nType Objects\nThe Null Object\nThe Ellipsis Object\nThe NotImplemented Object\nBoolean Values\nInternal Objects\n\n\nSpecial Attributes\nInteger string conversion length limitation\nAffected APIs\nConfiguring the limit\nRecommended configuration\n\n\n\n\nBuilt-in Exceptions\nException context\nInheriting from built-in exceptions\nBase classes\nConcrete exceptions\nOS exceptions\n\n\nWarnings\nException groups\nException hierarchy\n\n\nText Processing Services\nstring â Common string operations\nString constants\nCustom String Formatting\nFormat String Syntax\nFormat Specification Mini-Language\nFormat examples\n\n\nTemplate strings\nHelper functions\n\n\nre â Regular expression operations\nRegular Expression Syntax\nModule Contents\nFlags\nFunctions\nExceptions\n\n\nRegular Expression Objects\nMatch Objects\nRegular Expression Examples\nChecking for a Pair\nSimulating scanf()\nsearch() vs. match()\nMaking a Phonebook\nText Munging\nFinding all Adverbs\nFinding all Adverbs and their Positions\nRaw String Notation\nWriting a Tokenizer\n\n\n\n\ndifflib â Helpers for computing deltas\nSequenceMatcher Objects\nSequenceMatcher Examples\nDiffer Objects\nDiffer Example\nA command-line interface to difflib\n\n\ntextwrap â Text wrapping and filling\nunicodedata â Unicode Database\nstringprep â Internet String Preparation\nreadline â GNU readline interface\nInit file\nLine buffer\nHistory file\nHistory list\nStartup hooks\nCompletion\nExample\n\n\nrlcompleter â Completion function for GNU readline\n\n\nBinary Data Services\nstruct â Interpret bytes as packed binary data\nFunctions and Exceptions\nFormat Strings\nByte Order, Size, and Alignment\nFormat Characters\nExamples\n\n\nApplications\nNative Formats\nStandard Formats\n\n\nClasses\n\n\ncodecs â Codec registry and base classes\nCodec Base Classes\nError Handlers\nStateless Encoding and Decoding\nIncremental Encoding and Decoding\nIncrementalEncoder Objects\nIncrementalDecoder Objects\n\n\nStream Encoding and Decoding\nStreamWriter Objects\nStreamReader Objects\nStreamReaderWriter Objects\nStreamRecoder Objects\n\n\n\n\nEncodings and Unicode\nStandard Encodings\nPython Specific Encodings\nText Encodings\nBinary Transforms\nText Transforms\n\n\nencodings.idna â Internationalized Domain Names in Applications\nencodings.mbcs â Windows ANSI codepage\nencodings.utf_8_sig â UTF-8 codec with BOM signature\n\n\n\n\nData Types\ndatetime â Basic date and time types\nAware and Naive Objects\nConstants\nAvailable Types\nCommon Properties\nDetermining if an Object is Aware or Naive\n\n\ntimedelta Objects\nExamples of usage: timedelta\n\n\ndate Objects\nExamples of Usage: date\n\n\ndatetime Objects\nExamples of Usage: datetime\n\n\ntime Objects\nExamples of Usage: time\n\n\ntzinfo Objects\ntimezone Objects\nstrftime() and strptime() Behavior\nstrftime() and strptime() Format Codes\nTechnical Detail\n\n\n\n\nzoneinfo â IANA time zone support\nUsing ZoneInfo\nData sources\nConfiguring the data sources\nCompile-time configuration\nEnvironment configuration\nRuntime configuration\n\n\n\n\nThe ZoneInfo class\nString representations\nPickle serialization\n\n\nFunctions\nGlobals\nExceptions and warnings\n\n\ncalendar â General calendar-related functions\nCommand-Line Usage\n\n\ncollections â Container datatypes\nChainMap objects\nChainMap Examples and Recipes\n\n\nCounter objects\ndeque objects\ndeque Recipes\n\n\ndefaultdict objects\ndefaultdict Examples\n\n\nnamedtuple() Factory Function for Tuples with Named Fields\nOrderedDict objects\nOrderedDict Examples and Recipes\n\n\nUserDict objects\nUserList objects\nUserString objects\n\n\ncollections.abc â Abstract Base Classes for Containers\nCollections Abstract Base Classes\nCollections Abstract Base Classes â Detailed Descriptions\nExamples and Recipes\n\n\nheapq â Heap queue algorithm\nBasic Examples\nPriority Queue Implementation Notes\nTheory\n\n\nbisect â Array bisection algorithm\nPerformance Notes\nSearching Sorted Lists\nExamples\n\n\narray â Efficient arrays of numeric values\nweakref â Weak references\nWeak Reference Objects\nExample\nFinalizer Objects\nComparing finalizers with __del__() methods\n\n\ntypes â Dynamic type creation and names for built-in types\nDynamic Type Creation\nStandard Interpreter Types\nAdditional Utility Classes and Functions\nCoroutine Utility Functions\n\n\ncopy â Shallow and deep copy operations\npprint â Data pretty printer\nFunctions\nPrettyPrinter Objects\nExample\n\n\nreprlib â Alternate repr() implementation\nRepr Objects\nSubclassing Repr Objects\n\n\nenum â Support for enumerations\nModule Contents\nData Types\nSupported __dunder__ names\nSupported _sunder_ names\n\n\nUtilities and Decorators\nNotes\n\n\ngraphlib â Functionality to operate with graph-like structures\nExceptions\n\n\n\n\nNumeric and Mathematical Modules\nnumbers â Numeric abstract base classes\nThe numeric tower\nNotes for type implementors\nAdding More Numeric ABCs\nImplementing the arithmetic operations\n\n\n\n\nmath â Mathematical functions\nNumber-theoretic and representation functions\nPower and logarithmic functions\nTrigonometric functions\nAngular conversion\nHyperbolic functions\nSpecial functions\nConstants\n\n\ncmath â Mathematical functions for complex numbers\nConversions to and from polar coordinates\nPower and logarithmic functions\nTrigonometric functions\nHyperbolic functions\nClassification functions\nConstants\n\n\ndecimal â Decimal fixed point and floating point arithmetic\nQuick-start Tutorial\nDecimal objects\nLogical operands\n\n\nContext objects\nConstants\nRounding modes\nSignals\nFloating Point Notes\nMitigating round-off error with increased precision\nSpecial values\n\n\nWorking with threads\nRecipes\nDecimal FAQ\n\n\nfractions â Rational numbers\nrandom â Generate pseudo-random numbers\nBookkeeping functions\nFunctions for bytes\nFunctions for integers\nFunctions for sequences\nReal-valued distributions\nAlternative Generator\nNotes on Reproducibility\nExamples\nRecipes\n\n\nstatistics â Mathematical statistics functions\nAverages and measures of central location\nMeasures of spread\nStatistics for relations between two inputs\nFunction details\nExceptions\nNormalDist objects\nNormalDist Examples and Recipes\n\n\n\n\n\n\nFunctional Programming Modules\nitertools â Functions creating iterators for efficient looping\nItertool functions\nItertools Recipes\n\n\nfunctools â Higher-order functions and operations on callable objects\npartial Objects\n\n\noperator â Standard operators as functions\nMapping Operators to Functions\nIn-place Operators\n\n\n\n\nFile and Directory Access\npathlib â Object-oriented filesystem paths\nBasic use\nPure paths\nGeneral properties\nOperators\nAccessing individual parts\nMethods and properties\n\n\nConcrete paths\nMethods\n\n\nCorrespondence to tools in the os module\n\n\nos.path â Common pathname manipulations\nfileinput â Iterate over lines from multiple input streams\nstat â Interpreting stat() results\nfilecmp â File and Directory Comparisons\nThe dircmp class\n\n\ntempfile â Generate temporary files and directories\nExamples\nDeprecated functions and variables\n\n\nglob â Unix style pathname pattern expansion\nfnmatch â Unix filename pattern matching\nlinecache â Random access to text lines\nshutil â High-level file operations\nDirectory and files operations\nPlatform-dependent efficient copy operations\ncopytree example\nrmtree example\n\n\nArchiving operations\nArchiving example\nArchiving example with base_dir\n\n\nQuerying the size of the output terminal\n\n\n\n\nData Persistence\npickle â Python object serialization\nRelationship to other Python modules\nComparison with marshal\nComparison with json\n\n\nData stream format\nModule Interface\nWhat can be pickled and unpickled?\nPickling Class Instances\nPersistence of External Objects\nDispatch Tables\nHandling Stateful Objects\n\n\nCustom Reduction for Types, Functions, and Other Objects\nOut-of-band Buffers\nProvider API\nConsumer API\nExample\n\n\nRestricting Globals\nPerformance\nExamples\n\n\ncopyreg â Register pickle support functions\nExample\n\n\nshelve â Python object persistence\nRestrictions\nExample\n\n\nmarshal â Internal Python object serialization\ndbm â Interfaces to Unix âdatabasesâ\ndbm.gnu â GNU database manager\ndbm.ndbm â New Database Manager\ndbm.dumb â Portable DBM implementation\n\n\nsqlite3 â DB-API 2.0 interface for SQLite databases\nTutorial\nReference\nModule functions\nModule constants\nConnection objects\nCursor objects\nRow objects\nBlob objects\nPrepareProtocol objects\nExceptions\nSQLite and Python types\nDefault adapters and converters\n\n\nHow-to guides\nHow to use placeholders to bind values in SQL queries\nHow to adapt custom Python types to SQLite values\nHow to write adaptable objects\nHow to register adapter callables\n\n\nHow to convert SQLite values to custom Python types\nAdapter and converter recipes\nHow to use connection shortcut methods\nHow to use the connection context manager\nHow to work with SQLite URIs\nHow to create and use row factories\nHow to handle non-UTF-8 text encodings\n\n\nExplanation\nTransaction control\n\n\n\n\n\n\nData Compression and Archiving\nzlib â Compression compatible with gzip\ngzip â Support for gzip files\nExamples of usage\nCommand Line Interface\nCommand line options\n\n\n\n\nbz2 â Support for bzip2 compression\n(De)compression of files\nIncremental (de)compression\nOne-shot (de)compression\nExamples of usage\n\n\nlzma â Compression using the LZMA algorithm\nReading and writing compressed files\nCompressing and decompressing data in memory\nMiscellaneous\nSpecifying custom filter chains\nExamples\n\n\nzipfile â Work with ZIP archives\nZipFile Objects\nPath Objects\nPyZipFile Objects\nZipInfo Objects\nCommand-Line Interface\nCommand-line options\n\n\nDecompression pitfalls\nFrom file itself\nFile System limitations\nResources limitations\nInterruption\nDefault behaviors of extraction\n\n\n\n\ntarfile â Read and write tar archive files\nTarFile Objects\nTarInfo Objects\nExtraction filters\nDefault named filters\nFilter errors\nHints for further verification\nSupporting older Python versions\nStateful extraction filter example\n\n\nCommand-Line Interface\nCommand-line options\n\n\nExamples\nSupported tar formats\nUnicode issues\n\n\n\n\nFile Formats\ncsv â CSV File Reading and Writing\nModule Contents\nDialects and Formatting Parameters\nReader Objects\nWriter Objects\nExamples\n\n\nconfigparser â Configuration file parser\nQuick Start\nSupported Datatypes\nFallback Values\nSupported INI File Structure\nInterpolation of values\nMapping Protocol Access\nCustomizing Parser Behaviour\nLegacy API Examples\nConfigParser Objects\nRawConfigParser Objects\nExceptions\n\n\ntomllib â Parse TOML files\nExamples\nConversion Table\n\n\nnetrc â netrc file processing\nnetrc Objects\n\n\nplistlib â Generate and parse Apple .plist files\nExamples\n\n\n\n\nCryptographic Services\nhashlib â Secure hashes and message digests\nHash algorithms\nUsage\nConstructors\nAttributes\nHash Objects\nSHAKE variable length digests\nFile hashing\nKey derivation\nBLAKE2\nCreating hash objects\nConstants\nExamples\nSimple hashing\nUsing different digest sizes\nKeyed hashing\nRandomized hashing\nPersonalization\nTree mode\n\n\nCredits\n\n\n\n\nhmac â Keyed-Hashing for Message Authentication\nsecrets â Generate secure random numbers for managing secrets\nRandom numbers\nGenerating tokens\nHow many bytes should tokens use?\n\n\nOther functions\nRecipes and best practices\n\n\n\n\nGeneric Operating System Services\nos â Miscellaneous operating system interfaces\nFile Names, Command Line Arguments, and Environment Variables\nPython UTF-8 Mode\nProcess Parameters\nFile Object Creation\nFile Descriptor Operations\nQuerying the size of a terminal\nInheritance of File Descriptors\n\n\nFiles and Directories\nLinux extended attributes\n\n\nProcess Management\nInterface to the scheduler\nMiscellaneous System Information\nRandom numbers\n\n\nio â Core tools for working with streams\nOverview\nText I/O\nBinary I/O\nRaw I/O\n\n\nText Encoding\nOpt-in EncodingWarning\n\n\nHigh-level Module Interface\nClass hierarchy\nI/O Base Classes\nRaw File I/O\nBuffered Streams\nText I/O\n\n\nPerformance\nBinary I/O\nText I/O\nMulti-threading\nReentrancy\n\n\n\n\ntime â Time access and conversions\nFunctions\nClock ID Constants\nTimezone Constants\n\n\nargparse â Parser for command-line options, arguments and sub-commands\nCore Functionality\nQuick Links for add_argument()\nExample\nCreating a parser\nAdding arguments\nParsing arguments\n\n\nArgumentParser objects\nprog\nusage\ndescription\nepilog\nparents\nformatter_class\nprefix_chars\nfromfile_prefix_chars\nargument_default\nallow_abbrev\nconflict_handler\nadd_help\nexit_on_error\n\n\nThe add_argument() method\nname or flags\naction\nnargs\nconst\ndefault\ntype\nchoices\nrequired\nhelp\nmetavar\ndest\nAction classes\n\n\nThe parse_args() method\nOption value syntax\nInvalid arguments\nArguments containing -\nArgument abbreviations (prefix matching)\nBeyond sys.argv\nThe Namespace object\n\n\nOther utilities\nSub-commands\nFileType objects\nArgument groups\nMutual exclusion\nParser defaults\nPrinting help\nPartial parsing\nCustomizing file parsing\nExiting methods\nIntermixed parsing\n\n\nUpgrading optparse code\nExceptions\n\n\ngetopt â C-style parser for command line options\nlogging â Logging facility for Python\nLogger Objects\nLogging Levels\nHandler Objects\nFormatter Objects\nFilter Objects\nLogRecord Objects\nLogRecord attributes\nLoggerAdapter Objects\nThread Safety\nModule-Level Functions\nModule-Level Attributes\nIntegration with the warnings module\n\n\nlogging.config â Logging configuration\nConfiguration functions\nSecurity considerations\nConfiguration dictionary schema\nDictionary Schema Details\nIncremental Configuration\nObject connections\nUser-defined objects\nHandler configuration order\nAccess to external objects\nAccess to internal objects\nImport resolution and custom importers\n\n\nConfiguration file format\n\n\nlogging.handlers â Logging handlers\nStreamHandler\nFileHandler\nNullHandler\nWatchedFileHandler\nBaseRotatingHandler\nRotatingFileHandler\nTimedRotatingFileHandler\nSocketHandler\nDatagramHandler\nSysLogHandler\nNTEventLogHandler\nSMTPHandler\nMemoryHandler\nHTTPHandler\nQueueHandler\nQueueListener\n\n\ngetpass â Portable password input\ncurses â Terminal handling for character-cell displays\nFunctions\nWindow Objects\nConstants\n\n\ncurses.textpad â Text input widget for curses programs\nTextbox objects\n\n\ncurses.ascii â Utilities for ASCII characters\ncurses.panel â A panel stack extension for curses\nFunctions\nPanel Objects\n\n\nplatform â  Access to underlying platformâs identifying data\nCross Platform\nJava Platform\nWindows Platform\nmacOS Platform\nUnix Platforms\nLinux Platforms\n\n\nerrno â Standard errno system symbols\nctypes â A foreign function library for Python\nctypes tutorial\nLoading dynamic link libraries\nAccessing functions from loaded dlls\nCalling functions\nFundamental data types\nCalling functions, continued\nCalling variadic functions\nCalling functions with your own custom data types\nSpecifying the required argument types (function prototypes)\nReturn types\nPassing pointers (or: passing parameters by reference)\nStructures and unions\nStructure/union alignment and byte order\nBit fields in structures and unions\nArrays\nPointers\nType conversions\nIncomplete Types\nCallback functions\nAccessing values exported from dlls\nSurprises\nVariable-sized data types\n\n\nctypes reference\nFinding shared libraries\nLoading shared libraries\nForeign functions\nFunction prototypes\nUtility functions\nData types\nFundamental data types\nStructured data types\nArrays and pointers\n\n\n\n\n\n\nConcurrent Execution\nthreading â Thread-based parallelism\nThread-Local Data\nThread Objects\nLock Objects\nRLock Objects\nCondition Objects\nSemaphore Objects\nSemaphore Example\n\n\nEvent Objects\nTimer Objects\nBarrier Objects\nUsing locks, conditions, and semaphores in the with statement\n\n\nmultiprocessing â Process-based parallelism\nIntroduction\nThe Process class\nContexts and start methods\nExchanging objects between processes\nSynchronization between processes\nSharing state between processes\nUsing a pool of workers\n\n\nReference\nProcess and exceptions\nPipes and Queues\nMiscellaneous\nConnection Objects\nSynchronization primitives\nShared ctypes Objects\nThe multiprocessing.sharedctypes module\n\n\nManagers\nCustomized managers\nUsing a remote manager\n\n\nProxy Objects\nCleanup\n\n\nProcess Pools\nListeners and Clients\nAddress Formats\n\n\nAuthentication keys\nLogging\nThe multiprocessing.dummy module\n\n\nProgramming guidelines\nAll start methods\nThe spawn and forkserver start methods\n\n\nExamples\n\n\nmultiprocessing.shared_memory â Shared memory for direct access across processes\nThe concurrent package\nconcurrent.futures â Launching parallel tasks\nExecutor Objects\nThreadPoolExecutor\nThreadPoolExecutor Example\n\n\nProcessPoolExecutor\nProcessPoolExecutor Example\n\n\nFuture Objects\nModule Functions\nException classes\n\n\nsubprocess â Subprocess management\nUsing the subprocess Module\nFrequently Used Arguments\nPopen Constructor\nExceptions\n\n\nSecurity Considerations\nPopen Objects\nWindows Popen Helpers\nWindows Constants\n\n\nOlder high-level API\nReplacing Older Functions with the subprocess Module\nReplacing /bin/sh shell command substitution\nReplacing shell pipeline\nReplacing os.system()\nReplacing the os.spawn family\nReplacing os.popen(), os.popen2(), os.popen3()\nReplacing functions from the popen2 module\n\n\nLegacy Shell Invocation Functions\nNotes\nConverting an argument sequence to a string on Windows\nDisabling use of vfork() or posix_spawn()\n\n\n\n\nsched â Event scheduler\nScheduler Objects\n\n\nqueue â A synchronized queue class\nQueue Objects\nSimpleQueue Objects\n\n\ncontextvars â Context Variables\nContext Variables\nManual Context Management\nasyncio support\n\n\n_thread â Low-level threading API\n\n\nNetworking and Interprocess Communication\nasyncio â Asynchronous I/O\nRunners\nRunning an asyncio Program\nRunner context manager\nHandling Keyboard Interruption\n\n\nCoroutines and Tasks\nCoroutines\nAwaitables\nCreating Tasks\nTask Cancellation\nTask Groups\nSleeping\nRunning Tasks Concurrently\nShielding From Cancellation\nTimeouts\nWaiting Primitives\nRunning in Threads\nScheduling From Other Threads\nIntrospection\nTask Object\n\n\nStreams\nStreamReader\nStreamWriter\nExamples\nTCP echo client using streams\nTCP echo server using streams\nGet HTTP headers\nRegister an open socket to wait for data using streams\n\n\n\n\nSynchronization Primitives\nLock\nEvent\nCondition\nSemaphore\nBoundedSemaphore\nBarrier\n\n\nSubprocesses\nCreating Subprocesses\nConstants\nInteracting with Subprocesses\nSubprocess and Threads\nExamples\n\n\n\n\nQueues\nQueue\nPriority Queue\nLIFO Queue\nExceptions\nExamples\n\n\nExceptions\nEvent Loop\nEvent Loop Methods\nRunning and stopping the loop\nScheduling callbacks\nScheduling delayed callbacks\nCreating Futures and Tasks\nOpening network connections\nCreating network servers\nTransferring files\nTLS Upgrade\nWatching file descriptors\nWorking with socket objects directly\nDNS\nWorking with pipes\nUnix signals\nExecuting code in thread or process pools\nError Handling API\nEnabling debug mode\nRunning Subprocesses\n\n\nCallback Handles\nServer Objects\nEvent Loop Implementations\nExamples\nHello World with call_soon()\nDisplay the current date with call_later()\nWatch a file descriptor for read events\nSet signal handlers for SIGINT and SIGTERM\n\n\n\n\nFutures\nFuture Functions\nFuture Object\n\n\nTransports and Protocols\nTransports\nTransports Hierarchy\nBase Transport\nRead-only Transports\nWrite-only Transports\nDatagram Transports\nSubprocess Transports\n\n\nProtocols\nBase Protocols\nBase Protocol\nStreaming Protocols\nBuffered Streaming Protocols\nDatagram Protocols\nSubprocess Protocols\n\n\nExamples\nTCP Echo Server\nTCP Echo Client\nUDP Echo Server\nUDP Echo Client\nConnecting Existing Sockets\nloop.subprocess_exec() and SubprocessProtocol\n\n\n\n\nPolicies\nGetting and Setting the Policy\nPolicy Objects\nProcess Watchers\nCustom Policies\n\n\nPlatform Support\nAll Platforms\nWindows\nSubprocess Support on Windows\n\n\nmacOS\n\n\nExtending\nWriting a Custom Event Loop\nFuture and Task private constructors\nTask lifetime support\n\n\nHigh-level API Index\nTasks\nQueues\nSubprocesses\nStreams\nSynchronization\nExceptions\n\n\nLow-level API Index\nObtaining the Event Loop\nEvent Loop Methods\nTransports\nProtocols\nEvent Loop Policies\n\n\nDeveloping with asyncio\nDebug Mode\nConcurrency and Multithreading\nRunning Blocking Code\nLogging\nDetect never-awaited coroutines\nDetect never-retrieved exceptions\n\n\n\n\nsocket â Low-level networking interface\nSocket families\nModule contents\nExceptions\nConstants\nFunctions\nCreating sockets\nOther functions\n\n\n\n\nSocket Objects\nNotes on socket timeouts\nTimeouts and the connect method\nTimeouts and the accept method\n\n\nExample\n\n\nssl â TLS/SSL wrapper for socket objects\nFunctions, Constants, and Exceptions\nSocket creation\nContext creation\nExceptions\nRandom generation\nCertificate handling\nConstants\n\n\nSSL Sockets\nSSL Contexts\nCertificates\nCertificate chains\nCA certificates\nCombined key and certificate\nSelf-signed certificates\n\n\nExamples\nTesting for SSL support\nClient-side operation\nServer-side operation\n\n\nNotes on non-blocking sockets\nMemory BIO Support\nSSL session\nSecurity considerations\nBest defaults\nManual settings\nVerifying certificates\nProtocol versions\nCipher selection\n\n\nMulti-processing\n\n\nTLS 1.3\n\n\nselect â Waiting for I/O completion\n/dev/poll Polling Objects\nEdge and Level Trigger Polling (epoll) Objects\nPolling Objects\nKqueue Objects\nKevent Objects\n\n\nselectors â High-level I/O multiplexing\nIntroduction\nClasses\nExamples\n\n\nsignal â Set handlers for asynchronous events\nGeneral rules\nExecution of Python signal handlers\nSignals and threads\n\n\nModule contents\nExamples\nNote on SIGPIPE\nNote on Signal Handlers and Exceptions\n\n\nmmap â Memory-mapped file support\nMADV_* Constants\nMAP_* Constants\n\n\n\n\nInternet Data Handling\nemail â An email and MIME handling package\nemail.message: Representing an email message\nemail.parser: Parsing email messages\nFeedParser API\nParser API\nAdditional notes\n\n\nemail.generator: Generating MIME documents\nemail.policy: Policy Objects\nemail.errors: Exception and Defect classes\nemail.headerregistry: Custom Header Objects\nemail.contentmanager: Managing MIME Content\nContent Manager Instances\n\n\nemail: Examples\nemail.message.Message: Representing an email message using the compat32 API\nemail.mime: Creating email and MIME objects from scratch\nemail.header: Internationalized headers\nemail.charset: Representing character sets\nemail.encoders: Encoders\nemail.utils: Miscellaneous utilities\nemail.iterators: Iterators\n\n\njson â JSON encoder and decoder\nBasic Usage\nEncoders and Decoders\nExceptions\nStandard Compliance and Interoperability\nCharacter Encodings\nInfinite and NaN Number Values\nRepeated Names Within an Object\nTop-level Non-Object, Non-Array Values\nImplementation Limitations\n\n\nCommand Line Interface\nCommand line options\n\n\n\n\nmailbox â Manipulate mailboxes in various formats\nMailbox objects\nMaildir objects\nmbox objects\nMH objects\nBabyl objects\nMMDF objects\n\n\nMessage objects\nMaildirMessage objects\nmboxMessage objects\nMHMessage objects\nBabylMessage objects\nMMDFMessage objects\n\n\nExceptions\nExamples\n\n\nmimetypes â Map filenames to MIME types\nMimeTypes Objects\n\n\nbase64 â Base16, Base32, Base64, Base85 Data Encodings\nSecurity Considerations\n\n\nbinascii â Convert between binary and ASCII\nquopri â Encode and decode MIME quoted-printable data\n\n\nStructured Markup Processing Tools\nhtml â HyperText Markup Language support\nhtml.parser â Simple HTML and XHTML parser\nExample HTML Parser Application\nHTMLParser Methods\nExamples\n\n\nhtml.entities â Definitions of HTML general entities\nXML Processing Modules\nXML vulnerabilities\nThe defusedxml Package\n\n\nxml.etree.ElementTree â The ElementTree XML API\nTutorial\nXML tree and elements\nParsing XML\nPull API for non-blocking parsing\nFinding interesting elements\nModifying an XML File\nBuilding XML documents\nParsing XML with Namespaces\n\n\nXPath support\nExample\nSupported XPath syntax\n\n\nReference\nFunctions\n\n\nXInclude support\nExample\n\n\nReference\nFunctions\nElement Objects\nElementTree Objects\nQName Objects\nTreeBuilder Objects\nXMLParser Objects\nXMLPullParser Objects\nExceptions\n\n\n\n\nxml.dom â The Document Object Model API\nModule Contents\nObjects in the DOM\nDOMImplementation Objects\nNode Objects\nNodeList Objects\nDocumentType Objects\nDocument Objects\nElement Objects\nAttr Objects\nNamedNodeMap Objects\nComment Objects\nText and CDATASection Objects\nProcessingInstruction Objects\nExceptions\n\n\nConformance\nType Mapping\nAccessor Methods\n\n\n\n\nxml.dom.minidom â Minimal DOM implementation\nDOM Objects\nDOM Example\nminidom and the DOM standard\n\n\nxml.dom.pulldom â Support for building partial DOM trees\nDOMEventStream Objects\n\n\nxml.sax â Support for SAX2 parsers\nSAXException Objects\n\n\nxml.sax.handler â Base classes for SAX handlers\nContentHandler Objects\nDTDHandler Objects\nEntityResolver Objects\nErrorHandler Objects\nLexicalHandler Objects\n\n\nxml.sax.saxutils â SAX Utilities\nxml.sax.xmlreader â Interface for XML parsers\nXMLReader Objects\nIncrementalParser Objects\nLocator Objects\nInputSource Objects\nThe Attributes Interface\nThe AttributesNS Interface\n\n\nxml.parsers.expat â Fast XML parsing using Expat\nXMLParser Objects\nExpatError Exceptions\nExample\nContent Model Descriptions\nExpat error constants\n\n\n\n\nInternet Protocols and Support\nwebbrowser â Convenient web-browser controller\nBrowser Controller Objects\n\n\nwsgiref â WSGI Utilities and Reference Implementation\nwsgiref.util â WSGI environment utilities\nwsgiref.headers â WSGI response header tools\nwsgiref.simple_server â a simple WSGI HTTP server\nwsgiref.validate â WSGI conformance checker\nwsgiref.handlers â server/gateway base classes\nwsgiref.types â WSGI types for static type checking\nExamples\n\n\nurllib â URL handling modules\nurllib.request â Extensible library for opening URLs\nRequest Objects\nOpenerDirector Objects\nBaseHandler Objects\nHTTPRedirectHandler Objects\nHTTPCookieProcessor Objects\nProxyHandler Objects\nHTTPPasswordMgr Objects\nHTTPPasswordMgrWithPriorAuth Objects\nAbstractBasicAuthHandler Objects\nHTTPBasicAuthHandler Objects\nProxyBasicAuthHandler Objects\nAbstractDigestAuthHandler Objects\nHTTPDigestAuthHandler Objects\nProxyDigestAuthHandler Objects\nHTTPHandler Objects\nHTTPSHandler Objects\nFileHandler Objects\nDataHandler Objects\nFTPHandler Objects\nCacheFTPHandler Objects\nUnknownHandler Objects\nHTTPErrorProcessor Objects\nExamples\nLegacy interface\nurllib.request Restrictions\n\n\nurllib.response â Response classes used by urllib\nurllib.parse â Parse URLs into components\nURL Parsing\nURL parsing security\nParsing ASCII Encoded Bytes\nStructured Parse Results\nURL Quoting\n\n\nurllib.error â Exception classes raised by urllib.request\nurllib.robotparser â  Parser for robots.txt\nhttp â HTTP modules\nHTTP status codes\nHTTP methods\n\n\nhttp.client â HTTP protocol client\nHTTPConnection Objects\nHTTPResponse Objects\nExamples\nHTTPMessage Objects\n\n\nftplib â FTP protocol client\nReference\nFTP objects\nFTP_TLS objects\nModule variables\n\n\n\n\npoplib â POP3 protocol client\nPOP3 Objects\nPOP3 Example\n\n\nimaplib â IMAP4 protocol client\nIMAP4 Objects\nIMAP4 Example\n\n\nsmtplib â SMTP protocol client\nSMTP Objects\nSMTP Example\n\n\nuuid â UUID objects according to RFC 4122\nExample\n\n\nsocketserver â A framework for network servers\nServer Creation Notes\nServer Objects\nRequest Handler Objects\nExamples\nsocketserver.TCPServer Example\nsocketserver.UDPServer Example\nAsynchronous Mixins\n\n\n\n\nhttp.server â HTTP servers\nSecurity Considerations\n\n\nhttp.cookies â HTTP state management\nCookie Objects\nMorsel Objects\nExample\n\n\nhttp.cookiejar â Cookie handling for HTTP clients\nCookieJar and FileCookieJar Objects\nFileCookieJar subclasses and co-operation with web browsers\nCookiePolicy Objects\nDefaultCookiePolicy Objects\nCookie Objects\nExamples\n\n\nxmlrpc â XMLRPC server and client modules\nxmlrpc.client â XML-RPC client access\nServerProxy Objects\nDateTime Objects\nBinary Objects\nFault Objects\nProtocolError Objects\nMultiCall Objects\nConvenience Functions\nExample of Client Usage\nExample of Client and Server Usage\n\n\nxmlrpc.server â Basic XML-RPC servers\nSimpleXMLRPCServer Objects\nSimpleXMLRPCServer Example\n\n\nCGIXMLRPCRequestHandler\nDocumenting XMLRPC server\nDocXMLRPCServer Objects\nDocCGIXMLRPCRequestHandler\n\n\nipaddress â IPv4/IPv6 manipulation library\nConvenience factory functions\nIP Addresses\nAddress objects\nConversion to Strings and Integers\nOperators\nComparison operators\nArithmetic operators\n\n\n\n\nIP Network definitions\nPrefix, net mask and host mask\nNetwork objects\nOperators\nLogical operators\nIteration\nNetworks as containers of addresses\n\n\n\n\nInterface objects\nOperators\nLogical operators\n\n\n\n\nOther Module Level Functions\nCustom Exceptions\n\n\n\n\nMultimedia Services\nwave â Read and write WAV files\nWave_read Objects\nWave_write Objects\n\n\ncolorsys â Conversions between color systems\n\n\nInternationalization\ngettext â Multilingual internationalization services\nGNU gettext API\nClass-based API\nThe NullTranslations class\nThe GNUTranslations class\nSolaris message catalog support\nThe Catalog constructor\n\n\nInternationalizing your programs and modules\nLocalizing your module\nLocalizing your application\nChanging languages on the fly\nDeferred translations\n\n\nAcknowledgements\n\n\nlocale â Internationalization services\nBackground, details, hints, tips and caveats\nFor extension writers and programs that embed Python\nAccess to message catalogs\n\n\n\n\nProgram Frameworks\nturtle â Turtle graphics\nIntroduction\nTutorial\nStarting a turtle environment\nBasic drawing\nPen control\nThe turtleâs position\n\n\nMaking algorithmic patterns\n\n\nHow toâ¦\nGet started as quickly as possible\nUse the turtle module namespace\nUse turtle graphics in a script\nUse object-oriented turtle graphics\n\n\nTurtle graphics reference\nTurtle methods\nMethods of TurtleScreen/Screen\n\n\nMethods of RawTurtle/Turtle and corresponding functions\nTurtle motion\nTell Turtleâs state\nSettings for measurement\nPen control\nDrawing state\nColor control\nFilling\nMore drawing control\n\n\nTurtle state\nVisibility\nAppearance\n\n\nUsing events\nSpecial Turtle methods\nCompound shapes\n\n\nMethods of TurtleScreen/Screen and corresponding functions\nWindow control\nAnimation control\nUsing screen events\nInput methods\nSettings and special methods\nMethods specific to Screen, not inherited from TurtleScreen\n\n\nPublic classes\nExplanation\nHelp and configuration\nHow to use help\nTranslation of docstrings into different languages\nHow to configure Screen and Turtles\n\n\nturtledemo â Demo scripts\nChanges since Python 2.6\nChanges since Python 3.0\n\n\ncmd â Support for line-oriented command interpreters\nCmd Objects\nCmd Example\n\n\nshlex â Simple lexical analysis\nshlex Objects\nParsing Rules\nImproved Compatibility with Shells\n\n\n\n\nGraphical User Interfaces with Tk\ntkinter â Python interface to Tcl/Tk\nArchitecture\nTkinter Modules\nTkinter Life Preserver\nA Hello World Program\nImportant Tk Concepts\nUnderstanding How Tkinter Wraps Tcl/Tk\nHow do Iâ¦? What option doesâ¦?\nNavigating the Tcl/Tk Reference Manual\n\n\nThreading model\nHandy Reference\nSetting Options\nThe Packer\nPacker Options\nCoupling Widget Variables\nThe Window Manager\nTk Option Data Types\nBindings and Events\nThe index Parameter\nImages\n\n\nFile Handlers\n\n\ntkinter.colorchooser â Color choosing dialog\ntkinter.font â Tkinter font wrapper\nTkinter Dialogs\ntkinter.simpledialog â Standard Tkinter input dialogs\ntkinter.filedialog â File selection dialogs\nNative Load/Save Dialogs\n\n\ntkinter.commondialog â Dialog window templates\n\n\ntkinter.messagebox â Tkinter message prompts\ntkinter.scrolledtext â Scrolled Text Widget\ntkinter.dnd â Drag and drop support\ntkinter.ttk â Tk themed widgets\nUsing Ttk\nTtk Widgets\nWidget\nStandard Options\nScrollable Widget Options\nLabel Options\nCompatibility Options\nWidget States\nttk.Widget\n\n\nCombobox\nOptions\nVirtual events\nttk.Combobox\n\n\nSpinbox\nOptions\nVirtual events\nttk.Spinbox\n\n\nNotebook\nOptions\nTab Options\nTab Identifiers\nVirtual Events\nttk.Notebook\n\n\nProgressbar\nOptions\nttk.Progressbar\n\n\nSeparator\nOptions\n\n\nSizegrip\nPlatform-specific notes\nBugs\n\n\nTreeview\nOptions\nItem Options\nTag Options\nColumn Identifiers\nVirtual Events\nttk.Treeview\n\n\nTtk Styling\nLayouts\n\n\n\n\ntkinter.tix â Extension widgets for Tk\nUsing Tix\nTix Widgets\nBasic Widgets\nFile Selectors\nHierarchical ListBox\nTabular ListBox\nManager Widgets\nImage Types\nMiscellaneous Widgets\nForm Geometry Manager\n\n\nTix Commands\n\n\nIDLE\nMenus\nFile menu (Shell and Editor)\nEdit menu (Shell and Editor)\nFormat menu (Editor window only)\nRun menu (Editor window only)\nShell menu (Shell window only)\nDebug menu (Shell window only)\nOptions menu (Shell and Editor)\nWindow menu (Shell and Editor)\nHelp menu (Shell and Editor)\nContext menus\n\n\nEditing and Navigation\nEditor windows\nKey bindings\nAutomatic indentation\nSearch and Replace\nCompletions\nCalltips\nCode Context\nShell window\nText colors\n\n\nStartup and Code Execution\nCommand line usage\nStartup failure\nRunning user code\nUser output in Shell\nDeveloping tkinter applications\nRunning without a subprocess\n\n\nHelp and Preferences\nHelp sources\nSetting preferences\nIDLE on macOS\nExtensions\n\n\nidlelib\n\n\n\n\nDevelopment Tools\ntyping â Support for type hints\nRelevant PEPs\nType aliases\nNewType\nAnnotating callable objects\nGenerics\nAnnotating tuples\nThe type of class objects\nUser-defined generic types\nThe Any type\nNominal vs structural subtyping\nModule contents\nSpecial typing primitives\nSpecial types\nSpecial forms\nBuilding generic types\nOther special directives\n\n\nProtocols\nABCs for working with IO\nFunctions and decorators\nIntrospection helpers\nConstant\nDeprecated aliases\nAliases to built-in types\nAliases to types in collections\nAliases to other concrete types\nAliases to container ABCs in collections.abc\nAliases to asynchronous ABCs in collections.abc\nAliases to other ABCs in collections.abc\nAliases to contextlib ABCs\n\n\n\n\nDeprecation Timeline of Major Features\n\n\npydoc â Documentation generator and online help system\nPython Development Mode\nEffects of the Python Development Mode\nResourceWarning Example\nBad file descriptor error example\n\n\ndoctest â Test interactive Python examples\nSimple Usage: Checking Examples in Docstrings\nSimple Usage: Checking Examples in a Text File\nHow It Works\nWhich Docstrings Are Examined?\nHow are Docstring Examples Recognized?\nWhatâs the Execution Context?\nWhat About Exceptions?\nOption Flags\nDirectives\nWarnings\n\n\nBasic API\nUnittest API\nAdvanced API\nDocTest Objects\nExample Objects\nDocTestFinder objects\nDocTestParser objects\nDocTestRunner objects\nOutputChecker objects\n\n\nDebugging\nSoapbox\n\n\nunittest â Unit testing framework\nBasic example\nCommand-Line Interface\nCommand-line options\n\n\nTest Discovery\nOrganizing test code\nRe-using old test code\nSkipping tests and expected failures\nDistinguishing test iterations using subtests\nClasses and functions\nTest cases\nDeprecated aliases\n\n\nGrouping tests\nLoading and running tests\nload_tests Protocol\n\n\n\n\nClass and Module Fixtures\nsetUpClass and tearDownClass\nsetUpModule and tearDownModule\n\n\nSignal Handling\n\n\nunittest.mock â mock object library\nQuick Guide\nThe Mock Class\nCalling\nDeleting Attributes\nMock names and the name attribute\nAttaching Mocks as Attributes\n\n\nThe patchers\npatch\npatch.object\npatch.dict\npatch.multiple\npatch methods: start and stop\npatch builtins\nTEST_PREFIX\nNesting Patch Decorators\nWhere to patch\nPatching Descriptors and Proxy Objects\n\n\nMagicMock and magic method support\nMocking Magic Methods\nMagic Mock\n\n\nHelpers\nsentinel\nDEFAULT\ncall\ncreate_autospec\nANY\nFILTER_DIR\nmock_open\nAutospeccing\nSealing mocks\n\n\nOrder of precedence of side_effect, return_value and wraps\n\n\nunittest.mock â getting started\nUsing Mock\nMock Patching Methods\nMock for Method Calls on an Object\nMocking Classes\nNaming your mocks\nTracking all Calls\nSetting Return Values and Attributes\nRaising exceptions with mocks\nSide effect functions and iterables\nMocking asynchronous iterators\nMocking asynchronous context manager\nCreating a Mock from an Existing Object\nUsing side_effect to return per file content\n\n\nPatch Decorators\nFurther Examples\nMocking chained calls\nPartial mocking\nMocking a Generator Method\nApplying the same patch to every test method\nMocking Unbound Methods\nChecking multiple calls with mock\nCoping with mutable arguments\nNesting Patches\nMocking a dictionary with MagicMock\nMock subclasses and their attributes\nMocking imports with patch.dict\nTracking order of calls and less verbose call assertions\nMore complex argument matching\n\n\n\n\n2to3 â Automated Python 2 to 3 code translation\nUsing 2to3\nFixers\nlib2to3 â 2to3âs library\n\n\ntest â Regression tests package for Python\nWriting Unit Tests for the test package\nRunning tests using the command-line interface\n\n\ntest.support â Utilities for the Python test suite\ntest.support.socket_helper â Utilities for socket tests\ntest.support.script_helper â Utilities for the Python execution tests\ntest.support.bytecode_helper â Support tools for testing correct bytecode generation\ntest.support.threading_helper â Utilities for threading tests\ntest.support.os_helper â Utilities for os tests\ntest.support.import_helper â Utilities for import tests\ntest.support.warnings_helper â Utilities for warnings tests\n\n\nDebugging and Profiling\nAudit events table\nbdb â Debugger framework\nfaulthandler â Dump the Python traceback\nDumping the traceback\nFault handler state\nDumping the tracebacks after a timeout\nDumping the traceback on a user signal\nIssue with file descriptors\nExample\n\n\npdb â The Python Debugger\nDebugger Commands\n\n\nThe Python Profilers\nIntroduction to the profilers\nInstant Userâs Manual\nprofile and cProfile Module Reference\nThe Stats Class\nWhat Is Deterministic Profiling?\nLimitations\nCalibration\nUsing a custom timer\n\n\ntimeit â Measure execution time of small code snippets\nBasic Examples\nPython Interface\nCommand-Line Interface\nExamples\n\n\ntrace â Trace or track Python statement execution\nCommand-Line Usage\nMain options\nModifiers\nFilters\n\n\nProgrammatic Interface\n\n\ntracemalloc â Trace memory allocations\nExamples\nDisplay the top 10\nCompute differences\nGet the traceback of a memory block\nPretty top\nRecord the current and peak size of all traced memory blocks\n\n\n\n\nAPI\nFunctions\nDomainFilter\nFilter\nFrame\nSnapshot\nStatistic\nStatisticDiff\nTrace\nTraceback\n\n\n\n\n\n\nSoftware Packaging and Distribution\ndistutils â Building and installing Python modules\nensurepip â Bootstrapping the pip installer\nCommand line interface\nModule API\n\n\nvenv â Creation of virtual environments\nCreating virtual environments\nHow venvs work\nAPI\nAn example of extending EnvBuilder\n\n\nzipapp â Manage executable Python zip archives\nBasic Example\nCommand-Line Interface\nPython API\nExamples\nSpecifying the Interpreter\nCreating Standalone Applications with zipapp\nMaking a Windows executable\nCaveats\n\n\nThe Python Zip Application Archive Format\n\n\n\n\nPython Runtime Services\nsys â System-specific parameters and functions\nsysconfig â Provide access to Pythonâs configuration information\nConfiguration variables\nInstallation paths\nUser scheme\nposix_user\nnt_user\nosx_framework_user\n\n\nHome scheme\nposix_home\n\n\nPrefix scheme\nposix_prefix\nnt\n\n\nInstallation path functions\nOther functions\nUsing sysconfig as a script\n\n\nbuiltins â Built-in objects\n__main__ â Top-level code environment\n__name__ == '__main__'\nWhat is the âtop-level code environmentâ?\nIdiomatic Usage\nPackaging Considerations\n\n\n__main__.py in Python Packages\nIdiomatic Usage\n\n\nimport __main__\n\n\nwarnings â Warning control\nWarning Categories\nThe Warnings Filter\nDescribing Warning Filters\nDefault Warning Filter\nOverriding the default filter\n\n\nTemporarily Suppressing Warnings\nTesting Warnings\nUpdating Code For New Versions of Dependencies\nAvailable Functions\nAvailable Context Managers\n\n\ndataclasses â Data Classes\nModule contents\nPost-init processing\nClass variables\nInit-only variables\nFrozen instances\nInheritance\nRe-ordering of keyword-only parameters in __init__()\nDefault factory functions\nMutable default values\nDescriptor-typed fields\n\n\ncontextlib â Utilities for with-statement contexts\nUtilities\nExamples and Recipes\nSupporting a variable number of context managers\nCatching exceptions from __enter__ methods\nCleaning up in an __enter__ implementation\nReplacing any use of try-finally and flag variables\nUsing a context manager as a function decorator\n\n\nSingle use, reusable and reentrant context managers\nReentrant context managers\nReusable context managers\n\n\n\n\nabc â Abstract Base Classes\natexit â Exit handlers\natexit Example\n\n\ntraceback â Print or retrieve a stack traceback\nTracebackException Objects\nStackSummary Objects\nFrameSummary Objects\nTraceback Examples\n\n\n__future__ â Future statement definitions\nModule Contents\n\n\ngc â Garbage Collector interface\ninspect â Inspect live objects\nTypes and members\nRetrieving source code\nIntrospecting callables with the Signature object\nClasses and functions\nThe interpreter stack\nFetching attributes statically\nCurrent State of Generators and Coroutines\nCode Objects Bit Flags\nCommand Line Interface\n\n\nsite â Site-specific configuration hook\nsitecustomize\nusercustomize\nReadline configuration\nModule contents\nCommand Line Interface\n\n\n\n\nCustom Python Interpreters\ncode â Interpreter base classes\nInteractive Interpreter Objects\nInteractive Console Objects\n\n\ncodeop â Compile Python code\n\n\nImporting Modules\nzipimport â Import modules from Zip archives\nzipimporter Objects\nExamples\n\n\npkgutil â Package extension utility\nmodulefinder â Find modules used by a script\nExample usage of ModuleFinder\n\n\nrunpy â Locating and executing Python modules\nimportlib â The implementation of import\nIntroduction\nFunctions\nimportlib.abc â Abstract base classes related to import\nimportlib.machinery â Importers and path hooks\nimportlib.util â Utility code for importers\nExamples\nImporting programmatically\nChecking if a module can be imported\nImporting a source file directly\nImplementing lazy imports\nSetting up an importer\nApproximating importlib.import_module()\n\n\n\n\nimportlib.resources â Package resource reading, opening and access\nDeprecated functions\n\n\nimportlib.resources.abc â Abstract base classes for resources\nimportlib.metadata â Accessing package metadata\nOverview\nFunctional API\nEntry points\nDistribution metadata\nDistribution versions\nDistribution files\nDistribution requirements\nMapping import to distribution packages\n\n\nDistributions\nDistribution Discovery\nExtending the search algorithm\n\n\nThe initialization of the sys.path module search path\nVirtual environments\n_pth files\nEmbedded Python\n\n\n\n\nPython Language Services\nast â Abstract Syntax Trees\nAbstract Grammar\nNode classes\nRoot nodes\nLiterals\nVariables\nExpressions\nSubscripting\nComprehensions\n\n\nStatements\nImports\n\n\nControl flow\nPattern matching\nFunction and class definitions\nAsync and await\n\n\nast Helpers\nCompiler Flags\nCommand-Line Usage\n\n\nsymtable â Access to the compilerâs symbol tables\nGenerating Symbol Tables\nExamining Symbol Tables\n\n\ntoken â Constants used with Python parse trees\nkeyword â Testing for Python keywords\ntokenize â Tokenizer for Python source\nTokenizing Input\nCommand-Line Usage\nExamples\n\n\ntabnanny â Detection of ambiguous indentation\npyclbr â Python module browser support\nFunction Objects\nClass Objects\n\n\npy_compile â Compile Python source files\nCommand-Line Interface\n\n\ncompileall â Byte-compile Python libraries\nCommand-line use\nPublic functions\n\n\ndis â Disassembler for Python bytecode\nCommand-line interface\nBytecode analysis\nAnalysis functions\nPython Bytecode Instructions\nOpcode collections\n\n\npickletools â Tools for pickle developers\nCommand line usage\nCommand line options\n\n\nProgrammatic Interface\n\n\n\n\nMS Windows Specific Services\nmsvcrt â Useful routines from the MS VC++ runtime\nFile Operations\nConsole I/O\nOther Functions\n\n\nwinreg â Windows registry access\nFunctions\nConstants\nHKEY_* Constants\nAccess Rights\n64-bit Specific\n\n\nValue Types\n\n\nRegistry Handle Objects\n\n\nwinsound â Sound-playing interface for Windows\n\n\nUnix Specific Services\nposix â The most common POSIX system calls\nLarge File Support\nNotable Module Contents\n\n\npwd â The password database\ngrp â The group database\ntermios â POSIX style tty control\nExample\n\n\ntty â Terminal control functions\npty â Pseudo-terminal utilities\nExample\n\n\nfcntl â The fcntl and ioctl system calls\nresource â Resource usage information\nResource Limits\nResource Usage\n\n\nsyslog â Unix syslog library routines\nExamples\nSimple example\n\n\n\n\n\n\nModules command-line interface (CLI)\nSuperseded Modules\naifc â Read and write AIFF and AIFC files\nasynchat â Asynchronous socket command/response handler\nasynchat Example\n\n\nasyncore â Asynchronous socket handler\nasyncore Example basic HTTP client\nasyncore Example basic echo server\n\n\naudioop â Manipulate raw audio data\ncgi â Common Gateway Interface support\nIntroduction\nUsing the cgi module\nHigher Level Interface\nFunctions\nCaring about security\nInstalling your CGI script on a Unix system\nTesting your CGI script\nDebugging CGI scripts\nCommon problems and solutions\n\n\ncgitb â Traceback manager for CGI scripts\nchunk â Read IFF chunked data\ncrypt â Function to check Unix passwords\nHashing Methods\nModule Attributes\nModule Functions\nExamples\n\n\nimghdr â Determine the type of an image\nimp â Access the import internals\nExamples\n\n\nmailcap â Mailcap file handling\nmsilib â Read and write Microsoft Installer files\nDatabase Objects\nView Objects\nSummary Information Objects\nRecord Objects\nErrors\nCAB Objects\nDirectory Objects\nFeatures\nGUI classes\nPrecomputed tables\n\n\nnis â Interface to Sunâs NIS (Yellow Pages)\nnntplib â NNTP protocol client\nNNTP Objects\nAttributes\nMethods\n\n\nUtility functions\n\n\noptparse â Parser for command line options\nBackground\nTerminology\nWhat are options for?\nWhat are positional arguments for?\n\n\nTutorial\nUnderstanding option actions\nThe store action\nHandling boolean (flag) options\nOther actions\nDefault values\nGenerating help\nGrouping Options\n\n\nPrinting a version string\nHow optparse handles errors\nPutting it all together\n\n\nReference Guide\nCreating the parser\nPopulating the parser\nDefining options\nOption attributes\nStandard option actions\nStandard option types\nParsing arguments\nQuerying and manipulating your option parser\nConflicts between options\nCleanup\nOther methods\n\n\nOption Callbacks\nDefining a callback option\nHow callbacks are called\nRaising errors in a callback\nCallback example 1: trivial callback\nCallback example 2: check option order\nCallback example 3: check option order (generalized)\nCallback example 4: check arbitrary condition\nCallback example 5: fixed arguments\nCallback example 6: variable arguments\n\n\nExtending optparse\nAdding new types\nAdding new actions\n\n\nExceptions\n\n\nossaudiodev â Access to OSS-compatible audio devices\nAudio Device Objects\nMixer Device Objects\n\n\npipes â Interface to shell pipelines\nTemplate Objects\n\n\nsmtpd â SMTP Server\nSMTPServer Objects\nDebuggingServer Objects\nPureProxy Objects\nSMTPChannel Objects\n\n\nsndhdr â Determine type of sound file\nspwd â The shadow password database\nsunau â Read and write Sun AU files\nAU_read Objects\nAU_write Objects\n\n\ntelnetlib â Telnet client\nTelnet Objects\nTelnet Example\n\n\nuu â Encode and decode uuencode files\nxdrlib â Encode and decode XDR data\nPacker Objects\nUnpacker Objects\nExceptions\n\n\n\n\nSecurity Considerations\n\n\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\n1. Extending Python with C or C++\n1.1. A Simple Example\n1.2. Intermezzo: Errors and Exceptions\n1.3. Back to the Example\n1.4. The Moduleâs Method Table and Initialization Function\n1.5. Compilation and Linkage\n1.6. Calling Python Functions from C\n1.7. Extracting Parameters in Extension Functions\n1.8. Keyword Parameters for Extension Functions\n1.9. Building Arbitrary Values\n1.10. Reference Counts\n1.10.1. Reference Counting in Python\n1.10.2. Ownership Rules\n1.10.3. Thin Ice\n1.10.4. NULL Pointers\n\n\n1.11. Writing Extensions in C++\n1.12. Providing a C API for an Extension Module\n\n\n2. Defining Extension Types: Tutorial\n2.1. The Basics\n2.2. Adding data and methods to the Basic example\n2.3. Providing finer control over data attributes\n2.4. Supporting cyclic garbage collection\n2.5. Subclassing other types\n\n\n3. Defining Extension Types: Assorted Topics\n3.1. Finalization and De-allocation\n3.2. Object Presentation\n3.3. Attribute Management\n3.3.1. Generic Attribute Management\n3.3.2. Type-specific Attribute Management\n\n\n3.4. Object Comparison\n3.5. Abstract Protocol Support\n3.6. Weak Reference Support\n3.7. More Suggestions\n\n\n4. Building C and C++ Extensions\n4.1. Building C and C++ Extensions with distutils\n4.2. Distributing your extension modules\n\n\n5. Building C and C++ Extensions on Windows\n5.1. A Cookbook Approach\n5.2. Differences Between Unix and Windows\n5.3. Using DLLs in Practice\n\n\n\n\nEmbedding the CPython runtime in a larger application\n1. Embedding Python in Another Application\n1.1. Very High Level Embedding\n1.2. Beyond Very High Level Embedding: An overview\n1.3. Pure Embedding\n1.4. Extending Embedded Python\n1.5. Embedding Python in C++\n1.6. Compiling and Linking under Unix-like systems\n\n\n\n\n\n\nPython/C API Reference Manual\nIntroduction\nCoding standards\nInclude Files\nUseful macros\nObjects, Types and Reference Counts\nReference Counts\nReference Count Details\n\n\nTypes\n\n\nExceptions\nEmbedding Python\nDebugging Builds\n\n\nC API Stability\nStable Application Binary Interface\nLimited C API\nStable ABI\nLimited API Scope and Performance\nLimited API Caveats\n\n\nPlatform Considerations\nContents of Limited API\n\n\nThe Very High Level Layer\nReference Counting\nException Handling\nPrinting and clearing\nRaising exceptions\nIssuing warnings\nQuerying the error indicator\nSignal Handling\nException Classes\nException Objects\nUnicode Exception Objects\nRecursion Control\nStandard Exceptions\nStandard Warning Categories\n\n\nUtilities\nOperating System Utilities\nSystem Functions\nProcess Control\nImporting Modules\nData marshalling support\nParsing arguments and building values\nParsing arguments\nStrings and buffers\nNumbers\nOther objects\nAPI Functions\n\n\nBuilding values\n\n\nString conversion and formatting\nPyHash API\nReflection\nCodec registry and support functions\nCodec lookup API\nRegistry API for Unicode encoding error handlers\n\n\n\n\nAbstract Objects Layer\nObject Protocol\nCall Protocol\nThe tp_call Protocol\nThe Vectorcall Protocol\nRecursion Control\nVectorcall Support API\n\n\nObject Calling API\nCall Support API\n\n\nNumber Protocol\nSequence Protocol\nMapping Protocol\nIterator Protocol\nBuffer Protocol\nBuffer structure\nBuffer request types\nrequest-independent fields\nreadonly, format\nshape, strides, suboffsets\ncontiguity requests\ncompound requests\n\n\nComplex arrays\nNumPy-style: shape and strides\nPIL-style: shape, strides and suboffsets\n\n\nBuffer-related functions\n\n\nOld Buffer Protocol\n\n\nConcrete Objects Layer\nFundamental Objects\nType Objects\nCreating Heap-Allocated Types\n\n\nThe None Object\n\n\nNumeric Objects\nInteger Objects\nBoolean Objects\nFloating Point Objects\nPack and Unpack functions\nPack functions\nUnpack functions\n\n\n\n\nComplex Number Objects\nComplex Numbers as C Structures\nComplex Numbers as Python Objects\n\n\n\n\nSequence Objects\nBytes Objects\nByte Array Objects\nType check macros\nDirect API functions\nMacros\n\n\nUnicode Objects and Codecs\nUnicode Objects\nUnicode Type\nUnicode Character Properties\nCreating and accessing Unicode strings\nDeprecated Py_UNICODE APIs\nLocale Encoding\nFile System Encoding\nwchar_t Support\n\n\nBuilt-in Codecs\nGeneric Codecs\nUTF-8 Codecs\nUTF-32 Codecs\nUTF-16 Codecs\nUTF-7 Codecs\nUnicode-Escape Codecs\nRaw-Unicode-Escape Codecs\nLatin-1 Codecs\nASCII Codecs\nCharacter Map Codecs\nMBCS codecs for Windows\nMethods & Slots\n\n\nMethods and Slot Functions\n\n\nTuple Objects\nStruct Sequence Objects\nList Objects\n\n\nContainer Objects\nDictionary Objects\nSet Objects\n\n\nFunction Objects\nFunction Objects\nInstance Method Objects\nMethod Objects\nCell Objects\nCode Objects\n\n\nOther Objects\nFile Objects\nModule Objects\nInitializing C modules\nSingle-phase initialization\nMulti-phase initialization\nLow-level module creation functions\nSupport functions\n\n\nModule lookup\n\n\nIterator Objects\nDescriptor Objects\nSlice Objects\nEllipsis Object\n\n\nMemoryView objects\nWeak Reference Objects\nCapsules\nFrame Objects\nGenerator Objects\nCoroutine Objects\nContext Variables Objects\nDateTime Objects\nObjects for Type Hinting\n\n\n\n\nInitialization, Finalization, and Threads\nBefore Python Initialization\nGlobal configuration variables\nInitializing and finalizing the interpreter\nProcess-wide parameters\nThread State and the Global Interpreter Lock\nReleasing the GIL from extension code\nNon-Python created threads\nCautions about fork()\nHigh-level API\nLow-level API\n\n\nSub-interpreter support\nBugs and caveats\n\n\nAsynchronous Notifications\nProfiling and Tracing\nAdvanced Debugger Support\nThread Local Storage Support\nThread Specific Storage (TSS) API\nDynamic Allocation\nMethods\n\n\nThread Local Storage (TLS) API\n\n\n\n\nPython Initialization Configuration\nExample\nPyWideStringList\nPyStatus\nPyPreConfig\nPreinitialize Python with PyPreConfig\nPyConfig\nInitialization with PyConfig\nIsolated Configuration\nPython Configuration\nPython Path Configuration\nPy_RunMain()\nPy_GetArgcArgv()\nMulti-Phase Initialization Private Provisional API\n\n\nMemory Management\nOverview\nAllocator Domains\nRaw Memory Interface\nMemory Interface\nObject allocators\nDefault Memory Allocators\nCustomize Memory Allocators\nDebug hooks on the Python memory allocators\nThe pymalloc allocator\nCustomize pymalloc Arena Allocator\n\n\ntracemalloc C API\nExamples\n\n\nObject Implementation Support\nAllocating Objects on the Heap\nCommon Object Structures\nBase object types and macros\nImplementing functions and methods\nAccessing attributes of extension types\n\n\nType Objects\nQuick Reference\nâtp slotsâ\nsub-slots\nslot typedefs\n\n\nPyTypeObject Definition\nPyObject Slots\nPyVarObject Slots\nPyTypeObject Slots\nStatic Types\nHeap Types\n\n\nNumber Object Structures\nMapping Object Structures\nSequence Object Structures\nBuffer Object Structures\nAsync Object Structures\nSlot Type typedefs\nExamples\nSupporting Cyclic Garbage Collection\nControlling the Garbage Collector State\n\n\n\n\nAPI and ABI Versioning\n\n\nInstalling Python Modules\nKey terms\nBasic usage\nHow do I â¦?\nâ¦ install pip in versions of Python prior to Python 3.4?\nâ¦ install packages just for the current user?\nâ¦ install scientific Python packages?\nâ¦ work with multiple versions of Python installed in parallel?\n\n\nCommon installation issues\nInstalling into the system Python on Linux\nPip not installed\nInstalling binary extensions\n\n\n\n\nPython HOWTOs\nPorting Extension Modules to Python 3\nCurses Programming with Python\nWhat is curses?\nThe Python curses module\n\n\nStarting and ending a curses application\nWindows and Pads\nDisplaying Text\nAttributes and Color\n\n\nUser Input\nFor More Information\n\n\nDescriptor HowTo Guide\nPrimer\nSimple example: A descriptor that returns a constant\nDynamic lookups\nManaged attributes\nCustomized names\nClosing thoughts\n\n\nComplete Practical Example\nValidator class\nCustom validators\nPractical application\n\n\nTechnical Tutorial\nAbstract\nDefinition and introduction\nDescriptor protocol\nOverview of descriptor invocation\nInvocation from an instance\nInvocation from a class\nInvocation from super\nSummary of invocation logic\nAutomatic name notification\nORM example\n\n\nPure Python Equivalents\nProperties\nFunctions and methods\nKinds of methods\nStatic methods\nClass methods\nMember objects and __slots__\n\n\n\n\nDebugging C API extensions and CPython Internals with GDB\nPrerequisites\nSetup with Python built from source\nSetup for Python from a Linux distro\n\n\nUsing the Debug build and Development mode\nUsing the python-gdb extension\nPretty-printers\npy-list\npy-up and py-down\npy-bt\npy-print\npy-locals\n\n\nUse with GDB commands\n\n\nEnum HOWTO\nProgrammatic access to enumeration members and their attributes\nDuplicating enum members and values\nEnsuring unique enumeration values\nUsing automatic values\nIteration\nComparisons\nAllowed members and attributes of enumerations\nRestricted Enum subclassing\nPickling\nFunctional API\nDerived Enumerations\nIntEnum\nStrEnum\nIntFlag\nFlag\nOthers\n\n\nWhen to use __new__() vs. __init__()\nFiner Points\nSupported __dunder__ names\nSupported _sunder_ names\n_Private__names\nEnum member type\nCreating members that are mixed with other data types\nBoolean value of Enum classes and members\nEnum classes with methods\nCombining members of Flag\nFlag and IntFlag minutia\n\n\n\n\nHow are Enums and Flags different?\nEnum Classes\nFlag Classes\nEnum Members (aka instances)\nFlag Members\n\n\nEnum Cookbook\nOmitting values\nUsing auto\nUsing object\nUsing a descriptive string\nUsing a custom __new__()\n\n\nOrderedEnum\nDuplicateFreeEnum\nPlanet\nTimePeriod\n\n\nSubclassing EnumType\n\n\nFunctional Programming HOWTO\nIntroduction\nFormal provability\nModularity\nEase of debugging and testing\nComposability\n\n\nIterators\nData Types That Support Iterators\n\n\nGenerator expressions and list comprehensions\nGenerators\nPassing values into a generator\n\n\nBuilt-in functions\nThe itertools module\nCreating new iterators\nCalling functions on elements\nSelecting elements\nCombinatoric functions\nGrouping elements\n\n\nThe functools module\nThe operator module\n\n\nSmall functions and the lambda expression\nRevision History and Acknowledgements\nReferences\nGeneral\nPython-specific\nPython documentation\n\n\n\n\nLogging HOWTO\nBasic Logging Tutorial\nWhen to use logging\nA simple example\nLogging to a file\nLogging variable data\nChanging the format of displayed messages\nDisplaying the date/time in messages\nNext Steps\n\n\nAdvanced Logging Tutorial\nLogging Flow\nLoggers\nHandlers\nFormatters\nConfiguring Logging\nWhat happens if no configuration is provided\nConfiguring Logging for a Library\n\n\nLogging Levels\nCustom Levels\n\n\nUseful Handlers\nExceptions raised during logging\nUsing arbitrary objects as messages\nOptimization\n\n\nLogging Cookbook\nUsing logging in multiple modules\nLogging from multiple threads\nMultiple handlers and formatters\nLogging to multiple destinations\nCustom handling of levels\nConfiguration server example\nDealing with handlers that block\nSending and receiving logging events across a network\nRunning a logging socket listener in production\n\n\nAdding contextual information to your logging output\nUsing LoggerAdapters to impart contextual information\nUsing objects other than dicts to pass contextual information\n\n\nUsing Filters to impart contextual information\n\n\nUse of contextvars\nImparting contextual information in handlers\nLogging to a single file from multiple processes\nUsing concurrent.futures.ProcessPoolExecutor\nDeploying Web applications using Gunicorn and uWSGI\n\n\nUsing file rotation\nUse of alternative formatting styles\nCustomizing LogRecord\nSubclassing QueueHandler and QueueListener- a ZeroMQ example\nSubclass QueueHandler\nSubclass QueueListener\n\n\nSubclassing QueueHandler and QueueListener- a pynng example\nSubclass QueueListener\nSubclass QueueHandler\n\n\nAn example dictionary-based configuration\nUsing a rotator and namer to customize log rotation processing\nA more elaborate multiprocessing example\nInserting a BOM into messages sent to a SysLogHandler\nImplementing structured logging\nCustomizing handlers with dictConfig()\nUsing particular formatting styles throughout your application\nUsing LogRecord factories\nUsing custom message objects\n\n\nConfiguring filters with dictConfig()\nCustomized exception formatting\nSpeaking logging messages\nBuffering logging messages and outputting them conditionally\nSending logging messages to email, with buffering\nFormatting times using UTC (GMT) via configuration\nUsing a context manager for selective logging\nA CLI application starter template\nA Qt GUI for logging\nLogging to syslog with RFC5424 support\nHow to treat a logger like an output stream\nPatterns to avoid\nOpening the same log file multiple times\nUsing loggers as attributes in a class or passing them as parameters\nAdding handlers other than NullHandler to a logger in a library\nCreating a lot of loggers\n\n\nOther resources\n\n\nRegular Expression HOWTO\nIntroduction\nSimple Patterns\nMatching Characters\nRepeating Things\n\n\nUsing Regular Expressions\nCompiling Regular Expressions\nThe Backslash Plague\nPerforming Matches\nModule-Level Functions\nCompilation Flags\n\n\nMore Pattern Power\nMore Metacharacters\nGrouping\nNon-capturing and Named Groups\nLookahead Assertions\n\n\nModifying Strings\nSplitting Strings\nSearch and Replace\n\n\nCommon Problems\nUse String Methods\nmatch() versus search()\nGreedy versus Non-Greedy\nUsing re.VERBOSE\n\n\nFeedback\n\n\nSocket Programming HOWTO\nSockets\nHistory\n\n\nCreating a Socket\nIPC\n\n\nUsing a Socket\nBinary Data\n\n\nDisconnecting\nWhen Sockets Die\n\n\nNon-blocking Sockets\n\n\nSorting HOW TO\nSorting Basics\nKey Functions\nOperator Module Functions\nAscending and Descending\nSort Stability and Complex Sorts\nDecorate-Sort-Undecorate\nComparison Functions\nOdds and Ends\n\n\nUnicode HOWTO\nIntroduction to Unicode\nDefinitions\nEncodings\nReferences\n\n\nPythonâs Unicode Support\nThe String Type\nConverting to Bytes\nUnicode Literals in Python Source Code\nUnicode Properties\nComparing Strings\nUnicode Regular Expressions\nReferences\n\n\nReading and Writing Unicode Data\nUnicode filenames\nTips for Writing Unicode-aware Programs\nConverting Between File Encodings\nFiles in an Unknown Encoding\n\n\nReferences\n\n\nAcknowledgements\n\n\nHOWTO Fetch Internet Resources Using The urllib Package\nIntroduction\nFetching URLs\nData\nHeaders\n\n\nHandling Exceptions\nURLError\nHTTPError\nError Codes\n\n\nWrapping it Up\nNumber 1\nNumber 2\n\n\n\n\ninfo and geturl\nOpeners and Handlers\nBasic Authentication\nProxies\nSockets and Layers\nFootnotes\n\n\nArgparse Tutorial\nConcepts\nThe basics\nIntroducing Positional arguments\nIntroducing Optional arguments\nShort options\n\n\nCombining Positional and Optional arguments\nGetting a little more advanced\nConflicting options\n\n\nHow to translate the argparse output\nConclusion\n\n\nAn introduction to the ipaddress module\nCreating Address/Network/Interface objects\nA Note on IP Versions\nIP Host Addresses\nDefining Networks\nHost Interfaces\n\n\nInspecting Address/Network/Interface Objects\nNetworks as lists of Addresses\nComparisons\nUsing IP Addresses with other modules\nGetting more detail when instance creation fails\n\n\nInstrumenting CPython with DTrace and SystemTap\nEnabling the static markers\nStatic DTrace probes\nStatic SystemTap markers\nAvailable static markers\nSystemTap Tapsets\nExamples\n\n\nAnnotations Best Practices\nAccessing The Annotations Dict Of An Object In Python 3.10 And Newer\nAccessing The Annotations Dict Of An Object In Python 3.9 And Older\nManually Un-Stringizing Stringized Annotations\nBest Practices For __annotations__ In Any Python Version\n__annotations__ Quirks\n\n\nIsolating Extension Modules\nWho should read this\nBackground\nEnter Per-Module State\nIsolated Module Objects\nSurprising Edge Cases\n\n\nMaking Modules Safe with Multiple Interpreters\nManaging Global State\nManaging Per-Module State\nOpt-Out: Limiting to One Module Object per Process\nModule State Access from Functions\n\n\nHeap Types\nChanging Static Types to Heap Types\nDefining Heap Types\nGarbage-Collection Protocol\ntp_traverse in Python 3.8 and lower\nDelegating tp_traverse\nDefining tp_dealloc\nNot overriding tp_free\nAvoiding PyObject_New\n\n\nModule State Access from Classes\nModule State Access from Regular Methods\nModule State Access from Slot Methods, Getters and Setters\nLifetime of the Module State\n\n\nOpen Issues\nPer-Class Scope\nLossless Conversion to Heap Types\n\n\n\n\n\n\nPython Frequently Asked Questions\nGeneral Python FAQ\nGeneral Information\nPython in the real world\n\n\nProgramming FAQ\nGeneral Questions\nCore Language\nNumbers and strings\nPerformance\nSequences (Tuples/Lists)\nObjects\nModules\n\n\nDesign and History FAQ\nWhy does Python use indentation for grouping of statements?\nWhy am I getting strange results with simple arithmetic operations?\nWhy are floating-point calculations so inaccurate?\nWhy are Python strings immutable?\nWhy must âselfâ be used explicitly in method definitions and calls?\nWhy canât I use an assignment in an expression?\nWhy does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?\nWhy is join() a string method instead of a list or tuple method?\nHow fast are exceptions?\nWhy isnât there a switch or case statement in Python?\nCanât you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?\nWhy canât lambda expressions contain statements?\nCan Python be compiled to machine code, C or some other language?\nHow does Python manage memory?\nWhy doesnât CPython use a more traditional garbage collection scheme?\nWhy isnât all memory freed when CPython exits?\nWhy are there separate tuple and list data types?\nHow are lists implemented in CPython?\nHow are dictionaries implemented in CPython?\nWhy must dictionary keys be immutable?\nWhy doesnât list.sort() return the sorted list?\nHow do you specify and enforce an interface spec in Python?\nWhy is there no goto?\nWhy canât raw strings (r-strings) end with a backslash?\nWhy doesnât Python have a âwithâ statement for attribute assignments?\nWhy donât generators support the with statement?\nWhy are colons required for the if/while/def/class statements?\nWhy does Python allow commas at the end of lists and tuples?\n\n\nLibrary and Extension FAQ\nGeneral Library Questions\nCommon tasks\nThreads\nInput and Output\nNetwork/Internet Programming\nDatabases\nMathematics and Numerics\n\n\nExtending/Embedding FAQ\nCan I create my own functions in C?\nCan I create my own functions in C++?\nWriting C is hard; are there any alternatives?\nHow can I execute arbitrary Python statements from C?\nHow can I evaluate an arbitrary Python expression from C?\nHow do I extract C values from a Python object?\nHow do I use Py_BuildValue() to create a tuple of arbitrary length?\nHow do I call an objectâs method from C?\nHow do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)?\nHow do I access a module written in Python from C?\nHow do I interface to C++ objects from Python?\nI added a module using the Setup file and the make fails; why?\nHow do I debug an extension?\nI want to compile a Python module on my Linux system, but some files are missing. Why?\nHow do I tell âincomplete inputâ from âinvalid inputâ?\nHow do I find undefined g++ symbols __builtin_new or __pure_virtual?\nCan I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?\n\n\nPython on Windows FAQ\nHow do I run a Python program under Windows?\nHow do I make Python scripts executable?\nWhy does Python sometimes take so long to start?\nHow do I make an executable from a Python script?\nIs a *.pyd file the same as a DLL?\nHow can I embed Python into a Windows application?\nHow do I keep editors from inserting tabs into my Python source?\nHow do I check for a keypress without blocking?\nHow do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error?\n\n\nGraphic User Interface FAQ\nGeneral GUI Questions\nWhat GUI toolkits exist for Python?\nTkinter questions\n\n\nâWhy is Python Installed on my Computer?â FAQ\nWhat is Python?\nWhy is Python installed on my machine?\nCan I delete Python?\n\n\n\n\nGlossary\nAbout these documents\nContributors to the Python Documentation\n\n\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\n\n\nCopyright\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPSF LICENSE AGREEMENT FOR PYTHON 3.11.8\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.11.8 DOCUMENTATION\n\n\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nAudioop\nasyncio\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNext topic\nWhatâs New in Python\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Documentation contents\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/using/index.html,Python Setup and Usage — Python 3.11.8 documentation,"This part of the documentation is devoted to general information on the setup of the Python environment on different platforms, the invocation of the interpreter and things that make working with P...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\n16. Appendix\n\n\nNext topic\n1. Command line and environment\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Setup and Usage\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nPython Setup and UsageÂ¶\nThis part of the documentation is devoted to general information on the setup\nof the Python environment on different platforms, the invocation of the\ninterpreter and things that make working with Python easier.\n\n\n1. Command line and environment\n1.1. Command line\n1.1.1. Interface options\n1.1.2. Generic options\n1.1.3. Miscellaneous options\n1.1.4. Options you shouldnât use\n\n\n1.2. Environment variables\n1.2.1. Debug-mode variables\n\n\n\n\n2. Using Python on Unix platforms\n2.1. Getting and installing the latest version of Python\n2.1.1. On Linux\n2.1.2. On FreeBSD and OpenBSD\n2.1.3. On OpenSolaris\n\n\n2.2. Building Python\n2.3. Python-related paths and files\n2.4. Miscellaneous\n2.5. Custom OpenSSL\n\n\n3. Configure Python\n3.1. Configure Options\n3.1.1. General Options\n3.1.2. WebAssembly Options\n3.1.3. Install Options\n3.1.4. Performance options\n3.1.5. Python Debug Build\n3.1.6. Debug options\n3.1.7. Linker options\n3.1.8. Libraries options\n3.1.9. Security Options\n3.1.10. macOS Options\n3.1.11. Cross Compiling Options\n\n\n3.2. Python Build System\n3.2.1. Main files of the build system\n3.2.2. Main build steps\n3.2.3. Main Makefile targets\n3.2.4. C extensions\n\n\n3.3. Compiler and linker flags\n3.3.1. Preprocessor flags\n3.3.2. Compiler flags\n3.3.3. Linker flags\n\n\n\n\n4. Using Python on Windows\n4.1. The full installer\n4.1.1. Installation steps\n4.1.2. Removing the MAX_PATH Limitation\n4.1.3. Installing Without UI\n4.1.4. Installing Without Downloading\n4.1.5. Modifying an install\n\n\n4.2. The Microsoft Store package\n4.2.1. Known issues\n4.2.1.1. Redirection of local data, registry, and temporary paths\n\n\n\n\n4.3. The nuget.org packages\n4.4. The embeddable package\n4.4.1. Python Application\n4.4.2. Embedding Python\n\n\n4.5. Alternative bundles\n4.6. Configuring Python\n4.6.1. Excursus: Setting environment variables\n4.6.2. Finding the Python executable\n\n\n4.7. UTF-8 mode\n4.8. Python Launcher for Windows\n4.8.1. Getting started\n4.8.1.1. From the command-line\n4.8.1.2. Virtual environments\n4.8.1.3. From a script\n4.8.1.4. From file associations\n\n\n4.8.2. Shebang Lines\n4.8.3. Arguments in shebang lines\n4.8.4. Customization\n4.8.4.1. Customization via INI files\n4.8.4.2. Customizing default Python versions\n\n\n4.8.5. Diagnostics\n4.8.6. Dry Run\n4.8.7. Install on demand\n4.8.8. Return codes\n\n\n4.9. Finding modules\n4.10. Additional modules\n4.10.1. PyWin32\n4.10.2. cx_Freeze\n\n\n4.11. Compiling Python on Windows\n4.12. Other Platforms\n\n\n5. Using Python on a Mac\n5.1. Getting and Installing Python\n5.1.1. How to run a Python script\n5.1.2. Running scripts with a GUI\n5.1.3. Configuration\n\n\n5.2. The IDE\n5.3. Installing Additional Python Packages\n5.4. GUI Programming\n5.5. Distributing Python Applications\n5.6. Other Resources\n\n\n6. Editors and IDEs\n\n\n\n\n\n\n\n\n\n\nPrevious topic\n16. Appendix\n\n\nNext topic\n1. Command line and environment\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Setup and Usage\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/_static/pydoctheme.css,,,None,,
https://docs.python.org/3.11/about.html,About these documents — Python 3.11.8 documentation,"These documents are generated from reStructuredText sources by Sphinx, a document processor specifically written for the Python documentation. Development of the documentation and its toolchain is ...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nAbout these documents\nContributors to the Python Documentation\n\n\n\n\n\nPrevious topic\nGlossary\n\n\nNext topic\nDealing with Bugs\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nAbout these documents\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nAbout these documentsÂ¶\nThese documents are generated from reStructuredText sources by Sphinx, a\ndocument processor specifically written for the Python documentation.\nDevelopment of the documentation and its toolchain is an entirely volunteer\neffort, just like Python itself.  If you want to contribute, please take a\nlook at the Dealing with Bugs page for information on how to do so.  New\nvolunteers are always welcome!\nMany thanks go to:\n\nFred L. Drake, Jr., the creator of the original Python documentation toolset\nand writer of much of the content;\nthe Docutils project for creating\nreStructuredText and the Docutils suite;\nFredrik Lundh for his Alternative Python Reference project from which Sphinx\ngot many good ideas.\n\n\nContributors to the Python DocumentationÂ¶\nMany people have contributed to the Python language, the Python standard\nlibrary, and the Python documentation.  See Misc/ACKS in the Python\nsource distribution for a partial list of contributors.\nIt is only with the input and contributions of the Python community\nthat Python has such wonderful documentation â Thank You!\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nAbout these documents\nContributors to the Python Documentation\n\n\n\n\n\nPrevious topic\nGlossary\n\n\nNext topic\nDealing with Bugs\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nAbout these documents\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/distributing/index.html,Distributing Python Modules — Python 3.11.8 documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDistributing Python Modules\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nDistributing Python ModulesÂ¶\n\nNote\nInformation and guidance on distributing Python modules and packages\nhas been moved to the Python Packaging User Guide,\nand the tutorial on packaging Python projects.\n\n\n\n\n\n\n\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDistributing Python Modules\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/py-modindex.html,Python Module Index — Python 3.11.8 documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Module Index\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\nPython Module Index\n\n_ | \n   a | \n   b | \n   c | \n   d | \n   e | \n   f | \n   g | \n   h | \n   i | \n   j | \n   k | \n   l | \n   m | \n   n | \n   o | \n   p | \n   q | \n   r | \n   s | \n   t | \n   u | \n   v | \n   w | \n   x | \n   z\n\n\n \n\n_\n\n\n\n__future__\nFuture statement definitions\n\n\n\n__main__\nThe environment where top-level code is run. Covers command-line\ninterfaces, import-time behavior, and ``__name__ == '__main__'``.\n\n\n\n_thread\nLow-level threading API.\n\n\n\n_tkinter\nA binary module that contains the low-level interface to Tcl/Tk.\n \n\na\n\n\n\nabc\nAbstract base classes according to :pep:`3119`.\n\n\n\naifcDeprecated:\nRead and write audio files in AIFF or AIFC format.\n\n\n\nargparse\nCommand-line option and argument parsing library.\n\n\n\narray\nSpace efficient arrays of uniformly typed numeric values.\n\n\n\nast\nAbstract Syntax Tree classes and manipulation.\n\n\n\nasynchatDeprecated:\nSupport for asynchronous command/response protocols.\n\n\n\nasyncio\nAsynchronous I/O.\n\n\n\nasyncoreDeprecated:\nA base class for developing asynchronous socket handling\nservices.\n\n\n\natexit\nRegister and execute cleanup functions.\n\n\n\naudioopDeprecated:\nManipulate raw audio data.\n \n\nb\n\n\n\nbase64\nRFC 4648: Base16, Base32, Base64 Data Encodings;\nBase85 and Ascii85\n\n\n\nbdb\nDebugger framework.\n\n\n\nbinascii\nTools for converting between binary and various ASCII-encoded binary\nrepresentations.\n\n\n\nbisect\nArray bisection algorithms for binary searching.\n\n\n\nbuiltins\nThe module that provides the built-in namespace.\n\n\n\nbz2\nInterfaces for bzip2 compression and decompression.\n \n\nc\n\n\n\ncalendar\nFunctions for working with calendars, including some emulation\nof the Unix cal program.\n\n\n\ncgiDeprecated:\nHelpers for running Python scripts via the Common Gateway Interface.\n\n\n\ncgitbDeprecated:\nConfigurable traceback handler for CGI scripts.\n\n\n\nchunkDeprecated:\nModule to read IFF chunks.\n\n\n\ncmath\nMathematical functions for complex numbers.\n\n\n\ncmd\nBuild line-oriented command interpreters.\n\n\n\ncode\nFacilities to implement read-eval-print loops.\n\n\n\ncodecs\nEncode and decode data and streams.\n\n\n\ncodeop\nCompile (possibly incomplete) Python code.\n\n\n\ncollections\nContainer datatypes\n\n\n   \n       collections.abc\nAbstract base classes for containers\n\n\n\ncolorsys\nConversion functions between RGB and other color systems.\n\n\n\ncompileall\nTools for byte-compiling all Python source files in a directory tree.\n\n\n\nconcurrent\n\n\n\n   \n       concurrent.futures\nExecute computations concurrently using threads or processes.\n\n\n\nconfigparser\nConfiguration file parser.\n\n\n\ncontextlib\nUtilities for with-statement contexts.\n\n\n\ncontextvars\nContext Variables\n\n\n\ncopy\nShallow and deep copy operations.\n\n\n\ncopyreg\nRegister pickle support functions.\n\n\n\ncProfile\n\n\n\n\ncrypt (Unix)Deprecated:\nThe crypt() function used to check Unix passwords.\n\n\n\ncsv\nWrite and read tabular data to and from delimited files.\n\n\n\nctypes\nA foreign function library for Python.\n\n\n\ncurses (Unix)\nAn interface to the curses library, providing portable\nterminal handling.\n\n\n   \n       curses.ascii\nConstants and set-membership functions for ASCII characters.\n\n\n   \n       curses.panel\nA panel stack extension that adds depth to  curses windows.\n\n\n   \n       curses.textpad\nEmacs-like input editing in a curses window.\n \n\nd\n\n\n\ndataclasses\nGenerate special methods on user-defined classes.\n\n\n\ndatetime\nBasic date and time types.\n\n\n\ndbm\nInterfaces to various Unix ""database"" formats.\n\n\n   \n       dbm.dumb\nPortable implementation of the simple DBM interface.\n\n\n   \n       dbm.gnu (Unix)\nGNU database manager\n\n\n   \n       dbm.ndbm (Unix)\nThe New Database Manager\n\n\n\ndecimal\nImplementation of the General Decimal Arithmetic  Specification.\n\n\n\ndifflib\nHelpers for computing differences between objects.\n\n\n\ndis\nDisassembler for Python bytecode.\n\n\n\ndistutils\nSupport for building and installing Python modules into an\nexisting Python installation.\n\n\n   \n       distutils.archive_util\nUtility functions for creating archive files (tarballs, zip files, ...)\n\n\n   \n       distutils.bcppcompiler\n\n\n\n   \n       distutils.ccompiler\nAbstract CCompiler class\n\n\n   \n       distutils.cmd\nProvides the abstract base class :class:`~distutils.cmd.Command`. This class\nis subclassed by the modules in the distutils.command subpackage.\n\n\n   \n       distutils.command\nContains one module for each standard Distutils command.\n\n\n   \n       distutils.command.bdist\nBuild a binary installer for a package\n\n\n   \n       distutils.command.bdist_dumb\nBuild a ""dumb"" installer - a simple archive of files\n\n\n   \n       distutils.command.bdist_packager\nAbstract base class for packagers\n\n\n   \n       distutils.command.bdist_rpm\nBuild a binary distribution as a Redhat RPM and SRPM\n\n\n   \n       distutils.command.build\nBuild all files of a package\n\n\n   \n       distutils.command.build_clib\nBuild any C libraries in a package\n\n\n   \n       distutils.command.build_ext\nBuild any extensions in a package\n\n\n   \n       distutils.command.build_py\nBuild the .py/.pyc files of a package\n\n\n   \n       distutils.command.build_scripts\nBuild the scripts of a package\n\n\n   \n       distutils.command.check\nCheck the meta-data of a package\n\n\n   \n       distutils.command.clean\nClean a package build area\n\n\n   \n       distutils.command.config\nPerform package configuration\n\n\n   \n       distutils.command.install\nInstall a package\n\n\n   \n       distutils.command.install_data\nInstall data files from a package\n\n\n   \n       distutils.command.install_headers\nInstall C/C++ header files from a package\n\n\n   \n       distutils.command.install_lib\nInstall library files from a package\n\n\n   \n       distutils.command.install_scripts\nInstall script files from a package\n\n\n   \n       distutils.command.register\nRegister a module with the Python Package Index\n\n\n   \n       distutils.command.sdist\nBuild a source distribution\n\n\n   \n       distutils.core\nThe core Distutils functionality\n\n\n   \n       distutils.cygwinccompiler\n\n\n\n   \n       distutils.debug\nProvides the debug flag for distutils\n\n\n   \n       distutils.dep_util\nUtility functions for simple dependency checking\n\n\n   \n       distutils.dir_util\nUtility functions for operating on directories and directory trees\n\n\n   \n       distutils.dist\nProvides the Distribution class, which represents the module distribution being\nbuilt/installed/distributed\n\n\n   \n       distutils.errors\nProvides standard distutils exceptions\n\n\n   \n       distutils.extension\nProvides the Extension class, used to describe C/C++ extension modules in setup\nscripts\n\n\n   \n       distutils.fancy_getopt\nAdditional getopt functionality\n\n\n   \n       distutils.file_util\nUtility functions for operating on single files\n\n\n   \n       distutils.filelist\nThe FileList class, used for poking about the file system and\nbuilding lists of files.\n\n\n   \n       distutils.log\nA simple logging mechanism, :pep:`282`-style\n\n\n   \n       distutils.msvccompiler\nMicrosoft Compiler\n\n\n   \n       distutils.spawn\nProvides the spawn() function\n\n\n   \n       distutils.sysconfig\nLow-level access to configuration information of the Python interpreter.\n\n\n   \n       distutils.text_file\nProvides the TextFile class, a simple interface to text files\n\n\n   \n       distutils.unixccompiler\nUNIX C Compiler\n\n\n   \n       distutils.util\nMiscellaneous other utility functions\n\n\n   \n       distutils.version\nImplements classes that represent module version numbers.\n\n\n\ndoctest\nTest pieces of code within docstrings.\n \n\ne\n\n\n\nemail\nPackage supporting the parsing, manipulating, and generating\nemail messages.\n\n\n   \n       email.charset\nCharacter Sets\n\n\n   \n       email.contentmanager\nStoring and Retrieving Content from MIME Parts\n\n\n   \n       email.encoders\nEncoders for email message payloads.\n\n\n   \n       email.errors\nThe exception classes used by the email package.\n\n\n   \n       email.generator\nGenerate flat text email messages from a message structure.\n\n\n   \n       email.header\nRepresenting non-ASCII headers\n\n\n   \n       email.headerregistry\nAutomatic Parsing of headers based on the field name\n\n\n   \n       email.iterators\nIterate over a  message object tree.\n\n\n   \n       email.message\nThe base class representing email messages.\n\n\n   \n       email.mime\nBuild MIME messages.\n\n\n   \n       email.mime.application\n\n\n\n   \n       email.mime.audio\n\n\n\n   \n       email.mime.base\n\n\n\n   \n       email.mime.image\n\n\n\n   \n       email.mime.message\n\n\n\n   \n       email.mime.multipart\n\n\n\n   \n       email.mime.nonmultipart\n\n\n\n   \n       email.mime.text\n\n\n\n   \n       email.parser\nParse flat text email messages to produce a message object structure.\n\n\n   \n       email.policy\nControlling the parsing and generating of messages\n\n\n   \n       email.utils\nMiscellaneous email package utilities.\n\n\n\nencodings\n\n\n\n   \n       encodings.idna\nInternationalized Domain Names implementation\n\n\n   \n       encodings.mbcs\nWindows ANSI codepage\n\n\n   \n       encodings.utf_8_sig\nUTF-8 codec with BOM signature\n\n\n\nensurepip\nBootstrapping the ""pip"" installer into an existing Python\ninstallation or virtual environment.\n\n\n\nenum\nImplementation of an enumeration class.\n\n\n\nerrno\nStandard errno system symbols.\n \n\nf\n\n\n\nfaulthandler\nDump the Python traceback.\n\n\n\nfcntl (Unix)\nThe fcntl() and ioctl() system calls.\n\n\n\nfilecmp\nCompare files efficiently.\n\n\n\nfileinput\nLoop over standard input or a list of files.\n\n\n\nfnmatch\nUnix shell style filename pattern matching.\n\n\n\nfractions\nRational numbers.\n\n\n\nftplib\nFTP protocol client (requires sockets).\n\n\n\nfunctools\nHigher-order functions and operations on callable objects.\n \n\ng\n\n\n\ngc\nInterface to the cycle-detecting garbage collector.\n\n\n\ngetopt\nPortable parser for command line options; support both short and\nlong option names.\n\n\n\ngetpass\nPortable reading of passwords and retrieval of the userid.\n\n\n\ngettext\nMultilingual internationalization services.\n\n\n\nglob\nUnix shell style pathname pattern expansion.\n\n\n\ngraphlib\nFunctionality to operate with graph-like structures\n\n\n\ngrp (Unix)\nThe group database (getgrnam() and friends).\n\n\n\ngzip\nInterfaces for gzip compression and decompression using file objects.\n \n\nh\n\n\n\nhashlib\nSecure hash and message digest algorithms.\n\n\n\nheapq\nHeap queue algorithm (a.k.a. priority queue).\n\n\n\nhmac\nKeyed-Hashing for Message Authentication (HMAC) implementation\n\n\n\nhtml\nHelpers for manipulating HTML.\n\n\n   \n       html.entities\nDefinitions of HTML general entities.\n\n\n   \n       html.parser\nA simple parser that can handle HTML and XHTML.\n\n\n\nhttp\nHTTP status codes and messages\n\n\n   \n       http.client\nHTTP and HTTPS protocol client (requires sockets).\n\n\n   \n       http.cookiejar\nClasses for automatic handling of HTTP cookies.\n\n\n   \n       http.cookies\nSupport for HTTP state management (cookies).\n\n\n   \n       http.server\nHTTP server and request handlers.\n \n\ni\n\n\n\nidlelib\nImplementation package for the IDLE shell/editor.\n\n\n\nimaplib\nIMAP4 protocol client (requires sockets).\n\n\n\nimghdrDeprecated:\nDetermine the type of image contained in a file or byte stream.\n\n\n\nimpDeprecated:\nAccess the implementation of the import statement.\n\n\n\nimportlib\nThe implementation of the import machinery.\n\n\n   \n       importlib.abc\nAbstract base classes related to import\n\n\n   \n       importlib.machinery\nImporters and path hooks\n\n\n   \n       importlib.metadata\nAccessing package metadata\n\n\n   \n       importlib.resources\nPackage resource reading, opening, and access\n\n\n   \n       importlib.resources.abc\nAbstract base classes for resources\n\n\n   \n       importlib.util\nUtility code for importers\n\n\n\ninspect\nExtract information and source code from live objects.\n\n\n\nio\nCore tools for working with streams.\n\n\n\nipaddress\nIPv4/IPv6 manipulation library.\n\n\n\nitertools\nFunctions creating iterators for efficient looping.\n \n\nj\n\n\n\njson\nEncode and decode the JSON format.\n\n\n   \n       json.tool\nA command line to validate and pretty-print JSON.\n \n\nk\n\n\n\nkeyword\nTest whether a string is a keyword in Python.\n \n\nl\n\n\n\nlib2to3\nThe 2to3 library\n\n\n\nlinecache\nProvides random access to individual lines from text files.\n\n\n\nlocale\nInternationalization services.\n\n\n\nlogging\nFlexible event logging system for applications.\n\n\n   \n       logging.config\nConfiguration of the logging module.\n\n\n   \n       logging.handlers\nHandlers for the logging module.\n\n\n\nlzma\nA Python wrapper for the liblzma compression library.\n \n\nm\n\n\n\nmailbox\nManipulate mailboxes in various formats\n\n\n\nmailcapDeprecated:\nMailcap file handling.\n\n\n\nmarshal\nConvert Python objects to streams of bytes and back (with different\nconstraints).\n\n\n\nmath\nMathematical functions (sin() etc.).\n\n\n\nmimetypes\nMapping of filename extensions to MIME types.\n\n\n\nmmap\nInterface to memory-mapped files for Unix and Windows.\n\n\n\nmodulefinder\nFind modules used by a script.\n\n\n\nmsilib (Windows)Deprecated:\nCreation of Microsoft Installer files, and CAB files.\n\n\n\nmsvcrt (Windows)\nMiscellaneous useful routines from the MS VC++ runtime.\n\n\n\nmultiprocessing\nProcess-based parallelism.\n\n\n   \n       multiprocessing.connection\nAPI for dealing with sockets.\n\n\n   \n       multiprocessing.dummy\nDumb wrapper around threading.\n\n\n   \n       multiprocessing.managers\nShare data between process with shared objects.\n\n\n   \n       multiprocessing.pool\nCreate pools of processes.\n\n\n   \n       multiprocessing.shared_memory\nProvides shared memory for direct access across processes.\n\n\n   \n       multiprocessing.sharedctypes\nAllocate ctypes objects from shared memory.\n \n\nn\n\n\n\nnetrc\nLoading of .netrc files.\n\n\n\nnis (Unix)Deprecated:\nInterface to Sun's NIS (Yellow Pages) library.\n\n\n\nnntplibDeprecated:\nNNTP protocol client (requires sockets).\n\n\n\nnumbers\nNumeric abstract base classes (Complex, Real, Integral, etc.).\n \n\no\n\n\n\noperator\nFunctions corresponding to the standard operators.\n\n\n\noptparseDeprecated:\nCommand-line option parsing library.\n\n\n\nos\nMiscellaneous operating system interfaces.\n\n\n   \n       os.path\nOperations on pathnames.\n\n\n\nossaudiodev (Linux, FreeBSD)Deprecated:\nAccess to OSS-compatible audio devices.\n \n\np\n\n\n\npathlib\nObject-oriented filesystem paths\n\n\n\npdb\nThe Python debugger for interactive interpreters.\n\n\n\npickle\nConvert Python objects to streams of bytes and back.\n\n\n\npickletools\nContains extensive comments about the pickle protocols and\npickle-machine opcodes, as well as some useful functions.\n\n\n\npipes (Unix)Deprecated:\nA Python interface to Unix shell pipelines.\n\n\n\npkgutil\nUtilities for the import system.\n\n\n\nplatform\nRetrieves as much platform identifying data as possible.\n\n\n\nplistlib\nGenerate and parse Apple plist files.\n\n\n\npoplib\nPOP3 protocol client (requires sockets).\n\n\n\nposix (Unix)\nThe most common POSIX system calls (normally used via module os).\n\n\n\npprint\nData pretty printer.\n\n\n\nprofile\nPython source profiler.\n\n\n\npstats\nStatistics object for use with the profiler.\n\n\n\npty (Unix)\nPseudo-Terminal Handling for Unix.\n\n\n\npwd (Unix)\nThe password database (getpwnam() and friends).\n\n\n\npy_compile\nGenerate byte-code files from Python source files.\n\n\n\npyclbr\nSupports information extraction for a Python module browser.\n\n\n\npydoc\nDocumentation generator and online help system.\n \n\nq\n\n\n\nqueue\nA synchronized queue class.\n\n\n\nquopri\nEncode and decode files using the MIME quoted-printable encoding.\n \n\nr\n\n\n\nrandom\nGenerate pseudo-random numbers with various common distributions.\n\n\n\nre\nRegular expression operations.\n\n\n\nreadline (Unix)\nGNU readline support for Python.\n\n\n\nreprlib\nAlternate repr() implementation with size limits.\n\n\n\nresource (Unix)\nAn interface to provide resource usage information on the current process.\n\n\n\nrlcompleter\nPython identifier completion, suitable for the GNU readline library.\n\n\n\nrunpy\nLocate and run Python modules without importing them first.\n \n\ns\n\n\n\nsched\nGeneral purpose event scheduler.\n\n\n\nsecrets\nGenerate secure random numbers for managing secrets.\n\n\n\nselect\nWait for I/O completion on multiple streams.\n\n\n\nselectors\nHigh-level I/O multiplexing.\n\n\n\nshelve\nPython object persistence.\n\n\n\nshlex\nSimple lexical analysis for Unix shell-like languages.\n\n\n\nshutil\nHigh-level file operations, including copying.\n\n\n\nsignal\nSet handlers for asynchronous events.\n\n\n\nsite\nModule responsible for site-specific configuration.\n\n\n\nsitecustomize\n\n\n\n\nsmtpdDeprecated:\nA SMTP server implementation in Python.\n\n\n\nsmtplib\nSMTP protocol client (requires sockets).\n\n\n\nsndhdrDeprecated:\nDetermine type of a sound file.\n\n\n\nsocket\nLow-level networking interface.\n\n\n\nsocketserver\nA framework for network servers.\n\n\n\nspwd (Unix)Deprecated:\nThe shadow password database (getspnam() and friends).\n\n\n\nsqlite3\nA DB-API 2.0 implementation using SQLite 3.x.\n\n\n\nssl\nTLS/SSL wrapper for socket objects\n\n\n\nstat\nUtilities for interpreting the results of os.stat(),\nos.lstat() and os.fstat().\n\n\n\nstatistics\nMathematical statistics functions\n\n\n\nstring\nCommon string operations.\n\n\n\nstringprep\nString preparation, as per RFC 3453\n\n\n\nstruct\nInterpret bytes as packed binary data.\n\n\n\nsubprocess\nSubprocess management.\n\n\n\nsunauDeprecated:\nProvide an interface to the Sun AU sound format.\n\n\n\nsymtable\nInterface to the compiler's internal symbol tables.\n\n\n\nsys\nAccess system-specific parameters and functions.\n\n\n\nsysconfig\nPython's configuration information\n\n\n\nsyslog (Unix)\nAn interface to the Unix syslog library routines.\n \n\nt\n\n\n\ntabnanny\nTool for detecting white space related problems in Python\nsource files in a directory tree.\n\n\n\ntarfile\nRead and write tar-format archive files.\n\n\n\ntelnetlibDeprecated:\nTelnet client class.\n\n\n\ntempfile\nGenerate temporary files and directories.\n\n\n\ntermios (Unix)\nPOSIX style tty control.\n\n\n\ntest\nRegression tests package containing the testing suite for Python.\n\n\n   \n       test.regrtest\nDrives the regression test suite.\n\n\n   \n       test.support\nSupport for Python's regression test suite.\n\n\n   \n       test.support.bytecode_helper\nSupport tools for testing correct bytecode generation.\n\n\n   \n       test.support.import_helper\nSupport for import tests.\n\n\n   \n       test.support.os_helper\nSupport for os tests.\n\n\n   \n       test.support.script_helper\nSupport for Python's script execution tests.\n\n\n   \n       test.support.socket_helper\nSupport for socket tests.\n\n\n   \n       test.support.threading_helper\nSupport for threading tests.\n\n\n   \n       test.support.warnings_helper\nSupport for warnings tests.\n\n\n\ntextwrap\nText wrapping and filling\n\n\n\nthreading\nThread-based parallelism.\n\n\n\ntime\nTime access and conversions.\n\n\n\ntimeit\nMeasure the execution time of small code snippets.\n\n\n\ntkinter\nInterface to Tcl/Tk for graphical user interfaces\n\n\n   \n       tkinter.colorchooser (Tk)\nColor choosing dialog\n\n\n   \n       tkinter.commondialog (Tk)\nTkinter base class for dialogs\n\n\n   \n       tkinter.dnd (Tk)\nTkinter drag-and-drop interface\n\n\n   \n       tkinter.filedialog (Tk)\nDialog classes for file selection\n\n\n   \n       tkinter.font (Tk)\nTkinter font-wrapping class\n\n\n   \n       tkinter.messagebox (Tk)\nVarious types of alert dialogs\n\n\n   \n       tkinter.scrolledtext (Tk)\nText widget with a vertical scroll bar.\n\n\n   \n       tkinter.simpledialog (Tk)\nSimple dialog windows\n\n\n   \n       tkinter.tix\nTk Extension Widgets for Tkinter\n\n\n   \n       tkinter.ttk\nTk themed widget set\n\n\n\ntoken\nConstants representing terminal nodes of the parse tree.\n\n\n\ntokenize\nLexical scanner for Python source code.\n\n\n\ntomllib\nParse TOML files.\n\n\n\ntrace\nTrace or track Python statement execution.\n\n\n\ntraceback\nPrint or retrieve a stack traceback.\n\n\n\ntracemalloc\nTrace memory allocations.\n\n\n\ntty (Unix)\nUtility functions that perform common terminal control operations.\n\n\n\nturtle\nAn educational framework for simple graphics applications\n\n\n\nturtledemo\nA viewer for example turtle scripts\n\n\n\ntypes\nNames for built-in types.\n\n\n\ntyping\nSupport for type hints (see :pep:`484`).\n \n\nu\n\n\n\nunicodedata\nAccess the Unicode Database.\n\n\n\nunittest\nUnit testing framework for Python.\n\n\n   \n       unittest.mock\nMock object library.\n\n\n\nurllib\n\n\n\n   \n       urllib.error\nException classes raised by urllib.request.\n\n\n   \n       urllib.parse\nParse URLs into or assemble them from components.\n\n\n   \n       urllib.request\nExtensible library for opening URLs.\n\n\n   \n       urllib.response\nResponse classes used by urllib.\n\n\n   \n       urllib.robotparser\nLoad a robots.txt file and answer questions about\nfetchability of other URLs.\n\n\n\nusercustomize\n\n\n\n\nuuDeprecated:\nEncode and decode files in uuencode format.\n\n\n\nuuid\nUUID objects (universally unique identifiers) according to RFC 4122\n \n\nv\n\n\n\nvenv\nCreation of virtual environments.\n \n\nw\n\n\n\nwarnings\nIssue warning messages and control their disposition.\n\n\n\nwave\nProvide an interface to the WAV sound format.\n\n\n\nweakref\nSupport for weak references and weak dictionaries.\n\n\n\nwebbrowser\nEasy-to-use controller for web browsers.\n\n\n\nwinreg (Windows)\nRoutines and objects for manipulating the Windows registry.\n\n\n\nwinsound (Windows)\nAccess to the sound-playing machinery for Windows.\n\n\n\nwsgiref\nWSGI Utilities and Reference Implementation.\n\n\n   \n       wsgiref.handlers\nWSGI server/gateway base classes.\n\n\n   \n       wsgiref.headers\nWSGI response header tools.\n\n\n   \n       wsgiref.simple_server\nA simple WSGI HTTP server.\n\n\n   \n       wsgiref.types\nWSGI types for static type checking\n\n\n   \n       wsgiref.util\nWSGI environment utilities.\n\n\n   \n       wsgiref.validate\nWSGI conformance checker.\n \n\nx\n\n\n\nxdrlibDeprecated:\nEncoders and decoders for the External Data Representation (XDR).\n\n\n\nxml\nPackage containing XML processing modules\n\n\n   \n       xml.dom\nDocument Object Model API for Python.\n\n\n   \n       xml.dom.minidom\nMinimal Document Object Model (DOM) implementation.\n\n\n   \n       xml.dom.pulldom\nSupport for building partial DOM trees from SAX events.\n\n\n   \n       xml.etree.ElementInclude\n\n\n\n   \n       xml.etree.ElementTree\nImplementation of the ElementTree API.\n\n\n   \n       xml.parsers.expat\nAn interface to the Expat non-validating XML parser.\n\n\n   \n       xml.parsers.expat.errors\n\n\n\n   \n       xml.parsers.expat.model\n\n\n\n   \n       xml.sax\nPackage containing SAX2 base classes and convenience functions.\n\n\n   \n       xml.sax.handler\nBase classes for SAX event handlers.\n\n\n   \n       xml.sax.saxutils\nConvenience functions and classes for use with SAX.\n\n\n   \n       xml.sax.xmlreader\nInterface which SAX-compliant XML parsers must implement.\n\n\n\nxmlrpc\n\n\n\n   \n       xmlrpc.client\nXML-RPC client access.\n\n\n   \n       xmlrpc.server\nBasic XML-RPC server implementations.\n \n\nz\n\n\n\nzipapp\nManage executable Python zip archives\n\n\n\nzipfile\nRead and write ZIP-format archive files.\n\n\n\nzipimport\nSupport for importing Python modules from ZIP archives.\n\n\n\nzlib\nLow-level interface to compression and decompression routines\ncompatible with gzip.\n\n\n\nzoneinfo\nIANA time zone support\n\n\n\n\n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Module Index\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/search.html,Search — Python 3.11.8 documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nSearch\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\nSearch\n\n\n\n    Please activate JavaScript to enable the search\n    functionality.\n  \n\n\n\n    Searching for multiple words only shows matches that contain\n    all words.\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nSearch\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/glossary.html,Glossary — Python 3.11.8 documentation,">>>, The default Python prompt of the interactive shell. Often seen for code examples which can be executed interactively in the interpreter.,,..., Can refer to:- The default Python prompt of the i...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nâWhy is Python Installed on my Computer?â FAQ\n\n\nNext topic\nAbout these documents\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nGlossary\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nGlossaryÂ¶\n\n>>>Â¶The default Python prompt of the interactive shell.  Often seen for code\nexamples which can be executed interactively in the interpreter.\n\n...Â¶Can refer to:\n\nThe default Python prompt of the interactive shell when entering the\ncode for an indented code block, when within a pair of matching left and\nright delimiters (parentheses, square brackets, curly braces or triple\nquotes), or after specifying a decorator.\nThe Ellipsis built-in constant.\n\n\n2to3Â¶A tool that tries to convert Python 2.x code to Python 3.x code by\nhandling most of the incompatibilities which can be detected by parsing the\nsource and traversing the parse tree.\n2to3 is available in the standard library as lib2to3; a standalone\nentry point is provided as Tools/scripts/2to3.  See\n2to3 â Automated Python 2 to 3 code translation.\n\nabstract base classÂ¶Abstract base classes complement duck-typing by\nproviding a way to define interfaces when other techniques like\nhasattr() would be clumsy or subtly wrong (for example with\nmagic methods).  ABCs introduce virtual\nsubclasses, which are classes that donât inherit from a class but are\nstill recognized by isinstance() and issubclass(); see the\nabc module documentation.  Python comes with many built-in ABCs for\ndata structures (in the collections.abc module), numbers (in the\nnumbers module), streams (in the io module), import finders\nand loaders (in the importlib.abc module).  You can create your own\nABCs with the abc module.\n\nannotationÂ¶A label associated with a variable, a class\nattribute or a function parameter or return value,\nused by convention as a type hint.\nAnnotations of local variables cannot be accessed at runtime, but\nannotations of global variables, class attributes, and functions\nare stored in the __annotations__\nspecial attribute of modules, classes, and functions,\nrespectively.\nSee variable annotation, function annotation, PEP 484\nand PEP 526, which describe this functionality.\nAlso see Annotations Best Practices\nfor best practices on working with annotations.\n\nargumentÂ¶A value passed to a function (or method) when calling the\nfunction.  There are two kinds of argument:\n\nkeyword argument: an argument preceded by an identifier (e.g.\nname=) in a function call or passed as a value in a dictionary\npreceded by **.  For example, 3 and 5 are both keyword\narguments in the following calls to complex():\ncomplex(real=3, imag=5)\ncomplex(**{'real': 3, 'imag': 5})\n\n\n\npositional argument: an argument that is not a keyword argument.\nPositional arguments can appear at the beginning of an argument list\nand/or be passed as elements of an iterable preceded by *.\nFor example, 3 and 5 are both positional arguments in the\nfollowing calls:\ncomplex(3, 5)\ncomplex(*(3, 5))\n\n\n\n\nArguments are assigned to the named local variables in a function body.\nSee the Calls section for the rules governing this assignment.\nSyntactically, any expression can be used to represent an argument; the\nevaluated value is assigned to the local variable.\nSee also the parameter glossary entry, the FAQ question on\nthe difference between arguments and parameters, and PEP 362.\n\nasynchronous context managerÂ¶An object which controls the environment seen in an\nasync with statement by defining __aenter__() and\n__aexit__() methods.  Introduced by PEP 492.\n\nasynchronous generatorÂ¶A function which returns an asynchronous generator iterator.  It\nlooks like a coroutine function defined with async def except\nthat it contains yield expressions for producing a series of\nvalues usable in an async for loop.\nUsually refers to an asynchronous generator function, but may refer to an\nasynchronous generator iterator in some contexts.  In cases where the\nintended meaning isnât clear, using the full terms avoids ambiguity.\nAn asynchronous generator function may contain await\nexpressions as well as async for, and async with\nstatements.\n\nasynchronous generator iteratorÂ¶An object created by a asynchronous generator function.\nThis is an asynchronous iterator which when called using the\n__anext__() method returns an awaitable object which will execute\nthe body of the asynchronous generator function until the next\nyield expression.\nEach yield temporarily suspends processing, remembering the\nlocation execution state (including local variables and pending\ntry-statements).  When the asynchronous generator iterator effectively\nresumes with another awaitable returned by __anext__(), it\npicks up where it left off.  See PEP 492 and PEP 525.\n\nasynchronous iterableÂ¶An object, that can be used in an async for statement.\nMust return an asynchronous iterator from its\n__aiter__() method.  Introduced by PEP 492.\n\nasynchronous iteratorÂ¶An object that implements the __aiter__() and __anext__()\nmethods.  __anext__() must return an awaitable object.\nasync for resolves the awaitables returned by an asynchronous\niteratorâs __anext__() method until it raises a\nStopAsyncIteration exception.  Introduced by PEP 492.\n\nattributeÂ¶A value associated with an object which is usually referenced by name\nusing dotted expressions.\nFor example, if an object o has an attribute\na it would be referenced as o.a.\nIt is possible to give an object an attribute whose name is not an\nidentifier as defined by Identifiers and keywords, for example using\nsetattr(), if the object allows it.\nSuch an attribute will not be accessible using a dotted expression,\nand would instead need to be retrieved with getattr().\n\nawaitableÂ¶An object that can be used in an await expression.  Can be\na coroutine or an object with an __await__() method.\nSee also PEP 492.\n\nBDFLÂ¶Benevolent Dictator For Life, a.k.a. Guido van Rossum, Pythonâs creator.\n\nbinary fileÂ¶A file object able to read and write\nbytes-like objects.\nExamples of binary files are files opened in binary mode ('rb',\n'wb' or 'rb+'), sys.stdin.buffer,\nsys.stdout.buffer, and instances of\nio.BytesIO and gzip.GzipFile.\nSee also text file for a file object able to read and write\nstr objects.\n\nborrowed referenceÂ¶In Pythonâs C API, a borrowed reference is a reference to an object,\nwhere the code using the object does not own the reference.\nIt becomes a dangling\npointer if the object is destroyed. For example, a garbage collection can\nremove the last strong reference to the object and so destroy it.\nCalling Py_INCREF() on the borrowed reference is\nrecommended to convert it to a strong reference in-place, except\nwhen the object cannot be destroyed before the last usage of the borrowed\nreference. The Py_NewRef() function can be used to create a new\nstrong reference.\n\nbytes-like objectÂ¶An object that supports the Buffer Protocol and can\nexport a C-contiguous buffer. This includes all bytes,\nbytearray, and array.array objects, as well as many\ncommon memoryview objects.  Bytes-like objects can\nbe used for various operations that work with binary data; these include\ncompression, saving to a binary file, and sending over a socket.\nSome operations need the binary data to be mutable.  The documentation\noften refers to these as âread-write bytes-like objectsâ.  Example\nmutable buffer objects include bytearray and a\nmemoryview of a bytearray.\nOther operations require the binary data to be stored in\nimmutable objects (âread-only bytes-like objectsâ); examples\nof these include bytes and a memoryview\nof a bytes object.\n\nbytecodeÂ¶Python source code is compiled into bytecode, the internal representation\nof a Python program in the CPython interpreter.  The bytecode is also\ncached in .pyc files so that executing the same file is\nfaster the second time (recompilation from source to bytecode can be\navoided).  This âintermediate languageâ is said to run on a\nvirtual machine that executes the machine code corresponding to\neach bytecode. Do note that bytecodes are not expected to work between\ndifferent Python virtual machines, nor to be stable between Python\nreleases.\nA list of bytecode instructions can be found in the documentation for\nthe dis module.\n\ncallableÂ¶A callable is an object that can be called, possibly with a set\nof arguments (see argument), with the following syntax:\ncallable(argument1, argument2, argumentN)\n\n\nA function, and by extension a method, is a callable.\nAn instance of a class that implements the __call__()\nmethod is also a callable.\n\ncallbackÂ¶A subroutine function which is passed as an argument to be executed at\nsome point in the future.\n\nclassÂ¶A template for creating user-defined objects. Class definitions\nnormally contain method definitions which operate on instances of the\nclass.\n\nclass variableÂ¶A variable defined in a class and intended to be modified only at\nclass level (i.e., not in an instance of the class).\n\ncomplex numberÂ¶An extension of the familiar real number system in which all numbers are\nexpressed as a sum of a real part and an imaginary part.  Imaginary\nnumbers are real multiples of the imaginary unit (the square root of\n-1), often written i in mathematics or j in\nengineering.  Python has built-in support for complex numbers, which are\nwritten with this latter notation; the imaginary part is written with a\nj suffix, e.g., 3+1j.  To get access to complex equivalents of the\nmath module, use cmath.  Use of complex numbers is a fairly\nadvanced mathematical feature.  If youâre not aware of a need for them,\nitâs almost certain you can safely ignore them.\n\ncontext managerÂ¶An object which controls the environment seen in a with\nstatement by defining __enter__() and __exit__() methods.\nSee PEP 343.\n\ncontext variableÂ¶A variable which can have different values depending on its context.\nThis is similar to Thread-Local Storage in which each execution\nthread may have a different value for a variable. However, with context\nvariables, there may be several contexts in one execution thread and the\nmain usage for context variables is to keep track of variables in\nconcurrent asynchronous tasks.\nSee contextvars.\n\ncontiguousÂ¶A buffer is considered contiguous exactly if it is either\nC-contiguous or Fortran contiguous.  Zero-dimensional buffers are\nC and Fortran contiguous.  In one-dimensional arrays, the items\nmust be laid out in memory next to each other, in order of\nincreasing indexes starting from zero.  In multidimensional\nC-contiguous arrays, the last index varies the fastest when\nvisiting items in order of memory address.  However, in\nFortran contiguous arrays, the first index varies the fastest.\n\ncoroutineÂ¶Coroutines are a more generalized form of subroutines. Subroutines are\nentered at one point and exited at another point.  Coroutines can be\nentered, exited, and resumed at many different points.  They can be\nimplemented with the async def statement.  See also\nPEP 492.\n\ncoroutine functionÂ¶A function which returns a coroutine object.  A coroutine\nfunction may be defined with the async def statement,\nand may contain await, async for, and\nasync with keywords.  These were introduced\nby PEP 492.\n\nCPythonÂ¶The canonical implementation of the Python programming language, as\ndistributed on python.org.  The term âCPythonâ\nis used when necessary to distinguish this implementation from others\nsuch as Jython or IronPython.\n\ndecoratorÂ¶A function returning another function, usually applied as a function\ntransformation using the @wrapper syntax.  Common examples for\ndecorators are classmethod() and staticmethod().\nThe decorator syntax is merely syntactic sugar, the following two\nfunction definitions are semantically equivalent:\ndef f(arg):\n    ...\nf = staticmethod(f)\n\n@staticmethod\ndef f(arg):\n    ...\n\n\nThe same concept exists for classes, but is less commonly used there.  See\nthe documentation for function definitions and\nclass definitions for more about decorators.\n\ndescriptorÂ¶Any object which defines the methods __get__(),\n__set__(), or __delete__().\nWhen a class attribute is a descriptor, its special\nbinding behavior is triggered upon attribute lookup.  Normally, using\na.b to get, set or delete an attribute looks up the object named b in\nthe class dictionary for a, but if b is a descriptor, the respective\ndescriptor method gets called.  Understanding descriptors is a key to a\ndeep understanding of Python because they are the basis for many features\nincluding functions, methods, properties, class methods, static methods,\nand reference to super classes.\nFor more information about descriptorsâ methods, see Implementing Descriptors\nor the Descriptor How To Guide.\n\ndictionaryÂ¶An associative array, where arbitrary keys are mapped to values.  The\nkeys can be any object with __hash__() and\n__eq__() methods.\nCalled a hash in Perl.\n\ndictionary comprehensionÂ¶A compact way to process all or part of the elements in an iterable and\nreturn a dictionary with the results. results = {n: n ** 2 for n in\nrange(10)} generates a dictionary containing key n mapped to\nvalue n ** 2. See Displays for lists, sets and dictionaries.\n\ndictionary viewÂ¶The objects returned from dict.keys(), dict.values(), and\ndict.items() are called dictionary views. They provide a dynamic\nview on the dictionaryâs entries, which means that when the dictionary\nchanges, the view reflects these changes. To force the\ndictionary view to become a full list use list(dictview).  See\nDictionary view objects.\n\ndocstringÂ¶A string literal which appears as the first expression in a class,\nfunction or module.  While ignored when the suite is executed, it is\nrecognized by the compiler and put into the __doc__ attribute\nof the enclosing class, function or module.  Since it is available via\nintrospection, it is the canonical place for documentation of the\nobject.\n\nduck-typingÂ¶A programming style which does not look at an objectâs type to determine\nif it has the right interface; instead, the method or attribute is simply\ncalled or used (âIf it looks like a duck and quacks like a duck, it\nmust be a duck.â)  By emphasizing interfaces rather than specific types,\nwell-designed code improves its flexibility by allowing polymorphic\nsubstitution.  Duck-typing avoids tests using type() or\nisinstance().  (Note, however, that duck-typing can be complemented\nwith abstract base classes.)  Instead, it\ntypically employs hasattr() tests or EAFP programming.\n\nEAFPÂ¶Easier to ask for forgiveness than permission.  This common Python coding\nstyle assumes the existence of valid keys or attributes and catches\nexceptions if the assumption proves false.  This clean and fast style is\ncharacterized by the presence of many try and except\nstatements.  The technique contrasts with the LBYL style\ncommon to many other languages such as C.\n\nexpressionÂ¶A piece of syntax which can be evaluated to some value.  In other words,\nan expression is an accumulation of expression elements like literals,\nnames, attribute access, operators or function calls which all return a\nvalue.  In contrast to many other languages, not all language constructs\nare expressions.  There are also statements which cannot be used\nas expressions, such as while.  Assignments are also statements,\nnot expressions.\n\nextension moduleÂ¶A module written in C or C++, using Pythonâs C API to interact with the\ncore and with user code.\n\nf-stringÂ¶String literals prefixed with 'f' or 'F' are commonly called\nâf-stringsâ which is short for\nformatted string literals.  See also PEP 498.\n\nfile objectÂ¶An object exposing a file-oriented API (with methods such as\nread() or write()) to an underlying resource.  Depending\non the way it was created, a file object can mediate access to a real\non-disk file or to another type of storage or communication device\n(for example standard input/output, in-memory buffers, sockets, pipes,\netc.).  File objects are also called file-like objects or\nstreams.\nThere are actually three categories of file objects: raw\nbinary files, buffered\nbinary files and text files.\nTheir interfaces are defined in the io module.  The canonical\nway to create a file object is by using the open() function.\n\nfile-like objectÂ¶A synonym for file object.\n\nfilesystem encoding and error handlerÂ¶Encoding and error handler used by Python to decode bytes from the\noperating system and encode Unicode to the operating system.\nThe filesystem encoding must guarantee to successfully decode all bytes\nbelow 128. If the file system encoding fails to provide this guarantee,\nAPI functions can raise UnicodeError.\nThe sys.getfilesystemencoding() and\nsys.getfilesystemencodeerrors() functions can be used to get the\nfilesystem encoding and error handler.\nThe filesystem encoding and error handler are configured at\nPython startup by the PyConfig_Read() function: see\nfilesystem_encoding and\nfilesystem_errors members of PyConfig.\nSee also the locale encoding.\n\nfinderÂ¶An object that tries to find the loader for a module that is\nbeing imported.\nSince Python 3.3, there are two types of finder: meta path finders for use with sys.meta_path, and path\nentry finders for use with sys.path_hooks.\nSee PEP 302, PEP 420 and PEP 451 for much more detail.\n\nfloor divisionÂ¶Mathematical division that rounds down to nearest integer.  The floor\ndivision operator is //.  For example, the expression 11 // 4\nevaluates to 2 in contrast to the 2.75 returned by float true\ndivision.  Note that (-11) // 4 is -3 because that is -2.75\nrounded downward. See PEP 238.\n\nfunctionÂ¶A series of statements which returns some value to a caller. It can also\nbe passed zero or more arguments which may be used in\nthe execution of the body. See also parameter, method,\nand the Function definitions section.\n\nfunction annotationÂ¶An annotation of a function parameter or return value.\nFunction annotations are usually used for\ntype hints: for example, this function is expected to take two\nint arguments and is also expected to have an int\nreturn value:\ndef sum_two_numbers(a: int, b: int) -> int:\n   return a + b\n\n\nFunction annotation syntax is explained in section Function definitions.\nSee variable annotation and PEP 484,\nwhich describe this functionality.\nAlso see Annotations Best Practices\nfor best practices on working with annotations.\n\n__future__Â¶A future statement, from __future__ import <feature>,\ndirects the compiler to compile the current module using syntax or\nsemantics that will become standard in a future release of Python.\nThe __future__ module documents the possible values of\nfeature.  By importing this module and evaluating its variables,\nyou can see when a new feature was first added to the language and\nwhen it will (or did) become the default:\n>>> import __future__\n>>> __future__.division\n_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)\n\n\n\ngarbage collectionÂ¶The process of freeing memory when it is not used anymore.  Python\nperforms garbage collection via reference counting and a cyclic garbage\ncollector that is able to detect and break reference cycles.  The\ngarbage collector can be controlled using the gc module.\n\ngeneratorÂ¶A function which returns a generator iterator.  It looks like a\nnormal function except that it contains yield expressions\nfor producing a series of values usable in a for-loop or that can be\nretrieved one at a time with the next() function.\nUsually refers to a generator function, but may refer to a\ngenerator iterator in some contexts.  In cases where the intended\nmeaning isnât clear, using the full terms avoids ambiguity.\n\ngenerator iteratorÂ¶An object created by a generator function.\nEach yield temporarily suspends processing, remembering the\nlocation execution state (including local variables and pending\ntry-statements).  When the generator iterator resumes, it picks up where\nit left off (in contrast to functions which start fresh on every\ninvocation).\n\ngenerator expressionÂ¶An expression that returns an iterator.  It looks like a normal expression\nfollowed by a for clause defining a loop variable, range,\nand an optional if clause.  The combined expression\ngenerates values for an enclosing function:\n>>> sum(i*i for i in range(10))         # sum of squares 0, 1, 4, ... 81\n285\n\n\n\ngeneric functionÂ¶A function composed of multiple functions implementing the same operation\nfor different types. Which implementation should be used during a call is\ndetermined by the dispatch algorithm.\nSee also the single dispatch glossary entry, the\nfunctools.singledispatch() decorator, and PEP 443.\n\ngeneric typeÂ¶A type that can be parameterized; typically a\ncontainer class such as list or\ndict. Used for type hints and\nannotations.\nFor more details, see generic alias types,\nPEP 483, PEP 484, PEP 585, and the typing module.\n\nGILÂ¶See global interpreter lock.\n\nglobal interpreter lockÂ¶The mechanism used by the CPython interpreter to assure that\nonly one thread executes Python bytecode at a time.\nThis simplifies the CPython implementation by making the object model\n(including critical built-in types such as dict) implicitly\nsafe against concurrent access.  Locking the entire interpreter\nmakes it easier for the interpreter to be multi-threaded, at the\nexpense of much of the parallelism afforded by multi-processor\nmachines.\nHowever, some extension modules, either standard or third-party,\nare designed so as to release the GIL when doing computationally intensive\ntasks such as compression or hashing.  Also, the GIL is always released\nwhen doing I/O.\nPast efforts to create a âfree-threadedâ interpreter (one which locks\nshared data at a much finer granularity) have not been successful\nbecause performance suffered in the common single-processor case. It\nis believed that overcoming this performance issue would make the\nimplementation much more complicated and therefore costlier to maintain.\n\nhash-based pycÂ¶A bytecode cache file that uses the hash rather than the last-modified\ntime of the corresponding source file to determine its validity. See\nCached bytecode invalidation.\n\nhashableÂ¶An object is hashable if it has a hash value which never changes during\nits lifetime (it needs a __hash__() method), and can be\ncompared to other objects (it needs an __eq__() method).\nHashable objects which\ncompare equal must have the same hash value.\nHashability makes an object usable as a dictionary key and a set member,\nbecause these data structures use the hash value internally.\nMost of Pythonâs immutable built-in objects are hashable; mutable\ncontainers (such as lists or dictionaries) are not; immutable\ncontainers (such as tuples and frozensets) are only hashable if\ntheir elements are hashable.  Objects which are\ninstances of user-defined classes are hashable by default.  They all\ncompare unequal (except with themselves), and their hash value is derived\nfrom their id().\n\nIDLEÂ¶An Integrated Development and Learning Environment for Python.\nIDLE is a basic editor and interpreter environment\nwhich ships with the standard distribution of Python.\n\nimmutableÂ¶An object with a fixed value.  Immutable objects include numbers, strings and\ntuples.  Such an object cannot be altered.  A new object has to\nbe created if a different value has to be stored.  They play an important\nrole in places where a constant hash value is needed, for example as a key\nin a dictionary.\n\nimport pathÂ¶A list of locations (or path entries) that are\nsearched by the path based finder for modules to import. During\nimport, this list of locations usually comes from sys.path, but\nfor subpackages it may also come from the parent packageâs __path__\nattribute.\n\nimportingÂ¶The process by which Python code in one module is made available to\nPython code in another module.\n\nimporterÂ¶An object that both finds and loads a module; both a\nfinder and loader object.\n\ninteractiveÂ¶Python has an interactive interpreter which means you can enter\nstatements and expressions at the interpreter prompt, immediately\nexecute them and see their results.  Just launch python with no\narguments (possibly by selecting it from your computerâs main\nmenu). It is a very powerful way to test out new ideas or inspect\nmodules and packages (remember help(x)).\n\ninterpretedÂ¶Python is an interpreted language, as opposed to a compiled one,\nthough the distinction can be blurry because of the presence of the\nbytecode compiler.  This means that source files can be run directly\nwithout explicitly creating an executable which is then run.\nInterpreted languages typically have a shorter development/debug cycle\nthan compiled ones, though their programs generally also run more\nslowly.  See also interactive.\n\ninterpreter shutdownÂ¶When asked to shut down, the Python interpreter enters a special phase\nwhere it gradually releases all allocated resources, such as modules\nand various critical internal structures.  It also makes several calls\nto the garbage collector. This can trigger\nthe execution of code in user-defined destructors or weakref callbacks.\nCode executed during the shutdown phase can encounter various\nexceptions as the resources it relies on may not function anymore\n(common examples are library modules or the warnings machinery).\nThe main reason for interpreter shutdown is that the __main__ module\nor the script being run has finished executing.\n\niterableÂ¶An object capable of returning its members one at a time. Examples of\niterables include all sequence types (such as list, str,\nand tuple) and some non-sequence types like dict,\nfile objects, and objects of any classes you define\nwith an __iter__() method or with a\n__getitem__() method\nthat implements sequence semantics.\nIterables can be\nused in a for loop and in many other places where a sequence is\nneeded (zip(), map(), â¦).  When an iterable object is passed\nas an argument to the built-in function iter(), it returns an\niterator for the object.  This iterator is good for one pass over the set\nof values.  When using iterables, it is usually not necessary to call\niter() or deal with iterator objects yourself.  The for\nstatement does that automatically for you, creating a temporary unnamed\nvariable to hold the iterator for the duration of the loop.  See also\niterator, sequence, and generator.\n\niteratorÂ¶An object representing a stream of data.  Repeated calls to the iteratorâs\n__next__() method (or passing it to the built-in function\nnext()) return successive items in the stream.  When no more data\nare available a StopIteration exception is raised instead.  At this\npoint, the iterator object is exhausted and any further calls to its\n__next__() method just raise StopIteration again.  Iterators\nare required to have an __iter__() method that returns the iterator\nobject itself so every iterator is also iterable and may be used in most\nplaces where other iterables are accepted.  One notable exception is code\nwhich attempts multiple iteration passes.  A container object (such as a\nlist) produces a fresh new iterator each time you pass it to the\niter() function or use it in a for loop.  Attempting this\nwith an iterator will just return the same exhausted iterator object used\nin the previous iteration pass, making it appear like an empty container.\nMore information can be found in Iterator Types.\n\nCPython implementation detail: CPython does not consistently apply the requirement that an iterator\ndefine __iter__().\n\n\nkey functionÂ¶A key function or collation function is a callable that returns a value\nused for sorting or ordering.  For example, locale.strxfrm() is\nused to produce a sort key that is aware of locale specific sort\nconventions.\nA number of tools in Python accept key functions to control how elements\nare ordered or grouped.  They include min(), max(),\nsorted(), list.sort(), heapq.merge(),\nheapq.nsmallest(), heapq.nlargest(), and\nitertools.groupby().\nThere are several ways to create a key function.  For example. the\nstr.lower() method can serve as a key function for case insensitive\nsorts.  Alternatively, a key function can be built from a\nlambda expression such as lambda r: (r[0], r[2]).  Also,\noperator.attrgetter(), operator.itemgetter(), and\noperator.methodcaller() are three key function constructors.  See the Sorting HOW TO for examples of how to create and use key functions.\n\nkeyword argumentÂ¶See argument.\n\nlambdaÂ¶An anonymous inline function consisting of a single expression\nwhich is evaluated when the function is called.  The syntax to create\na lambda function is lambda [parameters]: expression\n\nLBYLÂ¶Look before you leap.  This coding style explicitly tests for\npre-conditions before making calls or lookups.  This style contrasts with\nthe EAFP approach and is characterized by the presence of many\nif statements.\nIn a multi-threaded environment, the LBYL approach can risk introducing a\nrace condition between âthe lookingâ and âthe leapingâ.  For example, the\ncode, if key in mapping: return mapping[key] can fail if another\nthread removes key from mapping after the test, but before the lookup.\nThis issue can be solved with locks or by using the EAFP approach.\n\nlistÂ¶A built-in Python sequence.  Despite its name it is more akin\nto an array in other languages than to a linked list since access to\nelements is O(1).\n\nlist comprehensionÂ¶A compact way to process all or part of the elements in a sequence and\nreturn a list with the results.  result = ['{:#04x}'.format(x) for x in\nrange(256) if x % 2 == 0] generates a list of strings containing\neven hex numbers (0x..) in the range from 0 to 255. The if\nclause is optional.  If omitted, all elements in range(256) are\nprocessed.\n\nloaderÂ¶An object that loads a module. It must define a method named\nload_module(). A loader is typically returned by a\nfinder. See PEP 302 for details and\nimportlib.abc.Loader for an abstract base class.\n\nlocale encodingÂ¶On Unix, it is the encoding of the LC_CTYPE locale. It can be set with\nlocale.setlocale(locale.LC_CTYPE, new_locale).\nOn Windows, it is the ANSI code page (ex: ""cp1252"").\nOn Android and VxWorks, Python uses ""utf-8"" as the locale encoding.\nlocale.getencoding() can be used to get the locale encoding.\nSee also the filesystem encoding and error handler.\n\nmagic methodÂ¶An informal synonym for special method.\n\nmappingÂ¶A container object that supports arbitrary key lookups and implements the\nmethods specified in the collections.abc.Mapping or\ncollections.abc.MutableMapping\nabstract base classes.  Examples\ninclude dict, collections.defaultdict,\ncollections.OrderedDict and collections.Counter.\n\nmeta path finderÂ¶A finder returned by a search of sys.meta_path.  Meta path\nfinders are related to, but different from path entry finders.\nSee importlib.abc.MetaPathFinder for the methods that meta path\nfinders implement.\n\nmetaclassÂ¶The class of a class.  Class definitions create a class name, a class\ndictionary, and a list of base classes.  The metaclass is responsible for\ntaking those three arguments and creating the class.  Most object oriented\nprogramming languages provide a default implementation.  What makes Python\nspecial is that it is possible to create custom metaclasses.  Most users\nnever need this tool, but when the need arises, metaclasses can provide\npowerful, elegant solutions.  They have been used for logging attribute\naccess, adding thread-safety, tracking object creation, implementing\nsingletons, and many other tasks.\nMore information can be found in Metaclasses.\n\nmethodÂ¶A function which is defined inside a class body.  If called as an attribute\nof an instance of that class, the method will get the instance object as\nits first argument (which is usually called self).\nSee function and nested scope.\n\nmethod resolution orderÂ¶Method Resolution Order is the order in which base classes are searched\nfor a member during lookup. See The Python 2.3 Method Resolution Order for details of the\nalgorithm used by the Python interpreter since the 2.3 release.\n\nmoduleÂ¶An object that serves as an organizational unit of Python code.  Modules\nhave a namespace containing arbitrary Python objects.  Modules are loaded\ninto Python by the process of importing.\nSee also package.\n\nmodule specÂ¶A namespace containing the import-related information used to load a\nmodule. An instance of importlib.machinery.ModuleSpec.\n\nMROÂ¶See method resolution order.\n\nmutableÂ¶Mutable objects can change their value but keep their id().  See\nalso immutable.\n\nnamed tupleÂ¶The term ânamed tupleâ applies to any type or class that inherits from\ntuple and whose indexable elements are also accessible using named\nattributes.  The type or class may have other features as well.\nSeveral built-in types are named tuples, including the values returned\nby time.localtime() and os.stat().  Another example is\nsys.float_info:\n>>> sys.float_info[1]                   # indexed access\n1024\n>>> sys.float_info.max_exp              # named field access\n1024\n>>> isinstance(sys.float_info, tuple)   # kind of tuple\nTrue\n\n\nSome named tuples are built-in types (such as the above examples).\nAlternatively, a named tuple can be created from a regular class\ndefinition that inherits from tuple and that defines named\nfields.  Such a class can be written by hand, or it can be created by\ninheriting typing.NamedTuple, or with the factory function\ncollections.namedtuple().  The latter techniques also add some\nextra methods that may not be found in hand-written or built-in named\ntuples.\n\nnamespaceÂ¶The place where a variable is stored.  Namespaces are implemented as\ndictionaries.  There are the local, global and built-in namespaces as well\nas nested namespaces in objects (in methods).  Namespaces support\nmodularity by preventing naming conflicts.  For instance, the functions\nbuiltins.open and os.open() are distinguished by\ntheir namespaces.  Namespaces also aid readability and maintainability by\nmaking it clear which module implements a function.  For instance, writing\nrandom.seed() or itertools.islice() makes it clear that those\nfunctions are implemented by the random and itertools\nmodules, respectively.\n\nnamespace packageÂ¶A PEP 420 package which serves only as a container for\nsubpackages.  Namespace packages may have no physical representation,\nand specifically are not like a regular package because they\nhave no __init__.py file.\nSee also module.\n\nnested scopeÂ¶The ability to refer to a variable in an enclosing definition.  For\ninstance, a function defined inside another function can refer to\nvariables in the outer function.  Note that nested scopes by default work\nonly for reference and not for assignment.  Local variables both read and\nwrite in the innermost scope.  Likewise, global variables read and write\nto the global namespace.  The nonlocal allows writing to outer\nscopes.\n\nnew-style classÂ¶Old name for the flavor of classes now used for all class objects.  In\nearlier Python versions, only new-style classes could use Pythonâs newer,\nversatile features like __slots__, descriptors,\nproperties, __getattribute__(), class methods, and static\nmethods.\n\nobjectÂ¶Any data with state (attributes or value) and defined behavior\n(methods).  Also the ultimate base class of any new-style\nclass.\n\npackageÂ¶A Python module which can contain submodules or recursively,\nsubpackages.  Technically, a package is a Python module with a\n__path__ attribute.\nSee also regular package and namespace package.\n\nparameterÂ¶A named entity in a function (or method) definition that\nspecifies an argument (or in some cases, arguments) that the\nfunction can accept.  There are five kinds of parameter:\n\npositional-or-keyword: specifies an argument that can be passed\neither positionally or as a keyword argument.  This is the default kind of parameter, for example foo\nand bar in the following:\ndef func(foo, bar=None): ...\n\n\n\n\n\npositional-only: specifies an argument that can be supplied only\nby position. Positional-only parameters can be defined by including a\n/ character in the parameter list of the function definition after\nthem, for example posonly1 and posonly2 in the following:\ndef func(posonly1, posonly2, /, positional_or_keyword): ...\n\n\n\n\n\nkeyword-only: specifies an argument that can be supplied only\nby keyword.  Keyword-only parameters can be defined by including a\nsingle var-positional parameter or bare * in the parameter list\nof the function definition before them, for example kw_only1 and\nkw_only2 in the following:\ndef func(arg, *, kw_only1, kw_only2): ...\n\n\n\nvar-positional: specifies that an arbitrary sequence of\npositional arguments can be provided (in addition to any positional\narguments already accepted by other parameters).  Such a parameter can\nbe defined by prepending the parameter name with *, for example\nargs in the following:\ndef func(*args, **kwargs): ...\n\n\n\nvar-keyword: specifies that arbitrarily many keyword arguments\ncan be provided (in addition to any keyword arguments already accepted\nby other parameters).  Such a parameter can be defined by prepending\nthe parameter name with **, for example kwargs in the example\nabove.\n\nParameters can specify both optional and required arguments, as well as\ndefault values for some optional arguments.\nSee also the argument glossary entry, the FAQ question on\nthe difference between arguments and parameters, the inspect.Parameter class, the\nFunction definitions section, and PEP 362.\n\npath entryÂ¶A single location on the import path which the path\nbased finder consults to find modules for importing.\n\npath entry finderÂ¶A finder returned by a callable on sys.path_hooks\n(i.e. a path entry hook) which knows how to locate modules given\na path entry.\nSee importlib.abc.PathEntryFinder for the methods that path entry\nfinders implement.\n\npath entry hookÂ¶A callable on the sys.path_hooks list which returns a path\nentry finder if it knows how to find modules on a specific path\nentry.\n\npath based finderÂ¶One of the default meta path finders which\nsearches an import path for modules.\n\npath-like objectÂ¶An object representing a file system path. A path-like object is either\na str or bytes object representing a path, or an object\nimplementing the os.PathLike protocol. An object that supports\nthe os.PathLike protocol can be converted to a str or\nbytes file system path by calling the os.fspath() function;\nos.fsdecode() and os.fsencode() can be used to guarantee a\nstr or bytes result instead, respectively. Introduced\nby PEP 519.\n\nPEPÂ¶Python Enhancement Proposal. A PEP is a design document\nproviding information to the Python community, or describing a new\nfeature for Python or its processes or environment. PEPs should\nprovide a concise technical specification and a rationale for proposed\nfeatures.\nPEPs are intended to be the primary mechanisms for proposing major new\nfeatures, for collecting community input on an issue, and for documenting\nthe design decisions that have gone into Python. The PEP author is\nresponsible for building consensus within the community and documenting\ndissenting opinions.\nSee PEP 1.\n\nportionÂ¶A set of files in a single directory (possibly stored in a zip file)\nthat contribute to a namespace package, as defined in PEP 420.\n\npositional argumentÂ¶See argument.\n\nprovisional APIÂ¶A provisional API is one which has been deliberately excluded from\nthe standard libraryâs backwards compatibility guarantees.  While major\nchanges to such interfaces are not expected, as long as they are marked\nprovisional, backwards incompatible changes (up to and including removal\nof the interface) may occur if deemed necessary by core developers.  Such\nchanges will not be made gratuitously â they will occur only if serious\nfundamental flaws are uncovered that were missed prior to the inclusion\nof the API.\nEven for provisional APIs, backwards incompatible changes are seen as\na âsolution of last resortâ - every attempt will still be made to find\na backwards compatible resolution to any identified problems.\nThis process allows the standard library to continue to evolve over\ntime, without locking in problematic design errors for extended periods\nof time.  See PEP 411 for more details.\n\nprovisional packageÂ¶See provisional API.\n\nPython 3000Â¶Nickname for the Python 3.x release line (coined long ago when the\nrelease of version 3 was something in the distant future.)  This is also\nabbreviated âPy3kâ.\n\nPythonicÂ¶An idea or piece of code which closely follows the most common idioms\nof the Python language, rather than implementing code using concepts\ncommon to other languages.  For example, a common idiom in Python is\nto loop over all elements of an iterable using a for\nstatement.  Many other languages donât have this type of construct, so\npeople unfamiliar with Python sometimes use a numerical counter instead:\nfor i in range(len(food)):\n    print(food[i])\n\n\nAs opposed to the cleaner, Pythonic method:\nfor piece in food:\n    print(piece)\n\n\n\nqualified nameÂ¶A dotted name showing the âpathâ from a moduleâs global scope to a\nclass, function or method defined in that module, as defined in\nPEP 3155.  For top-level functions and classes, the qualified name\nis the same as the objectâs name:\n>>> class C:\n...     class D:\n...         def meth(self):\n...             pass\n...\n>>> C.__qualname__\n'C'\n>>> C.D.__qualname__\n'C.D'\n>>> C.D.meth.__qualname__\n'C.D.meth'\n\n\nWhen used to refer to modules, the fully qualified name means the\nentire dotted path to the module, including any parent packages,\ne.g. email.mime.text:\n>>> import email.mime.text\n>>> email.mime.text.__name__\n'email.mime.text'\n\n\n\nreference countÂ¶The number of references to an object.  When the reference count of an\nobject drops to zero, it is deallocated.  Reference counting is\ngenerally not visible to Python code, but it is a key element of the\nCPython implementation.  Programmers can call the\nsys.getrefcount() function to return the\nreference count for a particular object.\n\nregular packageÂ¶A traditional package, such as a directory containing an\n__init__.py file.\nSee also namespace package.\n\n__slots__Â¶A declaration inside a class that saves memory by pre-declaring space for\ninstance attributes and eliminating instance dictionaries.  Though\npopular, the technique is somewhat tricky to get right and is best\nreserved for rare cases where there are large numbers of instances in a\nmemory-critical application.\n\nsequenceÂ¶An iterable which supports efficient element access using integer\nindices via the __getitem__() special method and defines a\n__len__() method that returns the length of the sequence.\nSome built-in sequence types are list, str,\ntuple, and bytes. Note that dict also\nsupports __getitem__() and __len__(), but is considered a\nmapping rather than a sequence because the lookups use arbitrary\nimmutable keys rather than integers.\nThe collections.abc.Sequence abstract base class\ndefines a much richer interface that goes beyond just\n__getitem__() and __len__(), adding\ncount(), index(), __contains__(), and\n__reversed__(). Types that implement this expanded\ninterface can be registered explicitly using\nregister(). For more documentation on sequence\nmethods generally, see\nCommon Sequence Operations.\n\nset comprehensionÂ¶A compact way to process all or part of the elements in an iterable and\nreturn a set with the results. results = {c for c in 'abracadabra' if\nc not in 'abc'} generates the set of strings {'r', 'd'}.  See\nDisplays for lists, sets and dictionaries.\n\nsingle dispatchÂ¶A form of generic function dispatch where the implementation is\nchosen based on the type of a single argument.\n\nsliceÂ¶An object usually containing a portion of a sequence.  A slice is\ncreated using the subscript notation, [] with colons between numbers\nwhen several are given, such as in variable_name[1:3:5].  The bracket\n(subscript) notation uses slice objects internally.\n\nspecial methodÂ¶A method that is called implicitly by Python to execute a certain\noperation on a type, such as addition.  Such methods have names starting\nand ending with double underscores.  Special methods are documented in\nSpecial method names.\n\nstatementÂ¶A statement is part of a suite (a âblockâ of code).  A statement is either\nan expression or one of several constructs with a keyword, such\nas if, while or for.\n\nstatic type checkerÂ¶An external tool that reads Python code and analyzes it, looking for\nissues such as incorrect types. See also type hints\nand the typing module.\n\nstrong referenceÂ¶In Pythonâs C API, a strong reference is a reference to an object\nwhich is owned by the code holding the reference.  The strong\nreference is taken by calling Py_INCREF() when the\nreference is created and released with Py_DECREF()\nwhen the reference is deleted.\nThe Py_NewRef() function can be used to create a strong reference\nto an object. Usually, the Py_DECREF() function must be called on\nthe strong reference before exiting the scope of the strong reference, to\navoid leaking one reference.\nSee also borrowed reference.\n\ntext encodingÂ¶A string in Python is a sequence of Unicode code points (in range\nU+0000âU+10FFFF). To store or transfer a string, it needs to be\nserialized as a sequence of bytes.\nSerializing a string into a sequence of bytes is known as âencodingâ, and\nrecreating the string from the sequence of bytes is known as âdecodingâ.\nThere are a variety of different text serialization\ncodecs, which are collectively referred to as\nâtext encodingsâ.\n\ntext fileÂ¶A file object able to read and write str objects.\nOften, a text file actually accesses a byte-oriented datastream\nand handles the text encoding automatically.\nExamples of text files are files opened in text mode ('r' or 'w'),\nsys.stdin, sys.stdout, and instances of\nio.StringIO.\nSee also binary file for a file object able to read and write\nbytes-like objects.\n\ntriple-quoted stringÂ¶A string which is bound by three instances of either a quotation mark\n(â) or an apostrophe (â).  While they donât provide any functionality\nnot available with single-quoted strings, they are useful for a number\nof reasons.  They allow you to include unescaped single and double\nquotes within a string and they can span multiple lines without the\nuse of the continuation character, making them especially useful when\nwriting docstrings.\n\ntypeÂ¶The type of a Python object determines what kind of object it is; every\nobject has a type.  An objectâs type is accessible as its\n__class__ attribute or can be retrieved with\ntype(obj).\n\ntype aliasÂ¶A synonym for a type, created by assigning the type to an identifier.\nType aliases are useful for simplifying type hints.\nFor example:\ndef remove_gray_shades(\n        colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:\n    pass\n\n\ncould be made more readable like this:\nColor = tuple[int, int, int]\n\ndef remove_gray_shades(colors: list[Color]) -> list[Color]:\n    pass\n\n\nSee typing and PEP 484, which describe this functionality.\n\ntype hintÂ¶An annotation that specifies the expected type for a variable, a class\nattribute, or a function parameter or return value.\nType hints are optional and are not enforced by Python but\nthey are useful to static type checkers.\nThey can also aid IDEs with code completion and refactoring.\nType hints of global variables, class attributes, and functions,\nbut not local variables, can be accessed using\ntyping.get_type_hints().\nSee typing and PEP 484, which describe this functionality.\n\nuniversal newlinesÂ¶A manner of interpreting text streams in which all of the following are\nrecognized as ending a line: the Unix end-of-line convention '\n',\nthe Windows convention '\r\n', and the old Macintosh convention\n'\r'.  See PEP 278 and PEP 3116, as well as\nbytes.splitlines() for an additional use.\n\nvariable annotationÂ¶An annotation of a variable or a class attribute.\nWhen annotating a variable or a class attribute, assignment is optional:\nclass C:\n    field: 'annotation'\n\n\nVariable annotations are usually used for\ntype hints: for example this variable is expected to take\nint values:\ncount: int = 0\n\n\nVariable annotation syntax is explained in section Annotated assignment statements.\nSee function annotation, PEP 484\nand PEP 526, which describe this functionality.\nAlso see Annotations Best Practices\nfor best practices on working with annotations.\n\nvirtual environmentÂ¶A cooperatively isolated runtime environment that allows Python users\nand applications to install and upgrade Python distribution packages\nwithout interfering with the behaviour of other Python applications\nrunning on the same system.\nSee also venv.\n\nvirtual machineÂ¶A computer defined entirely in software.  Pythonâs virtual machine\nexecutes the bytecode emitted by the bytecode compiler.\n\nZen of PythonÂ¶Listing of Python design principles and philosophies that are helpful in\nunderstanding and using the language.  The listing can be found by typing\nâimport thisâ at the interactive prompt.\n\n\n\n\n\n\n\n\n\n\nPrevious topic\nâWhy is Python Installed on my Computer?â FAQ\n\n\nNext topic\nAbout these documents\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nGlossary\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/license.html,History and License — Python 3.11.8 documentation,"History of the software: Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum (CWI, see https://www.cwi.nl/) in the Netherlands as a successor of a language c...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPSF LICENSE AGREEMENT FOR PYTHON 3.11.8\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.11.8 DOCUMENTATION\n\n\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nAudioop\nasyncio\n\n\n\n\n\n\n\nPrevious topic\nCopyright\n\n\nNext topic\nDistributing Python Modules (Legacy version)\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nHistory and License\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nHistory and LicenseÂ¶\n\nHistory of the softwareÂ¶\nPython was created in the early 1990s by Guido van Rossum at Stichting\nMathematisch Centrum (CWI, see https://www.cwi.nl/) in the Netherlands as a\nsuccessor of a language called ABC.  Guido remains Pythonâs principal author,\nalthough it includes many contributions from others.\nIn 1995, Guido continued his work on Python at the Corporation for National\nResearch Initiatives (CNRI, see https://www.cnri.reston.va.us/) in Reston,\nVirginia where he released several versions of the software.\nIn May 2000, Guido and the Python core development team moved to BeOpen.com to\nform the BeOpen PythonLabs team.  In October of the same year, the PythonLabs\nteam moved to Digital Creations (now Zope Corporation; see\nhttps://www.zope.org/).  In 2001, the Python Software Foundation (PSF, see\nhttps://www.python.org/psf/) was formed, a non-profit organization created\nspecifically to own Python-related Intellectual Property.  Zope Corporation is a\nsponsoring member of the PSF.\nAll Python releases are Open Source (see https://opensource.org/ for the Open\nSource Definition). Historically, most, but not all, Python releases have also\nbeen GPL-compatible; the table below summarizes the various releases.\n\n\nRelease\nDerived from\nYear\nOwner\nGPL compatible?\n\n\n\n0.9.0 thru 1.2\nn/a\n1991-1995\nCWI\nyes\n\n1.3 thru 1.5.2\n1.2\n1995-1999\nCNRI\nyes\n\n1.6\n1.5.2\n2000\nCNRI\nno\n\n2.0\n1.6\n2000\nBeOpen.com\nno\n\n1.6.1\n1.6\n2001\nCNRI\nno\n\n2.1\n2.0+1.6.1\n2001\nPSF\nno\n\n2.0.1\n2.0+1.6.1\n2001\nPSF\nyes\n\n2.1.1\n2.1+2.0.1\n2001\nPSF\nyes\n\n2.1.2\n2.1.1\n2002\nPSF\nyes\n\n2.1.3\n2.1.2\n2002\nPSF\nyes\n\n2.2 and above\n2.1.1\n2001-now\nPSF\nyes\n\n\n\n\nNote\nGPL-compatible doesnât mean that weâre distributing Python under the GPL.  All\nPython licenses, unlike the GPL, let you distribute a modified version without\nmaking your changes open source. The GPL-compatible licenses make it possible to\ncombine Python with other software that is released under the GPL; the others\ndonât.\n\nThanks to the many outside volunteers who have worked under Guidoâs direction to\nmake these releases possible.\n\n\nTerms and conditions for accessing or otherwise using PythonÂ¶\nPython software and documentation are licensed under the\nPSF License Agreement.\nStarting with Python 3.8.6, examples, recipes, and other code in\nthe documentation are dual licensed under the PSF License Agreement\nand the Zero-Clause BSD license.\nSome software incorporated into Python is under different licenses.\nThe licenses are listed with code falling under that license.\nSee Licenses and Acknowledgements for Incorporated Software for an incomplete list of these licenses.\n\nPSF LICENSE AGREEMENT FOR PYTHON 3.11.8Â¶\n1. This LICENSE AGREEMENT is between the Python Software Foundation (""PSF""), and\n   the Individual or Organization (""Licensee"") accessing and otherwise using Python\n   3.11.8 software in source or binary form and its associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, PSF hereby\n   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\n   analyze, test, perform and/or display publicly, prepare derivative works,\n   distribute, and otherwise use Python 3.11.8 alone or in any derivative\n   version, provided, however, that PSF's License Agreement and PSF's notice of\n   copyright, i.e., ""Copyright Â© 2001-2023 Python Software Foundation; All Rights\n   Reserved"" are retained in Python 3.11.8 alone or in any derivative version\n   prepared by Licensee.\n\n3. In the event Licensee prepares a derivative work that is based on or\n   incorporates Python 3.11.8 or any part thereof, and wants to make the\n   derivative work available to others as provided herein, then Licensee hereby\n   agrees to include in any such work a brief summary of the changes made to Python\n   3.11.8.\n\n4. PSF is making Python 3.11.8 available to Licensee on an ""AS IS"" basis.\n   PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\n   EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\n   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\n   USE OF PYTHON 3.11.8 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.11.8\n   FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\n   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.11.8, OR ANY DERIVATIVE\n   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n7. Nothing in this License Agreement shall be deemed to create any relationship\n   of agency, partnership, or joint venture between PSF and Licensee.  This License\n   Agreement does not grant permission to use PSF trademarks or trade name in a\n   trademark sense to endorse or promote products or services of Licensee, or any\n   third party.\n\n8. By copying, installing or otherwise using Python 3.11.8, Licensee agrees\n   to be bound by the terms and conditions of this License Agreement.\n\n\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0Â¶\nBEOPEN PYTHON OPEN SOURCE LICENSE AGREEMENT VERSION 1\n1. This LICENSE AGREEMENT is between BeOpen.com (""BeOpen""), having an office at\n   160 Saratoga Avenue, Santa Clara, CA 95051, and the Individual or Organization\n   (""Licensee"") accessing and otherwise using this software in source or binary\n   form and its associated documentation (""the Software"").\n\n2. Subject to the terms and conditions of this BeOpen Python License Agreement,\n   BeOpen hereby grants Licensee a non-exclusive, royalty-free, world-wide license\n   to reproduce, analyze, test, perform and/or display publicly, prepare derivative\n   works, distribute, and otherwise use the Software alone or in any derivative\n   version, provided, however, that the BeOpen Python License is retained in the\n   Software, alone or in any derivative version prepared by Licensee.\n\n3. BeOpen is making the Software available to Licensee on an ""AS IS"" basis.\n   BEOPEN MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF\n   EXAMPLE, BUT NOT LIMITATION, BEOPEN MAKES NO AND DISCLAIMS ANY REPRESENTATION OR\n   WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE\n   USE OF THE SOFTWARE WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n4. BEOPEN SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF THE SOFTWARE FOR\n   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF USING,\n   MODIFYING OR DISTRIBUTING THE SOFTWARE, OR ANY DERIVATIVE THEREOF, EVEN IF\n   ADVISED OF THE POSSIBILITY THEREOF.\n\n5. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n6. This License Agreement shall be governed by and interpreted in all respects\n   by the law of the State of California, excluding conflict of law provisions.\n   Nothing in this License Agreement shall be deemed to create any relationship of\n   agency, partnership, or joint venture between BeOpen and Licensee.  This License\n   Agreement does not grant permission to use BeOpen trademarks or trade names in a\n   trademark sense to endorse or promote products or services of Licensee, or any\n   third party.  As an exception, the ""BeOpen Python"" logos available at\n   http://www.pythonlabs.com/logos.html may be used according to the permissions\n   granted on that web page.\n\n7. By copying, installing or otherwise using the software, Licensee agrees to be\n   bound by the terms and conditions of this License Agreement.\n\n\n\n\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1Â¶\n1. This LICENSE AGREEMENT is between the Corporation for National Research\n   Initiatives, having an office at 1895 Preston White Drive, Reston, VA 20191\n   (""CNRI""), and the Individual or Organization (""Licensee"") accessing and\n   otherwise using Python 1.6.1 software in source or binary form and its\n   associated documentation.\n\n2. Subject to the terms and conditions of this License Agreement, CNRI hereby\n   grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce,\n   analyze, test, perform and/or display publicly, prepare derivative works,\n   distribute, and otherwise use Python 1.6.1 alone or in any derivative version,\n   provided, however, that CNRI's License Agreement and CNRI's notice of copyright,\n   i.e., ""Copyright Â© 1995-2001 Corporation for National Research Initiatives; All\n   Rights Reserved"" are retained in Python 1.6.1 alone or in any derivative version\n   prepared by Licensee.  Alternately, in lieu of CNRI's License Agreement,\n   Licensee may substitute the following text (omitting the quotes): ""Python 1.6.1\n   is made available subject to the terms and conditions in CNRI's License\n   Agreement.  This Agreement together with Python 1.6.1 may be located on the\n   internet using the following unique, persistent identifier (known as a handle):\n   1895.22/1013.  This Agreement may also be obtained from a proxy server on the\n   internet using the following URL: http://hdl.handle.net/1895.22/1013.""\n\n3. In the event Licensee prepares a derivative work that is based on or\n   incorporates Python 1.6.1 or any part thereof, and wants to make the derivative\n   work available to others as provided herein, then Licensee hereby agrees to\n   include in any such work a brief summary of the changes made to Python 1.6.1.\n\n4. CNRI is making Python 1.6.1 available to Licensee on an ""AS IS"" basis.  CNRI\n   MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF EXAMPLE,\n   BUT NOT LIMITATION, CNRI MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY\n   OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF\n   PYTHON 1.6.1 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\n\n5. CNRI SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 1.6.1 FOR\n   ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF\n   MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 1.6.1, OR ANY DERIVATIVE\n   THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\n\n6. This License Agreement will automatically terminate upon a material breach of\n   its terms and conditions.\n\n7. This License Agreement shall be governed by the federal intellectual property\n   law of the United States, including without limitation the federal copyright\n   law, and, to the extent such U.S. federal law does not apply, by the law of the\n   Commonwealth of Virginia, excluding Virginia's conflict of law provisions.\n   Notwithstanding the foregoing, with regard to derivative works based on Python\n   1.6.1 that incorporate non-separable material that was previously distributed\n   under the GNU General Public License (GPL), the law of the Commonwealth of\n   Virginia shall govern this License Agreement only as to issues arising under or\n   with respect to Paragraphs 4, 5, and 7 of this License Agreement.  Nothing in\n   this License Agreement shall be deemed to create any relationship of agency,\n   partnership, or joint venture between CNRI and Licensee.  This License Agreement\n   does not grant permission to use CNRI trademarks or trade name in a trademark\n   sense to endorse or promote products or services of Licensee, or any third\n   party.\n\n8. By clicking on the ""ACCEPT"" button where indicated, or by copying, installing\n   or otherwise using Python 1.6.1, Licensee agrees to be bound by the terms and\n   conditions of this License Agreement.\n\n\n\n\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2Â¶\nCopyright Â© 1991 - 1995, Stichting Mathematisch Centrum Amsterdam, The\nNetherlands.  All rights reserved.\n\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted, provided that\nthe above copyright notice appear in all copies and that both that copyright\nnotice and this permission notice appear in supporting documentation, and that\nthe name of Stichting Mathematisch Centrum or CWI not be used in advertising or\npublicity pertaining to distribution of the software without specific, written\nprior permission.\n\nSTICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO\nEVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE FOR ANY SPECIAL, INDIRECT\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,\nDATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS\nSOFTWARE.\n\n\n\n\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.11.8 DOCUMENTATIONÂ¶\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n\n\n\n\nLicenses and Acknowledgements for Incorporated SoftwareÂ¶\nThis section is an incomplete, but growing list of licenses and acknowledgements\nfor third-party software incorporated in the Python distribution.\n\nMersenne TwisterÂ¶\nThe _random module includes code based on a download from\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html. The following are\nthe verbatim comments from the original code:\nA C-program for MT19937, with initialization improved 2002/1/26.\nCoded by Takuji Nishimura and Makoto Matsumoto.\n\nBefore using, initialize the state by using init_genrand(seed)\nor init_by_array(init_key, key_length).\n\nCopyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n 1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n 2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n 3. The names of its contributors may not be used to endorse or promote\n    products derived from this software without specific prior written\n    permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\nEXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nAny feedback is very welcome.\nhttp://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\nemail: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n\n\n\n\nSocketsÂ¶\nThe socket module uses the functions, getaddrinfo(), and\ngetnameinfo(), which are coded in separate source files from the WIDE\nProject, https://www.wide.ad.jp/.\nCopyright (C) 1995, 1996, 1997, and 1998 WIDE Project.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n3. Neither the name of the project nor the names of its contributors\n   may be used to endorse or promote products derived from this software\n   without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n\n\n\nAsynchronous socket servicesÂ¶\nThe asynchat and asyncore modules contain the following notice:\nCopyright 1996 by Sam Rushing\n\n                        All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software and\nits documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of Sam\nRushing not be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior\npermission.\n\nSAM RUSHING DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,\nINCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN\nNO EVENT SHALL SAM RUSHING BE LIABLE FOR ANY SPECIAL, INDIRECT OR\nCONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS\nOF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN\nCONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n\n\nCookie managementÂ¶\nThe http.cookies module contains the following notice:\nCopyright 2000 by Timothy O'Malley <timo@alum.mit.edu>\n\n               All Rights Reserved\n\nPermission to use, copy, modify, and distribute this software\nand its documentation for any purpose and without fee is hereby\ngranted, provided that the above copyright notice appear in all\ncopies and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nTimothy O'Malley  not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\n\nTimothy O'Malley DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS\nSOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS, IN NO EVENT SHALL Timothy O'Malley BE LIABLE FOR\nANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n\n\n\nExecution tracingÂ¶\nThe trace module contains the following notice:\nportions copyright 2001, Autonomous Zones Industries, Inc., all rights...\nerr...  reserved and offered to the public under the terms of the\nPython 2.2 license.\nAuthor: Zooko O'Whielacronx\nhttp://zooko.com/\nmailto:zooko@zooko.com\n\nCopyright 2000, Mojam Media, Inc., all rights reserved.\nAuthor: Skip Montanaro\n\nCopyright 1999, Bioreason, Inc., all rights reserved.\nAuthor: Andrew Dalke\n\nCopyright 1995-1997, Automatrix, Inc., all rights reserved.\nAuthor: Skip Montanaro\n\nCopyright 1991-1995, Stichting Mathematisch Centrum, all rights reserved.\n\n\nPermission to use, copy, modify, and distribute this Python software and\nits associated documentation for any purpose without fee is hereby\ngranted, provided that the above copyright notice appears in all copies,\nand that both that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of neither Automatrix,\nBioreason or Mojam Media be used in advertising or publicity pertaining to\ndistribution of the software without specific, written prior permission.\n\n\n\n\nUUencode and UUdecode functionsÂ¶\nThe uu module contains the following notice:\nCopyright 1994 by Lance Ellinghouse\nCathedral City, California Republic, United States of America.\n                       All Rights Reserved\nPermission to use, copy, modify, and distribute this software and its\ndocumentation for any purpose and without fee is hereby granted,\nprovided that the above copyright notice appear in all copies and that\nboth that copyright notice and this permission notice appear in\nsupporting documentation, and that the name of Lance Ellinghouse\nnot be used in advertising or publicity pertaining to distribution\nof the software without specific, written prior permission.\nLANCE ELLINGHOUSE DISCLAIMS ALL WARRANTIES WITH REGARD TO\nTHIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS, IN NO EVENT SHALL LANCE ELLINGHOUSE CENTRUM BE LIABLE\nFOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT\nOF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nModified by Jack Jansen, CWI, July 1995:\n- Use binascii module to do the actual line-by-line conversion\n  between ascii and binary. This results in a 1000-fold speedup. The C\n  version is still 5 times faster, though.\n- Arguments more compliant with Python standard\n\n\n\n\nXML Remote Procedure CallsÂ¶\nThe xmlrpc.client module contains the following notice:\n    The XML-RPC client interface is\n\nCopyright (c) 1999-2002 by Secret Labs AB\nCopyright (c) 1999-2002 by Fredrik Lundh\n\nBy obtaining, using, and/or copying this software and/or its\nassociated documentation, you agree that you have read, understood,\nand will comply with the following terms and conditions:\n\nPermission to use, copy, modify, and distribute this software and\nits associated documentation for any purpose and without fee is\nhereby granted, provided that the above copyright notice appears in\nall copies, and that both that copyright notice and this permission\nnotice appear in supporting documentation, and that the name of\nSecret Labs AB or the author not be used in advertising or publicity\npertaining to distribution of the software without specific, written\nprior permission.\n\nSECRET LABS AB AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD\nTO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANT-\nABILITY AND FITNESS.  IN NO EVENT SHALL SECRET LABS AB OR THE AUTHOR\nBE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY\nDAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,\nWHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS\nACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE\nOF THIS SOFTWARE.\n\n\n\n\ntest_epollÂ¶\nThe test.test_epoll module contains the following notice:\nCopyright (c) 2001-2006 Twisted Matrix Laboratories.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n""Software""), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nSelect kqueueÂ¶\nThe select module contains the following notice for the kqueue\ninterface:\nCopyright (c) 2000 Doug White, 2006 James Knight, 2007 Christian Heimes\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n\n\n\nSipHash24Â¶\nThe file Python/pyhash.c contains Marek Majkowskiâ implementation of\nDan Bernsteinâs SipHash24 algorithm. It contains the following note:\n<MIT License>\nCopyright (c) 2013  Marek Majkowski <marek@popcount.org>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n</MIT License>\n\nOriginal location:\n   https://github.com/majek/csiphash/\n\nSolution inspired by code from:\n   Samuel Neves (supercop/crypto_auth/siphash24/little)\n   djb (supercop/crypto_auth/siphash24/little2)\n   Jean-Philippe Aumasson (https://131002.net/siphash/siphash24.c)\n\n\n\n\nstrtod and dtoaÂ¶\nThe file Python/dtoa.c, which supplies C functions dtoa and\nstrtod for conversion of C doubles to and from strings, is derived\nfrom the file of the same name by David M. Gay, currently available\nfrom https://web.archive.org/web/20220517033456/http://www.netlib.org/fp/dtoa.c.\nThe original file, as retrieved on March 16, 2009, contains the following\ncopyright and licensing notice:\n/****************************************************************\n *\n * The author of this software is David M. Gay.\n *\n * Copyright (c) 1991, 2000, 2001 by Lucent Technologies.\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose without fee is hereby granted, provided that this entire notice\n * is included in all copies of any software which is or includes a copy\n * or modification of this software and in all copies of the supporting\n * documentation for such software.\n *\n * THIS SOFTWARE IS BEING PROVIDED ""AS IS"", WITHOUT ANY EXPRESS OR IMPLIED\n * WARRANTY.  IN PARTICULAR, NEITHER THE AUTHOR NOR LUCENT MAKES ANY\n * REPRESENTATION OR WARRANTY OF ANY KIND CONCERNING THE MERCHANTABILITY\n * OF THIS SOFTWARE OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\n *\n ***************************************************************/\n\n\n\n\nOpenSSLÂ¶\nThe modules hashlib, posix, ssl, crypt use\nthe OpenSSL library for added performance if made available by the\noperating system. Additionally, the Windows and macOS installers for\nPython may include a copy of the OpenSSL libraries, so we include a copy\nof the OpenSSL license here. For the OpenSSL 3.0 release,\nand later releases derived from that, the Apache License v2 applies:\n                              Apache License\n                        Version 2.0, January 2004\n                     https://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   ""License"" shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   ""Licensor"" shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   ""Legal Entity"" shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   ""control"" means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   ""You"" (or ""Your"") shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   ""Source"" form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   ""Object"" form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   ""Work"" shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   ""Derivative Works"" shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   ""Contribution"" shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, ""submitted""\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as ""Not a Contribution.""\n\n   ""Contributor"" shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a ""NOTICE"" text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an ""AS IS"" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\n\n\n\nexpatÂ¶\nThe pyexpat extension is built using an included copy of the expat\nsources unless the build is configured --with-system-expat:\nCopyright (c) 1998, 1999, 2000 Thai Open Source Software Center Ltd\n                               and Clark Cooper\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n""Software""), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\nlibffiÂ¶\nThe _ctypes extension is built using an included copy of the libffi\nsources unless the build is configured --with-system-libffi:\nCopyright (c) 1996-2008  Red Hat, Inc and others.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n``Software''), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n\n\n\n\nzlibÂ¶\nThe zlib extension is built using an included copy of the zlib\nsources if the zlib version found on the system is too old to be\nused for the build:\nCopyright (C) 1995-2011 Jean-loup Gailly and Mark Adler\n\nThis software is provided 'as-is', without any express or implied\nwarranty.  In no event will the authors be held liable for any damages\narising from the use of this software.\n\nPermission is granted to anyone to use this software for any purpose,\nincluding commercial applications, and to alter it and redistribute it\nfreely, subject to the following restrictions:\n\n1. The origin of this software must not be misrepresented; you must not\n   claim that you wrote the original software. If you use this software\n   in a product, an acknowledgment in the product documentation would be\n   appreciated but is not required.\n\n2. Altered source versions must be plainly marked as such, and must not be\n   misrepresented as being the original software.\n\n3. This notice may not be removed or altered from any source distribution.\n\nJean-loup Gailly        Mark Adler\njloup@gzip.org          madler@alumni.caltech.edu\n\n\n\n\ncfuhashÂ¶\nThe implementation of the hash table used by the tracemalloc is based\non the cfuhash project:\nCopyright (c) 2005 Don Owens\nAll rights reserved.\n\nThis code is released under the BSD license:\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n  * Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n  * Redistributions in binary form must reproduce the above\n    copyright notice, this list of conditions and the following\n    disclaimer in the documentation and/or other materials provided\n    with the distribution.\n\n  * Neither the name of the author nor the names of its\n    contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\nCOPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\nSTRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\nOF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\nlibmpdecÂ¶\nThe _decimal module is built using an included copy of the libmpdec\nlibrary unless the build is configured --with-system-libmpdec:\nCopyright (c) 2008-2020 Stefan Krah. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ""AS IS"" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS\nOR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\nHOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGE.\n\n\n\n\nW3C C14N test suiteÂ¶\nThe C14N 2.0 test suite in the test package\n(Lib/test/xmltestdata/c14n-20/) was retrieved from the W3C website at\nhttps://www.w3.org/TR/xml-c14n2-testcases/ and is distributed under the\n3-clause BSD license:\nCopyright (c) 2013 W3C(R) (MIT, ERCIM, Keio, Beihang),\nAll Rights Reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions\nare met:\n\n* Redistributions of works must retain the original copyright notice,\n  this list of conditions and the following disclaimer.\n* Redistributions in binary form must reproduce the original copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n* Neither the name of the W3C nor the names of its contributors may be\n  used to endorse or promote products derived from this work without\n  specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n\n\nAudioopÂ¶\nThe audioop module uses the code base in g771.c file of the SoX project.\nhttps://sourceforge.net/projects/sox/files/sox/12.17.7/sox-12.17.7.tar.gz\n\nThis source code is a product of Sun Microsystems, Inc. and is provided\nfor unrestricted use.  Users may copy or modify this source code without\ncharge.\nSUN SOURCE CODE IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING\nTHE WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR\nPURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.\nSun source code is provided with no support and without any obligation on\nthe part of Sun Microsystems, Inc. to assist in its use, correction,\nmodification or enhancement.\nSUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE\nINFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY THIS SOFTWARE\nOR ANY PART THEREOF.\nIn no event will Sun Microsystems, Inc. be liable for any lost revenue\nor profits or other special, indirect and consequential damages, even if\nSun has been advised of the possibility of such damages.\nSun Microsystems, Inc.\n2550 Garcia Avenue\nMountain View, California  94043\n\n\n\nasyncioÂ¶\nParts of the asyncio module are incorporated from\nuvloop 0.16,\nwhich is distributed under the MIT license:\nCopyright (c) 2015-2021 MagicStack Inc.  http://magic.io\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n""Software""), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nHistory and License\nHistory of the software\nTerms and conditions for accessing or otherwise using Python\nPSF LICENSE AGREEMENT FOR PYTHON 3.11.8\nBEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0\nCNRI LICENSE AGREEMENT FOR PYTHON 1.6.1\nCWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2\nZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON 3.11.8 DOCUMENTATION\n\n\nLicenses and Acknowledgements for Incorporated Software\nMersenne Twister\nSockets\nAsynchronous socket services\nCookie management\nExecution tracing\nUUencode and UUdecode functions\nXML Remote Procedure Calls\ntest_epoll\nSelect kqueue\nSipHash24\nstrtod and dtoa\nOpenSSL\nexpat\nlibffi\nzlib\ncfuhash\nlibmpdec\nW3C C14N test suite\nAudioop\nasyncio\n\n\n\n\n\n\n\nPrevious topic\nCopyright\n\n\nNext topic\nDistributing Python Modules (Legacy version)\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nHistory and License\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/whatsnew/3.11.html,Whatâs New In Python 3.11 — Python 3.11.8 documentation,"Editor, Pablo Galindo Salgado,. This article explains the new features in Python 3.11, compared to 3.10. Python 3.11 was released on October 24, 2022. For full details, see the changelog. Summary â...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nWhatâs New In Python 3.11\nSummary â Release highlights\nNew Features\nPEP 657: Fine-grained error locations in tracebacks\nPEP 654: Exception Groups and except*\nPEP 678: Exceptions can be enriched with notes\nWindows py.exe launcher improvements\n\n\nNew Features Related to Type Hints\nPEP 646: Variadic generics\nPEP 655: Marking individual TypedDict items as required or not-required\nPEP 673: Self type\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\nPEP 563 may not be the future\n\n\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nasyncio\ncontextlib\ndataclasses\ndatetime\nenum\nfcntl\nfractions\nfunctools\nhashlib\nIDLE and idlelib\ninspect\nlocale\nlogging\nmath\noperator\nos\npathlib\nre\nshutil\nsocket\nsqlite3\nstring\nsys\nsysconfig\ntempfile\nthreading\ntime\ntkinter\ntraceback\ntyping\nunicodedata\nunittest\nvenv\nwarnings\nzipfile\n\n\nOptimizations\nFaster CPython\nFaster Startup\nFrozen imports / Static code objects\n\n\nFaster Runtime\nCheaper, lazy Python frames\nInlined Python function calls\nPEP 659: Specializing Adaptive Interpreter\n\n\nMisc\nFAQ\nHow should I write my code to utilize these speedups?\nWill CPython 3.11 use more memory?\nI donât see any speedups in my workload. Why?\nIs there a JIT compiler?\n\n\nAbout\n\n\nCPython bytecode changes\nNew opcodes\nReplaced opcodes\nChanged/removed opcodes\n\n\nDeprecated\nLanguage/Builtins\nModules\nStandard Library\n\n\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.11\nDeprecated\nPending Removal in Python 3.12\nRemoved\n\n\nNotable Changes in 3.11.4\ntarfile\n\n\nNotable Changes in 3.11.5\nOpenSSL\n\n\n\n\n\n\n\nPrevious topic\nWhatâs New in Python\n\n\nNext topic\nWhatâs New In Python 3.10\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nWhatâs New in Python »\nWhatâs New In Python 3.11\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nWhatâs New In Python 3.11Â¶\n\nEditor:\nPablo Galindo Salgado\n\n\nThis article explains the new features in Python 3.11, compared to 3.10.\nPython 3.11 was released on October 24, 2022.\nFor full details, see the changelog.\n\nSummary â Release highlightsÂ¶\n\nPython 3.11 is between 10-60% faster than Python 3.10.\nOn average, we measured a 1.25x speedup on the standard benchmark suite.\nSee Faster CPython for details.\n\nNew syntax features:\n\nPEP 654: Exception Groups and except*\n\nNew built-in features:\n\nPEP 678: Exceptions can be enriched with notes\n\nNew standard library modules:\n\nPEP 680: tomllib â\nSupport for parsing TOML in the Standard Library\n\nInterpreter improvements:\n\nPEP 657: Fine-grained error locations in tracebacks\nNew -P command line option and PYTHONSAFEPATH environment\nvariable to disable automatically prepending potentially unsafe paths to sys.path\n\nNew typing features:\n\nPEP 646: Variadic generics\nPEP 655: Marking individual TypedDict items as required or not-required\nPEP 673: Self type\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\n\nImportant deprecations, removals and restrictions:\n\nPEP 594:\nMany legacy standard library modules have been deprecated and will be removed in Python 3.13\nPEP 624:\nPy_UNICODE encoder APIs have been removed\nPEP 670:\nMacros converted to static inline functions\n\n\n\nNew FeaturesÂ¶\n\nPEP 657: Fine-grained error locations in tracebacksÂ¶\nWhen printing tracebacks, the interpreter will now point to the exact expression\nthat caused the error, instead of just the line. For example:\nTraceback (most recent call last):\n  File ""distance.py"", line 11, in <module>\n    print(manhattan_distance(p1, p2))\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File ""distance.py"", line 6, in manhattan_distance\n    return abs(point_1.x - point_2.x) + abs(point_1.y - point_2.y)\n                           ^^^^^^^^^\nAttributeError: 'NoneType' object has no attribute 'x'\n\n\nPrevious versions of the interpreter would point to just the line, making it\nambiguous which object was None. These enhanced errors can also be helpful\nwhen dealing with deeply nested dict objects and multiple function calls:\nTraceback (most recent call last):\n  File ""query.py"", line 37, in <module>\n    magic_arithmetic('foo')\n  File ""query.py"", line 18, in magic_arithmetic\n    return add_counts(x) / 25\n           ^^^^^^^^^^^^^\n  File ""query.py"", line 24, in add_counts\n    return 25 + query_user(user1) + query_user(user2)\n                ^^^^^^^^^^^^^^^^^\n  File ""query.py"", line 32, in query_user\n    return 1 + query_count(db, response['a']['b']['c']['user'], retry=True)\n                               ~~~~~~~~~~~~~~~~~~^^^^^\nTypeError: 'NoneType' object is not subscriptable\n\n\nAs well as complex arithmetic expressions:\nTraceback (most recent call last):\n  File ""calculation.py"", line 54, in <module>\n    result = (x / y / z) * (a / b / c)\n              ~~~~~~^~~\nZeroDivisionError: division by zero\n\n\nAdditionally, the information used by the enhanced traceback feature\nis made available via a general API, that can be used to correlate\nbytecode instructions with source code location.\nThis information can be retrieved using:\n\nThe codeobject.co_positions() method in Python.\nThe PyCode_Addr2Location() function in the C API.\n\nSee PEP 657 for more details. (Contributed by Pablo Galindo, Batuhan Taskaya\nand Ammar Askar in bpo-43950.)\n\nNote\nThis feature requires storing column positions in Code Objects,\nwhich may result in a small increase in interpreter memory usage\nand disk usage for compiled Python files.\nTo avoid storing the extra information\nand deactivate printing the extra traceback information,\nuse the -X no_debug_ranges command line option\nor the PYTHONNODEBUGRANGES environment variable.\n\n\n\nPEP 654: Exception Groups and except*Â¶\nPEP 654 introduces language features that enable a program\nto raise and handle multiple unrelated exceptions simultaneously.\nThe builtin types ExceptionGroup and BaseExceptionGroup\nmake it possible to group exceptions and raise them together,\nand the new except* syntax generalizes\nexcept to match subgroups of exception groups.\nSee PEP 654 for more details.\n(Contributed by Irit Katriel in bpo-45292. PEP written by\nIrit Katriel, Yury Selivanov and Guido van Rossum.)\n\n\nPEP 678: Exceptions can be enriched with notesÂ¶\nThe add_note() method is added to BaseException.\nIt can be used to enrich exceptions with context information\nthat is not available at the time when the exception is raised.\nThe added notes appear in the default traceback.\nSee PEP 678 for more details.\n(Contributed by Irit Katriel in bpo-45607.\nPEP written by Zac Hatfield-Dodds.)\n\n\nWindows py.exe launcher improvementsÂ¶\nThe copy of the Python Launcher for Windows included with Python 3.11 has been significantly\nupdated. It now supports company/tag syntax as defined in PEP 514 using the\n-V:<company>/<tag> argument instead of the limited -<major>.<minor>.\nThis allows launching distributions other than PythonCore,\nthe one hosted on python.org.\nWhen using -V: selectors, either company or tag can be omitted, but all\ninstalls will be searched. For example, -V:OtherPython/ will select the\nâbestâ tag registered for OtherPython, while -V:3.11 or -V:/3.11\nwill select the âbestâ distribution with tag 3.11.\nWhen using the legacy -<major>, -<major>.<minor>,\n-<major>-<bitness> or -<major>.<minor>-<bitness> arguments,\nall existing behaviour should be preserved from past versions,\nand only releases from PythonCore will be selected.\nHowever, the -64 suffix now implies ânot 32-bitâ (not necessarily x86-64),\nas there are multiple supported 64-bit platforms.\n32-bit runtimes are detected by checking the runtimeâs tag for a -32 suffix.\nAll releases of Python since 3.5 have included this in their 32-bit builds.\n\n\n\nNew Features Related to Type HintsÂ¶\nThis section covers major changes affecting PEP 484 type hints and\nthe typing module.\n\nPEP 646: Variadic genericsÂ¶\nPEP 484 previously introduced TypeVar, enabling creation\nof generics parameterised with a single type. PEP 646 adds\nTypeVarTuple, enabling parameterisation\nwith an arbitrary number of types. In other words,\na TypeVarTuple is a variadic type variable,\nenabling variadic generics.\nThis enables a wide variety of use cases.\nIn particular, it allows the type of array-like structures\nin numerical computing libraries such as NumPy and TensorFlow to be\nparameterised with the array shape. Static type checkers will now\nbe able to catch shape-related bugs in code that uses these libraries.\nSee PEP 646 for more details.\n(Contributed by Matthew Rahtz in bpo-43224, with contributions by\nSerhiy Storchaka and Jelle Zijlstra. PEP written by Mark Mendoza, Matthew\nRahtz, Pradeep Kumar Srinivasan, and Vincent Siles.)\n\n\nPEP 655: Marking individual TypedDict items as required or not-requiredÂ¶\nRequired and NotRequired provide a\nstraightforward way to mark whether individual items in a\nTypedDict must be present. Previously, this was only possible\nusing inheritance.\nAll fields are still required by default,\nunless the total parameter is set to False,\nin which case all fields are still not-required by default.\nFor example, the following specifies a TypedDict\nwith one required and one not-required key:\nclass Movie(TypedDict):\n   title: str\n   year: NotRequired[int]\n\nm1: Movie = {""title"": ""Black Panther"", ""year"": 2018}  # OK\nm2: Movie = {""title"": ""Star Wars""}  # OK (year is not required)\nm3: Movie = {""year"": 2022}  # ERROR (missing required field title)\n\n\nThe following definition is equivalent:\nclass Movie(TypedDict, total=False):\n   title: Required[str]\n   year: int\n\n\nSee PEP 655 for more details.\n(Contributed by David Foster and Jelle Zijlstra in bpo-47087. PEP\nwritten by David Foster.)\n\n\nPEP 673: Self typeÂ¶\nThe new Self annotation provides a simple and intuitive\nway to annotate methods that return an instance of their class. This\nbehaves the same as the TypeVar-based approach\nspecified in PEP 484,\nbut is more concise and easier to follow.\nCommon use cases include alternative constructors provided as\nclassmethods,\nand __enter__() methods that return self:\nclass MyLock:\n    def __enter__(self) -> Self:\n        self.lock()\n        return self\n\n    ...\n\nclass MyInt:\n    @classmethod\n    def fromhex(cls, s: str) -> Self:\n        return cls(int(s, 16))\n\n    ...\n\n\nSelf can also be used to annotate method parameters\nor attributes of the same type as their enclosing class.\nSee PEP 673 for more details.\n(Contributed by James Hilton-Balfe in bpo-46534. PEP written by\nPradeep Kumar Srinivasan and James Hilton-Balfe.)\n\n\nPEP 675: Arbitrary literal string typeÂ¶\nThe new LiteralString annotation may be used to indicate\nthat a function parameter can be of any literal string type. This allows\na function to accept arbitrary literal string types, as well as strings\ncreated from other literal strings. Type checkers can then\nenforce that sensitive functions, such as those that execute SQL\nstatements or shell commands, are called only with static arguments,\nproviding protection against injection attacks.\nFor example, a SQL query function could be annotated as follows:\ndef run_query(sql: LiteralString) -> ...\n    ...\n\ndef caller(\n    arbitrary_string: str,\n    query_string: LiteralString,\n    table_name: LiteralString,\n) -> None:\n    run_query(""SELECT * FROM students"")       # ok\n    run_query(query_string)                   # ok\n    run_query(""SELECT * FROM "" + table_name)  # ok\n    run_query(arbitrary_string)               # type checker error\n    run_query(                                # type checker error\n        f""SELECT * FROM students WHERE name = {arbitrary_string}""\n    )\n\n\nSee PEP 675 for more details.\n(Contributed by Jelle Zijlstra in bpo-47088. PEP written by Pradeep\nKumar Srinivasan and Graham Bleaney.)\n\n\nPEP 681: Data class transformsÂ¶\ndataclass_transform may be used to\ndecorate a class, metaclass, or a function that is itself a decorator.\nThe presence of @dataclass_transform() tells a static type checker that the\ndecorated object performs runtime âmagicâ that transforms a class,\ngiving it dataclass-like behaviors.\nFor example:\n# The create_model decorator is defined by a library.\n@typing.dataclass_transform()\ndef create_model(cls: Type[T]) -> Type[T]:\n    cls.__init__ = ...\n    cls.__eq__ = ...\n    cls.__ne__ = ...\n    return cls\n\n# The create_model decorator can now be used to create new model classes:\n@create_model\nclass CustomerModel:\n    id: int\n    name: str\n\nc = CustomerModel(id=327, name=""Eric Idle"")\n\n\nSee PEP 681 for more details.\n(Contributed by Jelle Zijlstra in gh-91860. PEP written by\nErik De Bonte and Eric Traut.)\n\n\nPEP 563 may not be the futureÂ¶\nPEP 563 Postponed Evaluation of Annotations\n(the from __future__ import annotations future statement)\nthat was originally planned for release in Python 3.10\nhas been put on hold indefinitely.\nSee this message from the Steering Council\nfor more information.\n\n\n\nOther Language ChangesÂ¶\n\nStarred unpacking expressions can now be used in for statements.\n(See bpo-46725 for more details.)\nAsynchronous comprehensions are now allowed\ninside comprehensions in asynchronous functions.\nOuter comprehensions implicitly become asynchronous in this case.\n(Contributed by Serhiy Storchaka in bpo-33346.)\nA TypeError is now raised instead of an AttributeError in\nwith statements and contextlib.ExitStack.enter_context()\nfor objects that do not support the context manager protocol,\nand in async with statements and\ncontextlib.AsyncExitStack.enter_async_context()\nfor objects not supporting the asynchronous context manager protocol.\n(Contributed by Serhiy Storchaka in bpo-12022 and bpo-44471.)\nAdded object.__getstate__(), which provides the default\nimplementation of the __getstate__() method. copying\nand pickleing instances of subclasses of builtin types\nbytearray, set, frozenset,\ncollections.OrderedDict, collections.deque,\nweakref.WeakSet, and datetime.tzinfo now copies and\npickles instance attributes implemented as slots.\nThis change has an unintended side effect: It trips up a small minority\nof existing Python projects not expecting object.__getstate__() to\nexist. See the later comments on gh-70766 for discussions of what\nworkarounds such code may need.\n(Contributed by Serhiy Storchaka in bpo-26579.)\n\n\nAdded a -P command line option\nand a PYTHONSAFEPATH environment variable,\nwhich disable the automatic prepending to sys.path\nof the scriptâs directory when running a script,\nor the current directory when using -c and -m.\nThis ensures only stdlib and installed modules\nare picked up by import,\nand avoids unintentionally or maliciously shadowing modules\nwith those in a local (and typically user-writable) directory.\n(Contributed by Victor Stinner in gh-57684.)\nA ""z"" option was added to the Format Specification Mini-Language that\ncoerces negative to positive zero after rounding to the format precision.\nSee PEP 682 for more details.\n(Contributed by John Belmonte in gh-90153.)\nBytes are no longer accepted on sys.path.  Support broke sometime\nbetween Python 3.2 and 3.6, with no one noticing until after Python 3.10.0\nwas released. In addition, bringing back support would be problematic due to\ninteractions between -b and sys.path_importer_cache when\nthere is a mixture of str and bytes keys.\n(Contributed by Thomas Grainger in gh-91181.)\n\n\n\nOther CPython Implementation ChangesÂ¶\n\nThe special methods __complex__() for complex\nand __bytes__() for bytes are implemented to support\nthe typing.SupportsComplex and typing.SupportsBytes protocols.\n(Contributed by Mark Dickinson and Donghee Na in bpo-24234.)\nsiphash13 is added as a new internal hashing algorithm.\nIt has similar security properties as siphash24,\nbut it is slightly faster for long inputs.\nstr, bytes, and some other types\nnow use it as the default algorithm for hash().\nPEP 552 hash-based .pyc files\nnow use siphash13 too.\n(Contributed by Inada Naoki in bpo-29410.)\nWhen an active exception is re-raised by a raise statement with no parameters,\nthe traceback attached to this exception is now always sys.exc_info()[1].__traceback__.\nThis means that changes made to the traceback in the current except clause are\nreflected in the re-raised exception.\n(Contributed by Irit Katriel in bpo-45711.)\nThe interpreter stateâs representation of handled exceptions\n(aka exc_info or _PyErr_StackItem)\nnow only has the exc_value field; exc_type and exc_traceback\nhave been removed, as they can be derived from exc_value.\n(Contributed by Irit Katriel in bpo-45711.)\nA new command line option, AppendPath,\nhas been added for the Windows installer.\nIt behaves similarly to PrependPath,\nbut appends the install and scripts directories instead of prepending them.\n(Contributed by Bastian Neuburger in bpo-44934.)\nThe PyConfig.module_search_paths_set field must now be set to 1 for\ninitialization to use PyConfig.module_search_paths to initialize\nsys.path. Otherwise, initialization will recalculate the path and replace\nany values added to module_search_paths.\nThe output of the --help option now fits in 50 lines/80 columns.\nInformation about Python environment variables\nand -X options is now available using the respective\n--help-env and --help-xoptions flags,\nand with the new --help-all.\n(Contributed by Ãric Araujo in bpo-46142.)\nConverting between int and str in bases other than 2\n(binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal)\nnow raises a ValueError if the number of digits in string form is\nabove a limit to avoid potential denial of service attacks due to the\nalgorithmic complexity. This is a mitigation for CVE-2020-10735.\nThis limit can be configured or disabled by environment variable, command\nline flag, or sys APIs. See the integer string conversion\nlength limitation documentation.  The default limit\nis 4300 digits in string form.\n\n\n\nNew ModulesÂ¶\n\ntomllib: For parsing TOML.\nSee PEP 680 for more details.\n(Contributed by Taneli Hukkinen in bpo-40059.)\nwsgiref.types:\nWSGI-specific types for static type checking.\n(Contributed by Sebastian Rittau in bpo-42012.)\n\n\n\nImproved ModulesÂ¶\n\nasyncioÂ¶\n\nAdded the TaskGroup class,\nan asynchronous context manager\nholding a group of tasks that will wait for all of them upon exit.\nFor new code this is recommended over using\ncreate_task() and gather() directly.\n(Contributed by Yury Selivanov and others in gh-90908.)\nAdded timeout(), an asynchronous context manager for\nsetting a timeout on asynchronous operations. For new code this is\nrecommended over using wait_for() directly.\n(Contributed by Andrew Svetlov in gh-90927.)\nAdded the Runner class, which exposes the machinery\nused by run().\n(Contributed by Andrew Svetlov in gh-91218.)\nAdded the Barrier class to the synchronization\nprimitives in the asyncio library, and the related\nBrokenBarrierError exception.\n(Contributed by Yves Duprat and Andrew Svetlov in gh-87518.)\nAdded keyword argument all_errors to asyncio.loop.create_connection()\nso that multiple connection errors can be raised as an ExceptionGroup.\nAdded the asyncio.StreamWriter.start_tls() method for\nupgrading existing stream-based connections to TLS.\n(Contributed by Ian Good in bpo-34975.)\nAdded raw datagram socket functions to the event loop:\nsock_sendto(),\nsock_recvfrom() and\nsock_recvfrom_into().\nThese have implementations in SelectorEventLoop and\nProactorEventLoop.\n(Contributed by Alex GrÃ¶nholm in bpo-46805.)\nAdded cancelling() and\nuncancel() methods to Task.\nThese are primarily intended for internal use,\nnotably by TaskGroup.\n\n\n\ncontextlibÂ¶\n\nAdded non parallel-safe chdir() context manager to change\nthe current working directory and then restore it on exit. Simple wrapper\naround chdir(). (Contributed by Filipe LaÃ­ns in bpo-25625)\n\n\n\ndataclassesÂ¶\n\nChange field default mutability check, allowing only defaults which are\nhashable instead of any object which is not an instance of\ndict, list or set. (Contributed by Eric V. Smith in\nbpo-44674.)\n\n\n\ndatetimeÂ¶\n\nAdd datetime.UTC, a convenience alias for\ndatetime.timezone.utc. (Contributed by Kabir Kwatra in gh-91973.)\ndatetime.date.fromisoformat(), datetime.time.fromisoformat() and\ndatetime.datetime.fromisoformat() can now be used to parse most ISO 8601\nformats (barring only those that support fractional hours and minutes).\n(Contributed by Paul Ganssle in gh-80010.)\n\n\n\nenumÂ¶\n\nRenamed EnumMeta to EnumType\n(EnumMeta kept as an alias).\nAdded StrEnum,\nwith members that can be used as (and must be) strings.\nAdded ReprEnum,\nwhich only modifies the __repr__() of members\nwhile returning their literal values (rather than names)\nfor __str__() and __format__()\n(used by str(), format() and f-strings).\nChanged Enum.__format__() (the default for\nformat(), str.format() and f-strings) to always produce\nthe same result as Enum.__str__():  for enums inheriting from\nReprEnum it will be the memberâs value; for all other enums\nit will be the enum and member name (e.g. Color.RED).\nAdded a new boundary class parameter to Flag enums\nand the FlagBoundary enum with its options,\nto control how to handle out-of-range flag values.\nAdded the verify() enum decorator\nand the EnumCheck enum with its options,\nto check enum classes against several specific constraints.\nAdded the member() and nonmember() decorators,\nto ensure the decorated object is/is not converted to an enum member.\nAdded the property() decorator,\nwhich works like property() except for enums.\nUse this instead of types.DynamicClassAttribute().\nAdded the global_enum() enum decorator,\nwhich adjusts __repr__() and __str__()\nto show values as members of their module rather than the enum class.\nFor example, 're.ASCII' for the ASCII member\nof re.RegexFlag rather than 'RegexFlag.ASCII'.\nEnhanced Flag to support\nlen(), iteration and in/not in on its members.\nFor example, the following now works:\nlen(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)\nChanged Enum and Flag\nso that members are now defined\nbefore __init_subclass__() is called;\ndir() now includes methods, etc., from mixed-in data types.\nChanged Flag\nto only consider primary values (power of two) canonical\nwhile composite values (3, 6, 10, etc.) are considered aliases;\ninverted flags are coerced to their positive equivalent.\n\n\n\nfcntlÂ¶\n\nOn FreeBSD, the F_DUP2FD and F_DUP2FD_CLOEXEC flags respectively\nare supported, the former equals to dup2 usage while the latter set\nthe FD_CLOEXEC flag in addition.\n\n\n\nfractionsÂ¶\n\nSupport PEP 515-style initialization of Fraction from\nstring.  (Contributed by Sergey B Kirpichev in bpo-44258.)\nFraction now implements an __int__ method, so\nthat an isinstance(some_fraction, typing.SupportsInt) check passes.\n(Contributed by Mark Dickinson in bpo-44547.)\n\n\n\nfunctoolsÂ¶\n\nfunctools.singledispatch() now supports types.UnionType\nand typing.Union as annotations to the dispatch argument.:\n>>> from functools import singledispatch\n>>> @singledispatch\n... def fun(arg, verbose=False):\n...     if verbose:\n...         print(""Let me just say,"", end="" "")\n...     print(arg)\n...\n>>> @fun.register\n... def _(arg: int | float, verbose=False):\n...     if verbose:\n...         print(""Strength in numbers, eh?"", end="" "")\n...     print(arg)\n...\n>>> from typing import Union\n>>> @fun.register\n... def _(arg: Union[list, set], verbose=False):\n...     if verbose:\n...         print(""Enumerate this:"")\n...     for i, elem in enumerate(arg):\n...         print(i, elem)\n...\n\n\n(Contributed by Yurii Karabas in bpo-46014.)\n\n\n\n\nhashlibÂ¶\n\nhashlib.blake2b() and hashlib.blake2s() now prefer libb2\nover Pythonâs vendored copy.\n(Contributed by Christian Heimes in bpo-47095.)\nThe internal _sha3 module with SHA3 and SHAKE algorithms now uses\ntiny_sha3 instead of the Keccak Code Package to reduce code and binary\nsize. The hashlib module prefers optimized SHA3 and SHAKE\nimplementations from OpenSSL. The change affects only installations without\nOpenSSL support.\n(Contributed by Christian Heimes in bpo-47098.)\nAdd hashlib.file_digest(), a helper function for efficient hashing\nof files or file-like objects.\n(Contributed by Christian Heimes in gh-89313.)\n\n\n\nIDLE and idlelibÂ¶\n\nApply syntax highlighting to .pyi files. (Contributed by Alex\nWaygood and Terry Jan Reedy in bpo-45447.)\nInclude prompts when saving Shell with inputs and outputs.\n(Contributed by Terry Jan Reedy in gh-95191.)\n\n\n\ninspectÂ¶\n\nAdd getmembers_static() to return all members without\ntriggering dynamic lookup via the descriptor protocol. (Contributed by\nWeipeng Hong in bpo-30533.)\nAdd ismethodwrapper()\nfor checking if the type of an object is a MethodWrapperType.\n(Contributed by Hakan Ãelik in bpo-29418.)\nChange the frame-related functions in the inspect module to return new\nFrameInfo and Traceback class instances\n(backwards compatible with the previous named tuple-like interfaces)\nthat includes the extended PEP 657 position information (end\nline number, column and end column). The affected functions are:\n\ninspect.getframeinfo()\ninspect.getouterframes()\ninspect.getinnerframes(),\ninspect.stack()\ninspect.trace()\n\n(Contributed by Pablo Galindo in gh-88116.)\n\n\n\n\nlocaleÂ¶\n\nAdd locale.getencoding() to get the current locale encoding. It is similar to\nlocale.getpreferredencoding(False) but ignores the\nPython UTF-8 Mode.\n\n\n\nloggingÂ¶\n\nAdded getLevelNamesMapping()\nto return a mapping from logging level names (e.g. 'CRITICAL')\nto the values of their corresponding Logging Levels (e.g. 50, by default).\n(Contributed by Andrei Kulakovin in gh-88024.)\nAdded a createSocket() method\nto SysLogHandler, to match\nSocketHandler.createSocket().\nIt is called automatically during handler initialization\nand when emitting an event, if there is no active socket.\n(Contributed by Kirill Pinchuk in gh-88457.)\n\n\n\nmathÂ¶\n\nAdd math.exp2(): return 2 raised to the power of x.\n(Contributed by Gideon Mitchell in bpo-45917.)\nAdd math.cbrt(): return the cube root of x.\n(Contributed by Ajith Ramachandran in bpo-44357.)\nThe behaviour of two math.pow() corner cases was changed, for\nconsistency with the IEEE 754 specification. The operations\nmath.pow(0.0, -math.inf) and math.pow(-0.0, -math.inf) now return\ninf. Previously they raised ValueError. (Contributed by Mark\nDickinson in bpo-44339.)\nThe math.nan value is now always available.\n(Contributed by Victor Stinner in bpo-46917.)\n\n\n\noperatorÂ¶\n\nA new function operator.call has been added, such that\noperator.call(obj, *args, **kwargs) == obj(*args, **kwargs).\n(Contributed by Antony Lee in bpo-44019.)\n\n\n\nosÂ¶\n\nOn Windows, os.urandom() now uses BCryptGenRandom(),\ninstead of CryptGenRandom() which is deprecated.\n(Contributed by Donghee Na in bpo-44611.)\n\n\n\npathlibÂ¶\n\nglob() and rglob() return only\ndirectories if pattern ends with a pathname components separator:\nsep or altsep.\n(Contributed by Eisuke Kawasima in bpo-22276 and bpo-33392.)\n\n\n\nreÂ¶\n\nAtomic grouping ((?>...)) and possessive quantifiers (*+, ++,\n?+, {m,n}+) are now supported in regular expressions.\n(Contributed by Jeffrey C. Jacobs and Serhiy Storchaka in bpo-433030.)\n\n\n\nshutilÂ¶\n\nAdd optional parameter dir_fd in shutil.rmtree().\n(Contributed by Serhiy Storchaka in bpo-46245.)\n\n\n\nsocketÂ¶\n\nAdd CAN Socket support for NetBSD.\n(Contributed by Thomas Klausner in bpo-30512.)\ncreate_connection() has an option to raise, in case of\nfailure to connect, an ExceptionGroup containing all errors\ninstead of only raising the last error.\n(Contributed by Irit Katriel in bpo-29980.)\n\n\n\nsqlite3Â¶\n\nYou can now disable the authorizer by passing None to\nset_authorizer().\n(Contributed by Erlend E. Aasland in bpo-44491.)\nCollation name create_collation() can now\ncontain any Unicode character.  Collation names with invalid characters\nnow raise UnicodeEncodeError instead of sqlite3.ProgrammingError.\n(Contributed by Erlend E. Aasland in bpo-44688.)\nsqlite3 exceptions now include the SQLite extended error code as\nsqlite_errorcode and the SQLite error name as\nsqlite_errorname.\n(Contributed by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland in\nbpo-16379 and bpo-24139.)\nAdd setlimit() and\ngetlimit() to sqlite3.Connection for\nsetting and getting SQLite limits by connection basis.\n(Contributed by Erlend E. Aasland in bpo-45243.)\nsqlite3 now sets sqlite3.threadsafety based on the default\nthreading mode the underlying SQLite library has been compiled with.\n(Contributed by Erlend E. Aasland in bpo-45613.)\nsqlite3 C callbacks now use unraisable exceptions if callback\ntracebacks are enabled. Users can now register an\nunraisable hook handler to improve their debug\nexperience.\n(Contributed by Erlend E. Aasland in bpo-45828.)\nFetch across rollback no longer raises InterfaceError.\nInstead we leave it to the SQLite library to handle these cases.\n(Contributed by Erlend E. Aasland in bpo-44092.)\nAdd serialize() and\ndeserialize() to sqlite3.Connection for\nserializing and deserializing databases.\n(Contributed by Erlend E. Aasland in bpo-41930.)\nAdd create_window_function() to\nsqlite3.Connection for creating aggregate window functions.\n(Contributed by Erlend E. Aasland in bpo-34916.)\nAdd blobopen() to sqlite3.Connection.\nsqlite3.Blob allows incremental I/O operations on blobs.\n(Contributed by Aviv Palivoda and Erlend E. Aasland in bpo-24905.)\n\n\n\nstringÂ¶\n\nAdd get_identifiers()\nand is_valid() to string.Template,\nwhich respectively return all valid placeholders,\nand whether any invalid placeholders are present.\n(Contributed by Ben Kehoe in gh-90465.)\n\n\n\nsysÂ¶\n\nsys.exc_info() now derives the type and traceback fields\nfrom the value (the exception instance), so when an exception is\nmodified while it is being handled, the changes are reflected in\nthe results of subsequent calls to exc_info().\n(Contributed by Irit Katriel in bpo-45711.)\nAdd sys.exception() which returns the active exception instance\n(equivalent to sys.exc_info()[1]).\n(Contributed by Irit Katriel in bpo-46328.)\nAdd the sys.flags.safe_path flag.\n(Contributed by Victor Stinner in gh-57684.)\n\n\n\nsysconfigÂ¶\n\nThree new installation schemes\n(posix_venv, nt_venv and venv) were added and are used when Python\ncreates new virtual environments or when it is running from a virtual\nenvironment.\nThe first two schemes (posix_venv and nt_venv) are OS-specific\nfor non-Windows and Windows, the venv is essentially an alias to one of\nthem according to the OS Python runs on.\nThis is useful for downstream distributors who modify\nsysconfig.get_preferred_scheme().\nThird party code that creates new virtual environments should use the new\nvenv installation scheme to determine the paths, as does venv.\n(Contributed by Miro HronÄok in bpo-45413.)\n\n\n\ntempfileÂ¶\n\nSpooledTemporaryFile objects now fully implement the methods\nof io.BufferedIOBase or io.TextIOBase\n(depending on file mode).\nThis lets them work correctly with APIs that expect file-like objects,\nsuch as compression modules.\n(Contributed by Carey Metcalfe in gh-70363.)\n\n\n\nthreadingÂ¶\n\nOn Unix, if the sem_clockwait() function is available in the C library\n(glibc 2.30 and newer), the threading.Lock.acquire() method now uses\nthe monotonic clock (time.CLOCK_MONOTONIC) for the timeout, rather\nthan using the system clock (time.CLOCK_REALTIME), to not be affected\nby system clock changes.\n(Contributed by Victor Stinner in bpo-41710.)\n\n\n\ntimeÂ¶\n\nOn Unix, time.sleep() now uses the clock_nanosleep() or\nnanosleep() function, if available, which has a resolution of 1 nanosecond\n(10-9 seconds), rather than using select() which has a resolution\nof 1 microsecond (10-6 seconds).\n(Contributed by Benjamin SzÅke and Victor Stinner in bpo-21302.)\nOn Windows 8.1 and newer, time.sleep() now uses a waitable timer based\non high-resolution timers\nwhich has a resolution of 100 nanoseconds (10-7 seconds). Previously,\nit had a resolution of 1 millisecond (10-3 seconds).\n(Contributed by Benjamin SzÅke, Donghee Na, Eryk Sun and Victor Stinner in bpo-21302 and bpo-45429.)\n\n\n\ntkinterÂ¶\n\nAdded method info_patchlevel() which returns the exact version of\nthe Tcl library as a named tuple similar to sys.version_info.\n(Contributed by Serhiy Storchaka in gh-91827.)\n\n\n\ntracebackÂ¶\n\nAdd traceback.StackSummary.format_frame_summary() to allow users\nto override which frames appear in the traceback, and how they are\nformatted.\n(Contributed by Ammar Askar in bpo-44569.)\nAdd traceback.TracebackException.print(), which prints the\nformatted TracebackException instance to a file.\n(Contributed by Irit Katriel in bpo-33809.)\n\n\n\ntypingÂ¶\nFor major changes, see New Features Related to Type Hints.\n\nAdd typing.assert_never() and typing.Never.\ntyping.assert_never() is useful for asking a type checker to confirm\nthat a line of code is not reachable. At runtime, it raises an\nAssertionError.\n(Contributed by Jelle Zijlstra in gh-90633.)\nAdd typing.reveal_type(). This is useful for asking a type checker\nwhat type it has inferred for a given expression. At runtime it prints\nthe type of the received value.\n(Contributed by Jelle Zijlstra in gh-90572.)\nAdd typing.assert_type(). This is useful for asking a type checker\nto confirm that the type it has inferred for a given expression matches\nthe given type. At runtime it simply returns the received value.\n(Contributed by Jelle Zijlstra in gh-90638.)\ntyping.TypedDict types can now be generic. (Contributed by\nSamodya Abeysiriwardane in gh-89026.)\nNamedTuple types can now be generic.\n(Contributed by Serhiy Storchaka in bpo-43923.)\nAllow subclassing of typing.Any. This is useful for avoiding\ntype checker errors related to highly dynamic class, such as mocks.\n(Contributed by Shantanu Jain in gh-91154.)\nThe typing.final() decorator now sets the __final__ attributed on\nthe decorated object.\n(Contributed by Jelle Zijlstra in gh-90500.)\nThe typing.get_overloads() function can be used for introspecting\nthe overloads of a function. typing.clear_overloads() can be used\nto clear all registered overloads of a function.\n(Contributed by Jelle Zijlstra in gh-89263.)\nThe __init__() method of Protocol subclasses\nis now preserved. (Contributed by Adrian Garcia Badarasco in gh-88970.)\nThe representation of empty tuple types (Tuple[()]) is simplified.\nThis affects introspection, e.g. get_args(Tuple[()]) now evaluates\nto () instead of ((),).\n(Contributed by Serhiy Storchaka in gh-91137.)\nLoosen runtime requirements for type annotations by removing the callable\ncheck in the private typing._type_check function. (Contributed by\nGregory Beauregard in gh-90802.)\ntyping.get_type_hints() now supports evaluating strings as forward\nreferences in PEP 585 generic aliases.\n(Contributed by Niklas Rosenstein in gh-85542.)\ntyping.get_type_hints() no longer adds Optional\nto parameters with None as a default. (Contributed by Nikita Sobolev\nin gh-90353.)\ntyping.get_type_hints() now supports evaluating bare stringified\nClassVar annotations. (Contributed by Gregory Beauregard\nin gh-90711.)\ntyping.no_type_check() no longer modifies external classes and functions.\nIt also now correctly marks classmethods as not to be type checked. (Contributed\nby Nikita Sobolev in gh-90729.)\n\n\n\nunicodedataÂ¶\n\nThe Unicode database has been updated to version 14.0.0.\n(Contributed by Benjamin Peterson in bpo-45190).\n\n\n\nunittestÂ¶\n\nAdded methods enterContext() and\nenterClassContext() of class\nTestCase, method\nenterAsyncContext() of\nclass IsolatedAsyncioTestCase and function\nunittest.enterModuleContext().\n(Contributed by Serhiy Storchaka in bpo-45046.)\n\n\n\nvenvÂ¶\n\nWhen new Python virtual environments are created, the venv\nsysconfig installation scheme is used\nto determine the paths inside the environment.\nWhen Python runs in a virtual environment, the same installation scheme\nis the default.\nThat means that downstream distributors can change the default sysconfig install\nscheme without changing behavior of virtual environments.\nThird party code that also creates new virtual environments should do the same.\n(Contributed by Miro HronÄok in bpo-45413.)\n\n\n\nwarningsÂ¶\n\nwarnings.catch_warnings() now accepts arguments for warnings.simplefilter(),\nproviding a more concise way to locally ignore warnings or convert them to errors.\n(Contributed by Zac Hatfield-Dodds in bpo-47074.)\n\n\n\nzipfileÂ¶\n\nAdded support for specifying member name encoding for reading metadata\nin a ZipFileâs directory and file headers.\n(Contributed by Stephen J. Turnbull and Serhiy Storchaka in bpo-28080.)\nAdded ZipFile.mkdir()\nfor creating new directories inside ZIP archives.\n(Contributed by Sam Ezeh in gh-49083.)\nAdded stem, suffix\nand suffixes to zipfile.Path.\n(Contributed by Miguel Brito in gh-88261.)\n\n\n\n\nOptimizationsÂ¶\nThis section covers specific optimizations independent of the\nFaster CPython project, which is covered in its own section.\n\nThe compiler now optimizes simple\nprintf-style % formatting on string literals\ncontaining only the format codes %s, %r and %a and makes it as\nfast as a corresponding f-string expression.\n(Contributed by Serhiy Storchaka in bpo-28307.)\nInteger division (//) is better tuned for optimization by compilers.\nIt is now around 20% faster on x86-64 when dividing an int\nby a value smaller than 2**30.\n(Contributed by Gregory P. Smith and Tim Peters in gh-90564.)\nsum() is now nearly 30% faster for integers smaller than 2**30.\n(Contributed by Stefan Behnel in gh-68264.)\nResizing lists is streamlined for the common case,\nspeeding up list.append() by â15%\nand simple list comprehensions by up to 20-30%\n(Contributed by Dennis Sweeney in gh-91165.)\nDictionaries donât store hash values when all keys are Unicode objects,\ndecreasing dict size.\nFor example, sys.getsizeof(dict.fromkeys(""abcdefg""))\nis reduced from 352 bytes to 272 bytes (23% smaller) on 64-bit platforms.\n(Contributed by Inada Naoki in bpo-46845.)\nUsing asyncio.DatagramProtocol is now orders of magnitude faster\nwhen transferring large files over UDP,\nwith speeds over 100 times higher for a â60 MiB file.\n(Contributed by msoxzw in gh-91487.)\nmath functions comb() and perm() are now\nâ10 times faster for large arguments (with a larger speedup for larger k).\n(Contributed by Serhiy Storchaka in bpo-37295.)\nThe statistics functions mean(),\nvariance() and stdev() now consume\niterators in one pass rather than converting them to a list first.\nThis is twice as fast and can save substantial memory.\n(Contributed by Raymond Hettinger in gh-90415.)\nunicodedata.normalize()\nnow normalizes pure-ASCII strings in constant time.\n(Contributed by Donghee Na in bpo-44987.)\n\n\n\nFaster CPythonÂ¶\nCPython 3.11 is an average of\n25% faster\nthan CPython 3.10 as measured with the\npyperformance benchmark suite,\nwhen compiled with GCC on Ubuntu Linux.\nDepending on your workload, the overall speedup could be 10-60%.\nThis project focuses on two major areas in Python:\nFaster Startup and Faster Runtime.\nOptimizations not covered by this project are listed separately under\nOptimizations.\n\nFaster StartupÂ¶\n\nFrozen imports / Static code objectsÂ¶\nPython caches bytecode in the __pycache__\ndirectory to speed up module loading.\nPreviously in 3.10, Python module execution looked like this:\nRead __pycache__ -> Unmarshal -> Heap allocated code object -> Evaluate\n\n\nIn Python 3.11, the core modules essential for Python startup are âfrozenâ.\nThis means that their Code Objects (and bytecode)\nare statically allocated by the interpreter.\nThis reduces the steps in module execution process to:\nStatically allocated code object -> Evaluate\n\n\nInterpreter startup is now 10-15% faster in Python 3.11. This has a big\nimpact for short-running programs using Python.\n(Contributed by Eric Snow, Guido van Rossum and Kumar Aditya in many issues.)\n\n\n\nFaster RuntimeÂ¶\n\nCheaper, lazy Python framesÂ¶\nPython frames, holding execution information,\nare created whenever Python calls a Python function.\nThe following are new frame optimizations:\n\nStreamlined the frame creation process.\nAvoided memory allocation by generously re-using frame space on the C stack.\nStreamlined the internal frame struct to contain only essential information.\nFrames previously held extra debugging and memory management information.\n\nOld-style frame objects\nare now created only when requested by debuggers\nor by Python introspection functions such as sys._getframe() and\ninspect.currentframe(). For most user code, no frame objects are\ncreated at all. As a result, nearly all Python functions calls have sped\nup significantly. We measured a 3-7% speedup in pyperformance.\n(Contributed by Mark Shannon in bpo-44590.)\n\n\nInlined Python function callsÂ¶\nDuring a Python function call, Python will call an evaluating C function to\ninterpret that functionâs code. This effectively limits pure Python recursion to\nwhatâs safe for the C stack.\nIn 3.11, when CPython detects Python code calling another Python function,\nit sets up a new frame, and âjumpsâ to the new code inside the new frame. This\navoids calling the C interpreting function altogether.\nMost Python function calls now consume no C stack space, speeding them up.\nIn simple recursive functions like fibonacci or\nfactorial, we observed a 1.7x speedup. This also means recursive functions\ncan recurse significantly deeper\n(if the user increases the recursion limit with sys.setrecursionlimit()).\nWe measured a 1-3% improvement in pyperformance.\n(Contributed by Pablo Galindo and Mark Shannon in bpo-45256.)\n\n\nPEP 659: Specializing Adaptive InterpreterÂ¶\nPEP 659 is one of the key parts of the Faster CPython project. The general\nidea is that while Python is a dynamic language, most code has regions where\nobjects and types rarely change. This concept is known as type stability.\nAt runtime, Python will try to look for common patterns and type stability\nin the executing code. Python will then replace the current operation with a\nmore specialized one. This specialized operation uses fast paths available only\nto those use cases/types, which generally outperform their generic\ncounterparts. This also brings in another concept called inline caching, where\nPython caches the results of expensive operations directly in the\nbytecode.\nThe specializer will also combine certain common instruction pairs into one\nsuperinstruction, reducing the overhead during execution.\nPython will only specialize\nwhen it sees code that is âhotâ (executed multiple times). This prevents Python\nfrom wasting time on run-once code. Python can also de-specialize when code is\ntoo dynamic or when the use changes. Specialization is attempted periodically,\nand specialization attempts are not too expensive,\nallowing specialization to adapt to new circumstances.\n(PEP written by Mark Shannon, with ideas inspired by Stefan Brunthaler.\nSee PEP 659 for more information. Implementation by Mark Shannon and Brandt\nBucher, with additional help from Irit Katriel and Dennis Sweeney.)\n\n\nOperation\nForm\nSpecialization\nOperation speedup\n(up to)\nContributor(s)\n\n\n\nBinary\noperations\nx + x\nx - x\nx * x\n\nBinary add, multiply and subtract for common types\nsuch as int, float and str\ntake custom fast paths for their underlying types.\n10%\nMark Shannon,\nDonghee Na,\nBrandt Bucher,\nDennis Sweeney\n\nSubscript\na[i]\nSubscripting container types such as list,\ntuple and dict directly index\nthe underlying data structures.\nSubscripting custom __getitem__()\nis also inlined similar to Inlined Python function calls.\n\n10-25%\nIrit Katriel,\nMark Shannon\n\nStore\nsubscript\na[i] = z\nSimilar to subscripting specialization above.\n10-25%\nDennis Sweeney\n\nCalls\nf(arg)\nC(arg)\n\nCalls to common builtin (C) functions and types such\nas len() and str directly call their\nunderlying C version. This avoids going through the\ninternal calling convention.\n20%\nMark Shannon,\nKen Jin\n\nLoad\nglobal\nvariable\nprint\nlen\n\nThe objectâs index in the globals/builtins namespace\nis cached. Loading globals and builtins require\nzero namespace lookups.\n[1]\nMark Shannon\n\nLoad\nattribute\no.attr\nSimilar to loading global variables. The attributeâs\nindex inside the class/objectâs namespace is cached.\nIn most cases, attribute loading will require zero\nnamespace lookups.\n[2]\nMark Shannon\n\nLoad\nmethods for\ncall\no.meth()\nThe actual address of the method is cached. Method\nloading now has no namespace lookups â even for\nclasses with long inheritance chains.\n10-20%\nKen Jin,\nMark Shannon\n\nStore\nattribute\no.attr = z\nSimilar to load attribute optimization.\n2%\nin pyperformance\nMark Shannon\n\nUnpack\nSequence\n*seq\nSpecialized for common containers such as\nlist and tuple.\nAvoids internal calling convention.\n8%\nBrandt Bucher\n\n\n\n\n\n[1]\nA similar optimization already existed since Python 3.8.\n3.11 specializes for more forms and reduces some overhead.\n\n\n[2]\nA similar optimization already existed since Python 3.10.\n3.11 specializes for more forms. Furthermore, all attribute loads should\nbe sped up by bpo-45947.\n\n\n\n\n\nMiscÂ¶\n\nObjects now require less memory due to lazily created object namespaces.\nTheir namespace dictionaries now also share keys more freely.\n(Contributed Mark Shannon in bpo-45340 and bpo-40116.)\nâZero-costâ exceptions are implemented, eliminating the cost\nof try statements when no exception is raised.\n(Contributed by Mark Shannon in bpo-40222.)\nA more concise representation of exceptions in the interpreter reduced the\ntime required for catching an exception by about 10%.\n(Contributed by Irit Katriel in bpo-45711.)\nreâs regular expression matching engine has been partially refactored,\nand now uses computed gotos (or âthreaded codeâ) on supported platforms. As a\nresult, Python 3.11 executes the pyperformance regular expression benchmarks up to 10%\nfaster than Python 3.10.\n(Contributed by Brandt Bucher in gh-91404.)\n\n\n\nFAQÂ¶\n\nHow should I write my code to utilize these speedups?Â¶\nWrite Pythonic code that follows common best practices;\nyou donât have to change your code.\nThe Faster CPython project optimizes for common code patterns we observe.\n\n\nWill CPython 3.11 use more memory?Â¶\nMaybe not; we donât expect memory use to exceed 20% higher than 3.10.\nThis is offset by memory optimizations for frame objects and object\ndictionaries as mentioned above.\n\n\nI donât see any speedups in my workload. Why?Â¶\nCertain code wonât have noticeable benefits. If your code spends most of\nits time on I/O operations, or already does most of its\ncomputation in a C extension library like NumPy, there wonât be significant\nspeedups. This project currently benefits pure-Python workloads the most.\nFurthermore, the pyperformance figures are a geometric mean. Even within the\npyperformance benchmarks, certain benchmarks have slowed down slightly, while\nothers have sped up by nearly 2x!\n\n\nIs there a JIT compiler?Â¶\nNo. Weâre still exploring other optimizations.\n\n\n\nAboutÂ¶\nFaster CPython explores optimizations for CPython. The main team is\nfunded by Microsoft to work on this full-time. Pablo Galindo Salgado is also\nfunded by Bloomberg LP to work on the project part-time. Finally, many\ncontributors are volunteers from the community.\n\n\n\nCPython bytecode changesÂ¶\nThe bytecode now contains inline cache entries,\nwhich take the form of the newly-added CACHE instructions.\nMany opcodes expect to be followed by an exact number of caches,\nand instruct the interpreter to skip over them at runtime.\nPopulated caches can look like arbitrary instructions,\nso great care should be taken when reading or modifying\nraw, adaptive bytecode containing quickened data.\n\nNew opcodesÂ¶\n\nASYNC_GEN_WRAP, RETURN_GENERATOR and SEND,\nused in generators and co-routines.\nCOPY_FREE_VARS,\nwhich avoids needing special caller-side code for closures.\nJUMP_BACKWARD_NO_INTERRUPT,\nfor use in certain loops where handling interrupts is undesirable.\nMAKE_CELL, to create Cell Objects.\nCHECK_EG_MATCH  and  PREP_RERAISE_STAR,\nto handle the new exception groups and except*\nadded in PEP 654.\nPUSH_EXC_INFO, for use in exception handlers.\nRESUME, a no-op,\nfor internal tracing, debugging and optimization checks.\n\n\n\nReplaced opcodesÂ¶\n\n\nReplaced Opcode(s)\nNew Opcode(s)\nNotes\n\n\n\n\nBINARY_*\nINPLACE_*\n\n\nBINARY_OP\nReplaced all numeric binary/in-place\nopcodes with a single opcode\n\n\nCALL_FUNCTION\nCALL_FUNCTION_KW\nCALL_METHOD\n\n\n\nCALL\nKW_NAMES\nPRECALL\nPUSH_NULL\n\n\nDecouples argument shifting for methods\nfrom handling of keyword arguments;\nallows better specialization of calls\n\n\nDUP_TOP\nDUP_TOP_TWO\nROT_TWO\nROT_THREE\nROT_FOUR\nROT_N\n\n\n\nCOPY\nSWAP\n\n\nStack manipulation instructions\n\n\nJUMP_IF_NOT_EXC_MATCH\n\n\n\nCHECK_EXC_MATCH\n\n\nNow performs check but doesnât jump\n\n\nJUMP_ABSOLUTE\nPOP_JUMP_IF_FALSE\nPOP_JUMP_IF_TRUE\n\n\n\nJUMP_BACKWARD\nPOP_JUMP_BACKWARD_IF_*\nPOP_JUMP_FORWARD_IF_*\n\n\nSee [3];\nTRUE, FALSE,\nNONE and NOT_NONE variants\nfor each direction\n\n\nSETUP_WITH\nSETUP_ASYNC_WITH\n\n\nBEFORE_WITH\nwith block setup\n\n\n\n\n\n[3]\nAll jump opcodes are now relative, including the\nexisting JUMP_IF_TRUE_OR_POP and JUMP_IF_FALSE_OR_POP.\nThe argument is now an offset from the current instruction\nrather than an absolute location.\n\n\n\n\nChanged/removed opcodesÂ¶\n\nChanged MATCH_CLASS and MATCH_KEYS\nto no longer push an additional boolean value to indicate success/failure.\nInstead, None is pushed on failure\nin place of the tuple of extracted values.\nChanged opcodes that work with exceptions to reflect them\nnow being represented as one item on the stack instead of three\n(see gh-89874).\nRemoved COPY_DICT_WITHOUT_KEYS, GEN_START,\nPOP_BLOCK, SETUP_FINALLY and YIELD_FROM.\n\n\n\n\nDeprecatedÂ¶\nThis section lists Python APIs that have been deprecated in Python 3.11.\nDeprecated C APIs are listed separately.\n\nLanguage/BuiltinsÂ¶\n\nChaining classmethod descriptors (introduced in bpo-19072)\nis now deprecated.  It can no longer be used to wrap other descriptors\nsuch as property.  The core design of this feature was flawed\nand caused a number of downstream problems.  To âpass-throughâ a\nclassmethod, consider using the __wrapped__ attribute\nthat was added in Python 3.10.\n(Contributed by Raymond Hettinger in gh-89519.)\nOctal escapes in string and bytes literals with values larger than 0o377\n(255 in decimal) now produce a DeprecationWarning.\nIn a future Python version, they will raise a SyntaxWarning and\neventually a SyntaxError.\n(Contributed by Serhiy Storchaka in gh-81548.)\nThe delegation of int() to __trunc__() is now deprecated.\nCalling int(a) when type(a) implements __trunc__() but not\n__int__() or __index__() now raises\na DeprecationWarning.\n(Contributed by Zackery Spytz in bpo-44977.)\n\n\n\nModulesÂ¶\n\nPEP 594 led to the deprecations of the following modules\nslated for removal in Python 3.13:\n\n\naifc\nchunk\nmsilib\npipes\ntelnetlib\n\naudioop\ncrypt\nnis\nsndhdr\nuu\n\ncgi\nimghdr\nnntplib\nspwd\nxdrlib\n\ncgitb\nmailcap\nossaudiodev\nsunau\n\n\n\n\n(Contributed by Brett Cannon in bpo-47061 and Victor Stinner in\ngh-68966.)\n\nThe asynchat, asyncore and  smtpd modules have been\ndeprecated since at least Python 3.6. Their documentation and deprecation\nwarnings have now been updated to note they will be removed in Python 3.12.\n(Contributed by Hugo van Kemenade in bpo-47022.)\nThe lib2to3 package and 2to3 tool\nare now deprecated and may not be able to parse Python 3.10 or newer.\nSee PEP 617, introducing the new PEG parser, for details.\n(Contributed by Victor Stinner in bpo-40360.)\nUndocumented modules sre_compile, sre_constants\nand sre_parse are now deprecated.\n(Contributed by Serhiy Storchaka in bpo-47152.)\n\n\n\nStandard LibraryÂ¶\n\nThe following have been deprecated in configparser since Python 3.2.\nTheir deprecation warnings have now been updated to note they will be removed\nin Python 3.12:\n\nthe configparser.SafeConfigParser class\nthe configparser.ParsingError.filename property\nthe configparser.RawConfigParser.readfp() method\n\n(Contributed by Hugo van Kemenade in bpo-45173.)\n\nconfigparser.LegacyInterpolation has been deprecated in the docstring\nsince Python 3.2, and is not listed in the configparser documentation.\nIt now emits a DeprecationWarning and will be removed\nin Python 3.13. Use configparser.BasicInterpolation or\nconfigparser.ExtendedInterpolation instead.\n(Contributed by Hugo van Kemenade in bpo-46607.)\nThe older set of importlib.resources functions were deprecated\nin favor of the replacements added in Python 3.9\nand will be removed in a future Python version,\ndue to not supporting resources located within package subdirectories:\n\nimportlib.resources.contents()\nimportlib.resources.is_resource()\nimportlib.resources.open_binary()\nimportlib.resources.open_text()\nimportlib.resources.read_binary()\nimportlib.resources.read_text()\nimportlib.resources.path()\n\n\nThe locale.getdefaultlocale() function is deprecated and will be\nremoved in Python 3.15. Use locale.setlocale(),\nlocale.getpreferredencoding(False) and\nlocale.getlocale() functions instead.\n(Contributed by Victor Stinner in gh-90817.)\nThe locale.resetlocale() function is deprecated and will be\nremoved in Python 3.13. Use locale.setlocale(locale.LC_ALL, """") instead.\n(Contributed by Victor Stinner in gh-90817.)\nStricter rules will now be applied for numerical group references\nand group names in regular expressions.\nOnly sequences of ASCII digits will now be accepted as a numerical reference,\nand the group name in bytes patterns and replacement strings\ncan only contain ASCII letters, digits and underscores.\nFor now, a deprecation warning is raised for syntax violating these rules.\n(Contributed by Serhiy Storchaka in gh-91760.)\nIn the re module, the re.template() function\nand the corresponding re.TEMPLATE and re.T flags\nare deprecated, as they were undocumented and lacked an obvious purpose.\nThey will be removed in Python 3.13.\n(Contributed by Serhiy Storchaka and Miro HronÄok in gh-92728.)\nturtle.settiltangle() has been deprecated since Python 3.1;\nit now emits a deprecation warning and will be removed in Python 3.13. Use\nturtle.tiltangle() instead (it was earlier incorrectly marked\nas deprecated, and its docstring is now corrected).\n(Contributed by Hugo van Kemenade in bpo-45837.)\ntyping.Text, which exists solely to provide compatibility support\nbetween Python 2 and Python 3 code, is now deprecated. Its removal is\ncurrently unplanned, but users are encouraged to use str instead\nwherever possible.\n(Contributed by Alex Waygood in gh-92332.)\nThe keyword argument syntax for constructing typing.TypedDict types\nis now deprecated. Support will be removed in Python 3.13. (Contributed by\nJingchen Ye in gh-90224.)\nwebbrowser.MacOSX is deprecated and will be removed in Python 3.13.\nIt is untested, undocumented, and not used by webbrowser itself.\n(Contributed by Donghee Na in bpo-42255.)\nThe behavior of returning a value from a TestCase and\nIsolatedAsyncioTestCase test methods (other than the\ndefault None value) is now deprecated.\nDeprecated the following not-formally-documented unittest functions,\nscheduled for removal in Python 3.13:\n\nunittest.findTestCases()\nunittest.makeSuite()\nunittest.getTestCaseNames()\n\nUse TestLoader methods instead:\n\nunittest.TestLoader.loadTestsFromModule()\nunittest.TestLoader.loadTestsFromTestCase()\nunittest.TestLoader.getTestCaseNames()\n\n(Contributed by Erlend E. Aasland in bpo-5846.)\n\nunittest.TestProgram.usageExit() is marked deprecated, to be removed\nin 3.13.\n(Contributed by Carlos DamÃ¡zio in gh-67048.)\n\n\n\n\nPending Removal in Python 3.12Â¶\nThe following Python APIs have been deprecated in earlier Python releases,\nand will be removed in Python 3.12.\nC APIs pending removal are\nlisted separately.\n\nThe asynchat module\nThe asyncore module\nThe entire distutils package\nThe imp module\nThe typing.io namespace\nThe typing.re namespace\ncgi.log()\nimportlib.find_loader()\nimportlib.abc.Loader.module_repr()\nimportlib.abc.MetaPathFinder.find_module()\nimportlib.abc.PathEntryFinder.find_loader()\nimportlib.abc.PathEntryFinder.find_module()\nimportlib.machinery.BuiltinImporter.find_module()\nimportlib.machinery.BuiltinLoader.module_repr()\nimportlib.machinery.FileFinder.find_loader()\nimportlib.machinery.FileFinder.find_module()\nimportlib.machinery.FrozenImporter.find_module()\nimportlib.machinery.FrozenLoader.module_repr()\nimportlib.machinery.PathFinder.find_module()\nimportlib.machinery.WindowsRegistryFinder.find_module()\nimportlib.util.module_for_loader()\nimportlib.util.set_loader_wrapper()\nimportlib.util.set_package_wrapper()\npkgutil.ImpImporter\npkgutil.ImpLoader\npathlib.Path.link_to()\nsqlite3.enable_shared_cache()\nsqlite3.OptimizedUnicode()\nPYTHONTHREADDEBUG environment variable\nThe following deprecated aliases in unittest:\n\n\n\nDeprecated alias\nMethod Name\nDeprecated in\n\n\n\nfailUnless\nassertTrue()\n3.1\n\nfailIf\nassertFalse()\n3.1\n\nfailUnlessEqual\nassertEqual()\n3.1\n\nfailIfEqual\nassertNotEqual()\n3.1\n\nfailUnlessAlmostEqual\nassertAlmostEqual()\n3.1\n\nfailIfAlmostEqual\nassertNotAlmostEqual()\n3.1\n\nfailUnlessRaises\nassertRaises()\n3.1\n\nassert_\nassertTrue()\n3.2\n\nassertEquals\nassertEqual()\n3.2\n\nassertNotEquals\nassertNotEqual()\n3.2\n\nassertAlmostEquals\nassertAlmostEqual()\n3.2\n\nassertNotAlmostEquals\nassertNotAlmostEqual()\n3.2\n\nassertRegexpMatches\nassertRegex()\n3.2\n\nassertRaisesRegexp\nassertRaisesRegex()\n3.2\n\nassertNotRegexpMatches\nassertNotRegex()\n3.5\n\n\n\n\n\n\n\n\nRemovedÂ¶\nThis section lists Python APIs that have been removed in Python 3.11.\nRemoved C APIs are listed separately.\n\nRemoved the @asyncio.coroutine() decorator\nenabling legacy generator-based coroutines to be compatible with\nasync / await code.\nThe function has been deprecated since Python 3.8 and the removal was\ninitially scheduled for Python 3.10. Use async def instead.\n(Contributed by Illia Volochii in bpo-43216.)\nRemoved asyncio.coroutines.CoroWrapper used for wrapping legacy\ngenerator-based coroutine objects in the debug mode.\n(Contributed by Illia Volochii in bpo-43216.)\nDue to significant security concerns, the reuse_address parameter of\nasyncio.loop.create_datagram_endpoint(), disabled in Python 3.9, is\nnow entirely removed. This is because of the behavior of the socket option\nSO_REUSEADDR in UDP.\n(Contributed by Hugo van Kemenade in bpo-45129.)\nRemoved the binhex module, deprecated in Python 3.9.\nAlso removed the related, similarly-deprecated binascii functions:\n\nbinascii.a2b_hqx()\nbinascii.b2a_hqx()\nbinascii.rlecode_hqx()\nbinascii.rldecode_hqx()\n\nThe binascii.crc_hqx() function remains available.\n(Contributed by Victor Stinner in bpo-45085.)\n\nRemoved the distutils bdist_msi command deprecated in Python 3.9.\nUse bdist_wheel (wheel packages) instead.\n(Contributed by Hugo van Kemenade in bpo-45124.)\nRemoved the __getitem__() methods of\nxml.dom.pulldom.DOMEventStream, wsgiref.util.FileWrapper\nand fileinput.FileInput, deprecated since Python 3.9.\n(Contributed by Hugo van Kemenade in bpo-45132.)\nRemoved the deprecated gettext functions\nlgettext(), ldgettext(),\nlngettext() and ldngettext().\nAlso removed the bind_textdomain_codeset() function,\nthe NullTranslations.output_charset() and\nNullTranslations.set_output_charset() methods,\nand the codeset parameter of translation() and install(),\nsince they are only used for the l*gettext() functions.\n(Contributed by Donghee Na and Serhiy Storchaka in bpo-44235.)\nRemoved from the inspect module:\n\nThe getargspec() function, deprecated since Python 3.0;\nuse inspect.signature() or inspect.getfullargspec() instead.\nThe formatargspec() function, deprecated since Python 3.5;\nuse the inspect.signature() function\nor the inspect.Signature object directly.\nThe undocumented Signature.from_builtin()\nand Signature.from_function() methods, deprecated since Python 3.5;\nuse the Signature.from_callable()\nmethod instead.\n\n(Contributed by Hugo van Kemenade in bpo-45320.)\n\nRemoved the __class_getitem__() method\nfrom pathlib.PurePath,\nbecause it was not used and added by mistake in previous versions.\n(Contributed by Nikita Sobolev in bpo-46483.)\nRemoved the MailmanProxy class in the smtpd module,\nas it is unusable without the external mailman package.\n(Contributed by Donghee Na in bpo-35800.)\nRemoved the deprecated split() method of _tkinter.TkappType.\n(Contributed by Erlend E. Aasland in bpo-38371.)\nRemoved namespace package support from unittest discovery.\nIt was introduced in Python 3.4 but has been broken since Python 3.7.\n(Contributed by Inada Naoki in bpo-23882.)\nRemoved the undocumented private float.__set_format__() method,\npreviously known as float.__setformat__() in Python 3.7.\nIts docstring said: âYou probably donât want to use this function.\nIt exists mainly to be used in Pythonâs test suite.â\n(Contributed by Victor Stinner in bpo-46852.)\nThe --experimental-isolated-subinterpreters configure flag\n(and corresponding EXPERIMENTAL_ISOLATED_SUBINTERPRETERS macro)\nhave been removed.\nPynche\nâ The Pythonically Natural Color and Hue Editor â has been moved out\nof Tools/scripts and is being developed independently from the Python source tree.\n\n\n\nPorting to Python 3.11Â¶\nThis section lists previously described changes and other bugfixes\nin the Python API that may require changes to your Python code.\nPorting notes for the C API are\nlisted separately.\n\nopen(), io.open(), codecs.open() and\nfileinput.FileInput no longer accept 'U' (âuniversal newlineâ)\nin the file mode. In Python 3, âuniversal newlineâ mode is used by default\nwhenever a file is opened in text mode,\nand the 'U' flag has been deprecated since Python 3.3.\nThe newline parameter\nto these functions controls how universal newlines work.\n(Contributed by Victor Stinner in bpo-37330.)\nast.AST node positions are now validated when provided to\ncompile() and other related functions. If invalid positions are detected,\na ValueError will be raised. (Contributed by Pablo Galindo in gh-93351)\nProhibited passing non-concurrent.futures.ThreadPoolExecutor\nexecutors to asyncio.loop.set_default_executor()\nfollowing a deprecation in Python 3.8.\n(Contributed by Illia Volochii in bpo-43234.)\ncalendar: The calendar.LocaleTextCalendar and\ncalendar.LocaleHTMLCalendar classes now use\nlocale.getlocale(), instead of using locale.getdefaultlocale(),\nif no locale is specified.\n(Contributed by Victor Stinner in bpo-46659.)\nThe pdb module now reads the .pdbrc configuration file with\nthe 'UTF-8' encoding.\n(Contributed by Srinivas Reddy Thatiparthy (à°¶à±à°°à±à°¨à°¿à°µà°¾à°¸à±  à°°à±à°¡à±à°¡à°¿ à°¤à°¾à°à°¿à°ªà°°à±à°¤à°¿) in bpo-41137.)\nThe population parameter of random.sample() must be a sequence,\nand automatic conversion of sets to lists\nis no longer supported. Also, if the sample size\nis larger than the population size, a ValueError is raised.\n(Contributed by Raymond Hettinger in bpo-40465.)\nThe random optional parameter of random.shuffle() was removed.\nIt was previously an arbitrary random function to use for the shuffle;\nnow, random.random() (its previous default) will always be used.\nIn re Regular Expression Syntax, global inline flags (e.g. (?i))\ncan now only be used at the start of regular expressions.\nUsing them elsewhere has been deprecated since Python 3.6.\n(Contributed by Serhiy Storchaka in bpo-47066.)\nIn the re module, several long-standing bugs where fixed that,\nin rare cases, could cause capture groups to get the wrong result.\nTherefore, this could change the captured output in these cases.\n(Contributed by Ma Lin in bpo-35859.)\n\n\n\nBuild ChangesÂ¶\n\nCPython now has PEP 11 Tier 3 support for\ncross compiling to the WebAssembly platforms\nEmscripten\n(wasm32-unknown-emscripten, i.e. Python in the browser)\nand WebAssembly System Interface (WASI)\n(wasm32-unknown-wasi).\nThe effort is inspired by previous work like Pyodide.\nThese platforms provide a limited subset of POSIX APIs; Python standard\nlibraries features and modules related to networking, processes, threading,\nsignals, mmap, and users/groups are not available or donât work.\n(Emscripten contributed by Christian Heimes and Ethan Smith in gh-84461\nand WASI contributed by Christian Heimes in gh-90473;\nplatforms promoted in gh-95085)\nBuilding CPython now requires:\n\nA C11 compiler and standard library.\nOptional C11 features\nare not required.\n(Contributed by Victor Stinner in bpo-46656,\nbpo-45440 and bpo-46640.)\nSupport for IEEE 754\nfloating point numbers.\n(Contributed by Victor Stinner in bpo-46917.)\n\n\nThe Py_NO_NAN macro has been removed.\nSince CPython now requires IEEE 754 floats, NaN values are always available.\n(Contributed by Victor Stinner in bpo-46656.)\nThe tkinter package now requires Tcl/Tk\nversion 8.5.12 or newer.\n(Contributed by Serhiy Storchaka in bpo-46996.)\nBuild dependencies, compiler flags, and linker flags for most stdlib\nextension modules are now detected by configure. libffi, libnsl,\nlibsqlite3, zlib, bzip2, liblzma, libcrypt, Tcl/Tk, and uuid flags\nare detected by pkg-config (when available).\ntkinter now requires a pkg-config command\nto detect development settings for Tcl/Tk headers and libraries.\n(Contributed by Christian Heimes and Erlend Egeberg Aasland in\nbpo-45847, bpo-45747, and bpo-45763.)\nlibpython is no longer linked against libcrypt.\n(Contributed by Mike Gilbert in bpo-45433.)\nCPython can now be built with the\nThinLTO option\nvia passing thin to --with-lto, i.e. --with-lto=thin.\n(Contributed by Donghee Na and Brett Holman in bpo-44340.)\nFreelists for object structs can now be disabled. A new configure\noption --without-freelists can be used to disable all freelists\nexcept empty tuple singleton.\n(Contributed by Christian Heimes in bpo-45522.)\nModules/Setup and Modules/makesetup have been improved and tied up.\nExtension modules can now be built through makesetup. All except some\ntest modules can be linked statically into a main binary or library.\n(Contributed by Brett Cannon and Christian Heimes in bpo-45548,\nbpo-45570, bpo-45571, and bpo-43974.)\n\nNote\nUse the environment variables TCLTK_CFLAGS and\nTCLTK_LIBS to manually specify the location of Tcl/Tk headers\nand libraries. The configure options\n--with-tcltk-includes and --with-tcltk-libs\nhave been removed.\nOn RHEL 7 and CentOS 7 the development packages do not provide tcl.pc\nand tk.pc; use TCLTK_LIBS=""-ltk8.5 -ltkstub8.5 -ltcl8.5"".\nThe directory Misc/rhel7 contains .pc files and instructions\non how to build Python with RHEL 7âs and CentOS 7âs Tcl/Tk and OpenSSL.\n\n\nCPython will now use 30-bit digits by default for the Python int\nimplementation. Previously, the default was to use 30-bit digits on platforms\nwith SIZEOF_VOID_P >= 8, and 15-bit digits otherwise. Itâs still possible\nto explicitly request use of 15-bit digits via either the\n--enable-big-digits option to the configure script\nor (for Windows) the PYLONG_BITS_IN_DIGIT variable in PC/pyconfig.h,\nbut this option may be removed at some point in the future.\n(Contributed by Mark Dickinson in bpo-45569.)\n\n\n\nC API ChangesÂ¶\n\nNew FeaturesÂ¶\n\nAdd a new PyType_GetName() function to get typeâs short name.\n(Contributed by Hai Shi in bpo-42035.)\nAdd a new PyType_GetQualName() function to get typeâs qualified name.\n(Contributed by Hai Shi in bpo-42035.)\nAdd new PyThreadState_EnterTracing() and\nPyThreadState_LeaveTracing() functions to the limited C API to\nsuspend and resume tracing and profiling.\n(Contributed by Victor Stinner in bpo-43760.)\nAdded the Py_Version constant which bears the same value as\nPY_VERSION_HEX.\n(Contributed by  Gabriele N. Tornetta in bpo-43931.)\nPy_buffer and APIs are now part of the limited API and the stable\nABI:\n\nPyObject_CheckBuffer()\nPyObject_GetBuffer()\nPyBuffer_GetPointer()\nPyBuffer_SizeFromFormat()\nPyBuffer_ToContiguous()\nPyBuffer_FromContiguous()\nPyObject_CopyData()\nPyBuffer_IsContiguous()\nPyBuffer_FillContiguousStrides()\nPyBuffer_FillInfo()\nPyBuffer_Release()\nPyMemoryView_FromBuffer()\nbf_getbuffer and\nbf_releasebuffer type slots\n\n(Contributed by Christian Heimes in bpo-45459.)\n\nAdded the PyType_GetModuleByDef() function, used to get the module\nin which a method was defined, in cases where this information is not\navailable directly (via PyCMethod).\n(Contributed by Petr Viktorin in bpo-46613.)\nAdd new functions to pack and unpack C double (serialize and deserialize):\nPyFloat_Pack2(), PyFloat_Pack4(), PyFloat_Pack8(),\nPyFloat_Unpack2(), PyFloat_Unpack4() and\nPyFloat_Unpack8().\n(Contributed by Victor Stinner in bpo-46906.)\nAdd new functions to get frame object attributes:\nPyFrame_GetBuiltins(), PyFrame_GetGenerator(),\nPyFrame_GetGlobals(), PyFrame_GetLasti().\nAdded two new functions to get and set the active exception instance:\nPyErr_GetHandledException() and PyErr_SetHandledException().\nThese are alternatives to PyErr_SetExcInfo() and\nPyErr_GetExcInfo() which work with the legacy 3-tuple\nrepresentation of exceptions.\n(Contributed by Irit Katriel in bpo-46343.)\nAdded the PyConfig.safe_path member.\n(Contributed by Victor Stinner in gh-57684.)\n\n\n\nPorting to Python 3.11Â¶\n\nSome macros have been converted to static inline functions to avoid\nmacro pitfalls.\nThe change should be mostly transparent to users,\nas the replacement functions will cast their arguments to the expected types\nto avoid compiler warnings due to static type checks.\nHowever, when the limited C API is set to >=3.11,\nthese casts are not done,\nand callers will need to cast arguments to their expected types.\nSee PEP 670 for more details.\n(Contributed by Victor Stinner and Erlend E. Aasland in gh-89653.)\nPyErr_SetExcInfo() no longer uses the type and traceback\narguments, the interpreter now derives those values from the exception\ninstance (the value argument). The function still steals references\nof all three arguments.\n(Contributed by Irit Katriel in bpo-45711.)\nPyErr_GetExcInfo() now derives the type and traceback\nfields of the result from the exception instance (the value field).\n(Contributed by Irit Katriel in bpo-45711.)\n_frozen has a new is_package field to indicate whether\nor not the frozen module is a package.  Previously, a negative value\nin the size field was the indicator.  Now only non-negative values\nbe used for size.\n(Contributed by Kumar Aditya in bpo-46608.)\n_PyFrameEvalFunction() now takes _PyInterpreterFrame*\nas its second parameter, instead of PyFrameObject*.\nSee PEP 523 for more details of how to use this function pointer type.\nPyCode_New() and PyCode_NewWithPosOnlyArgs() now take\nan additional exception_table argument.\nUsing these functions should be avoided, if at all possible.\nTo get a custom code object: create a code object using the compiler,\nthen get a modified version with the replace method.\nPyCodeObject no longer has the co_code, co_varnames,\nco_cellvars and co_freevars fields.  Instead, use\nPyCode_GetCode(), PyCode_GetVarnames(),\nPyCode_GetCellvars() and PyCode_GetFreevars() respectively\nto access them via the C API.\n(Contributed by Brandt Bucher in bpo-46841 and Ken Jin in gh-92154\nand gh-94936.)\nThe old trashcan macros (Py_TRASHCAN_SAFE_BEGIN/Py_TRASHCAN_SAFE_END)\nare now deprecated. They should be replaced by the new macros\nPy_TRASHCAN_BEGIN and Py_TRASHCAN_END.\nA tp_dealloc function that has the old macros, such as:\nstatic void\nmytype_dealloc(mytype *p)\n{\n    PyObject_GC_UnTrack(p);\n    Py_TRASHCAN_SAFE_BEGIN(p);\n    ...\n    Py_TRASHCAN_SAFE_END\n}\n\n\nshould migrate to the new macros as follows:\nstatic void\nmytype_dealloc(mytype *p)\n{\n    PyObject_GC_UnTrack(p);\n    Py_TRASHCAN_BEGIN(p, mytype_dealloc)\n    ...\n    Py_TRASHCAN_END\n}\n\n\nNote that Py_TRASHCAN_BEGIN has a second argument which\nshould be the deallocation function it is in.\nTo support older Python versions in the same codebase, you\ncan define the following macros and use them throughout\nthe code (credit: these were copied from the mypy codebase):\n#if PY_VERSION_HEX >= 0x03080000\n#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)\n#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_END\n#else\n#  define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)\n#  define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)\n#endif\n\n\n\nThe PyType_Ready() function now raises an error if a type is defined\nwith the Py_TPFLAGS_HAVE_GC flag set but has no traverse function\n(PyTypeObject.tp_traverse).\n(Contributed by Victor Stinner in bpo-44263.)\nHeap types with the Py_TPFLAGS_IMMUTABLETYPE flag can now inherit\nthe PEP 590 vectorcall protocol.  Previously, this was only possible for\nstatic types.\n(Contributed by Erlend E. Aasland in bpo-43908)\nSince Py_TYPE() is changed to a inline static function,\nPy_TYPE(obj) = new_type must be replaced with\nPy_SET_TYPE(obj, new_type): see the Py_SET_TYPE() function\n(available since Python 3.9). For backward compatibility, this macro can be\nused:\n#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_TYPE)\nstatic inline void _Py_SET_TYPE(PyObject *ob, PyTypeObject *type)\n{ ob->ob_type = type; }\n#define Py_SET_TYPE(ob, type) _Py_SET_TYPE((PyObject*)(ob), type)\n#endif\n\n\n(Contributed by Victor Stinner in bpo-39573.)\n\nSince Py_SIZE() is changed to a inline static function,\nPy_SIZE(obj) = new_size must be replaced with\nPy_SET_SIZE(obj, new_size): see the Py_SET_SIZE() function\n(available since Python 3.9). For backward compatibility, this macro can be\nused:\n#if PY_VERSION_HEX < 0x030900A4 && !defined(Py_SET_SIZE)\nstatic inline void _Py_SET_SIZE(PyVarObject *ob, Py_ssize_t size)\n{ ob->ob_size = size; }\n#define Py_SET_SIZE(ob, size) _Py_SET_SIZE((PyVarObject*)(ob), size)\n#endif\n\n\n(Contributed by Victor Stinner in bpo-39573.)\n\n<Python.h> no longer includes the header files <stdlib.h>,\n<stdio.h>, <errno.h> and <string.h> when the Py_LIMITED_API\nmacro is set to 0x030b0000 (Python 3.11) or higher. C extensions should\nexplicitly include the header files after #include <Python.h>.\n(Contributed by Victor Stinner in bpo-45434.)\nThe non-limited API files cellobject.h, classobject.h, code.h, context.h,\nfuncobject.h, genobject.h and longintrepr.h have been moved to\nthe Include/cpython directory. Moreover, the eval.h header file was\nremoved. These files must not be included directly, as they are already\nincluded in Python.h: Include Files. If they have\nbeen included directly, consider including Python.h instead.\n(Contributed by Victor Stinner in bpo-35134.)\nThe PyUnicode_CHECK_INTERNED() macro has been excluded from the\nlimited C API. It was never usable there, because it used internal structures\nwhich are not available in the limited C API.\n(Contributed by Victor Stinner in bpo-46007.)\nThe following frame functions and type are now directly available with\n#include <Python.h>, itâs no longer needed to add\n#include <frameobject.h>:\n\nPyFrame_Check()\nPyFrame_GetBack()\nPyFrame_GetBuiltins()\nPyFrame_GetGenerator()\nPyFrame_GetGlobals()\nPyFrame_GetLasti()\nPyFrame_GetLocals()\nPyFrame_Type\n\n(Contributed by Victor Stinner in gh-93937.)\n\n\n\nThe PyFrameObject structure members have been removed from the\npublic C API.\nWhile the documentation notes that the PyFrameObject fields are\nsubject to change at any time, they have been stable for a long time and were\nused in several popular extensions.\nIn Python 3.11, the frame struct was reorganized to allow performance\noptimizations. Some fields were removed entirely, as they were details of the\nold implementation.\nPyFrameObject fields:\n\nf_back: use PyFrame_GetBack().\nf_blockstack: removed.\nf_builtins: use PyFrame_GetBuiltins().\nf_code: use PyFrame_GetCode().\nf_gen: use PyFrame_GetGenerator().\nf_globals: use PyFrame_GetGlobals().\nf_iblock: removed.\nf_lasti: use PyFrame_GetLasti().\nCode using f_lasti with PyCode_Addr2Line() should use\nPyFrame_GetLineNumber() instead; it may be faster.\nf_lineno: use PyFrame_GetLineNumber()\nf_locals: use PyFrame_GetLocals().\nf_stackdepth: removed.\nf_state: no public API (renamed to f_frame.f_state).\nf_trace: no public API.\nf_trace_lines: use PyObject_GetAttrString((PyObject*)frame, ""f_trace_lines"").\nf_trace_opcodes: use PyObject_GetAttrString((PyObject*)frame, ""f_trace_opcodes"").\nf_localsplus: no public API (renamed to f_frame.localsplus).\nf_valuestack: removed.\n\nThe Python frame object is now created lazily. A side effect is that the\nf_back member must not be accessed directly,\nsince its value is now also\ncomputed lazily. The PyFrame_GetBack() function must be called\ninstead.\nDebuggers that accessed the f_locals directly must call\nPyFrame_GetLocals() instead. They no longer need to call\nPyFrame_FastToLocalsWithError() or PyFrame_LocalsToFast(),\nin fact they should not call those functions. The necessary updating of the\nframe is now managed by the virtual machine.\nCode defining PyFrame_GetCode() on Python 3.8 and older:\n#if PY_VERSION_HEX < 0x030900B1\nstatic inline PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)\n{\n    Py_INCREF(frame->f_code);\n    return frame->f_code;\n}\n#endif\n\n\nCode defining PyFrame_GetBack() on Python 3.8 and older:\n#if PY_VERSION_HEX < 0x030900B1\nstatic inline PyFrameObject* PyFrame_GetBack(PyFrameObject *frame)\n{\n    Py_XINCREF(frame->f_back);\n    return frame->f_back;\n}\n#endif\n\n\nOr use the pythoncapi_compat project to get these two\nfunctions on older Python versions.\n\nChanges of the PyThreadState structure members:\n\nframe: removed, use PyThreadState_GetFrame() (function added\nto Python 3.9 by bpo-40429).\nWarning: the function returns a strong reference, need to call\nPy_XDECREF().\ntracing: changed, use PyThreadState_EnterTracing()\nand PyThreadState_LeaveTracing()\n(functions added to Python 3.11 by bpo-43760).\nrecursion_depth: removed,\nuse (tstate->recursion_limit - tstate->recursion_remaining) instead.\nstackcheck_counter: removed.\n\nCode defining PyThreadState_GetFrame() on Python 3.8 and older:\n#if PY_VERSION_HEX < 0x030900B1\nstatic inline PyFrameObject* PyThreadState_GetFrame(PyThreadState *tstate)\n{\n    Py_XINCREF(tstate->frame);\n    return tstate->frame;\n}\n#endif\n\n\nCode defining PyThreadState_EnterTracing() and\nPyThreadState_LeaveTracing() on Python 3.10 and older:\n#if PY_VERSION_HEX < 0x030B00A2\nstatic inline void PyThreadState_EnterTracing(PyThreadState *tstate)\n{\n    tstate->tracing++;\n#if PY_VERSION_HEX >= 0x030A00A1\n    tstate->cframe->use_tracing = 0;\n#else\n    tstate->use_tracing = 0;\n#endif\n}\n\nstatic inline void PyThreadState_LeaveTracing(PyThreadState *tstate)\n{\n    int use_tracing = (tstate->c_tracefunc != NULL || tstate->c_profilefunc != NULL);\n    tstate->tracing--;\n#if PY_VERSION_HEX >= 0x030A00A1\n    tstate->cframe->use_tracing = use_tracing;\n#else\n    tstate->use_tracing = use_tracing;\n#endif\n}\n#endif\n\n\nOr use the pythoncapi-compat project to get these functions\non old Python functions.\n\nDistributors are encouraged to build Python with the optimized Blake2\nlibrary libb2.\nThe PyConfig.module_search_paths_set field must now be set to 1 for\ninitialization to use PyConfig.module_search_paths to initialize\nsys.path. Otherwise, initialization will recalculate the path and replace\nany values added to module_search_paths.\nPyConfig_Read() no longer calculates the initial search path, and will not\nfill any values into PyConfig.module_search_paths. To calculate default\npaths and then modify them, finish initialization and use PySys_GetObject()\nto retrieve sys.path as a Python list object and modify it directly.\n\n\n\nDeprecatedÂ¶\n\nDeprecate the following functions to configure the Python initialization:\n\nPySys_AddWarnOptionUnicode()\nPySys_AddWarnOption()\nPySys_AddXOption()\nPySys_HasWarnOptions()\nPySys_SetArgvEx()\nPySys_SetArgv()\nPySys_SetPath()\nPy_SetPath()\nPy_SetProgramName()\nPy_SetPythonHome()\nPy_SetStandardStreamEncoding()\n_Py_SetProgramFullPath()\n\nUse the new PyConfig API of the Python Initialization Configuration instead (PEP 587).\n(Contributed by Victor Stinner in gh-88279.)\n\nDeprecate the ob_shash member of the PyBytesObject. Use PyObject_Hash() instead.\n(Contributed by Inada Naoki in bpo-46864.)\n\n\n\nPending Removal in Python 3.12Â¶\nThe following C APIs have been deprecated in earlier Python releases,\nand will be removed in Python 3.12.\n\nPyUnicode_AS_DATA()\nPyUnicode_AS_UNICODE()\nPyUnicode_AsUnicodeAndSize()\nPyUnicode_AsUnicode()\nPyUnicode_FromUnicode()\nPyUnicode_GET_DATA_SIZE()\nPyUnicode_GET_SIZE()\nPyUnicode_GetSize()\nPyUnicode_IS_COMPACT()\nPyUnicode_IS_READY()\nPyUnicode_READY()\nPyUnicode_WSTR_LENGTH()\n_PyUnicode_AsUnicode()\nPyUnicode_WCHAR_KIND\nPyUnicodeObject\nPyUnicode_InternImmortal()\n\n\n\nRemovedÂ¶\n\nPyFrame_BlockSetup() and PyFrame_BlockPop() have been\nremoved.\n(Contributed by Mark Shannon in bpo-40222.)\nRemove the following math macros using the errno variable:\n\nPy_ADJUST_ERANGE1()\nPy_ADJUST_ERANGE2()\nPy_OVERFLOWED()\nPy_SET_ERANGE_IF_OVERFLOW()\nPy_SET_ERRNO_ON_MATH_ERROR()\n\n(Contributed by Victor Stinner in bpo-45412.)\n\nRemove Py_UNICODE_COPY() and Py_UNICODE_FILL() macros, deprecated\nsince Python 3.3. Use PyUnicode_CopyCharacters() or memcpy()\n(wchar_t* string), and PyUnicode_Fill() functions instead.\n(Contributed by Victor Stinner in bpo-41123.)\nRemove the pystrhex.h header file. It only contains private functions.\nC extensions should only include the main <Python.h> header file.\n(Contributed by Victor Stinner in bpo-45434.)\nRemove the Py_FORCE_DOUBLE() macro. It was used by the\nPy_IS_INFINITY() macro.\n(Contributed by Victor Stinner in bpo-45440.)\nThe following items are no longer available when Py_LIMITED_API\nis defined:\n\nPyMarshal_WriteLongToFile()\nPyMarshal_WriteObjectToFile()\nPyMarshal_ReadObjectFromString()\nPyMarshal_WriteObjectToString()\nthe Py_MARSHAL_VERSION macro\n\nThese are not part of the limited API.\n(Contributed by Victor Stinner in bpo-45474.)\n\nExclude PyWeakref_GET_OBJECT() from the limited C API. It never\nworked since the PyWeakReference structure is opaque in the\nlimited C API.\n(Contributed by Victor Stinner in bpo-35134.)\nRemove the PyHeapType_GET_MEMBERS() macro. It was exposed in the\npublic C API by mistake, it must only be used by Python internally.\nUse the PyTypeObject.tp_members member instead.\n(Contributed by Victor Stinner in bpo-40170.)\nRemove the HAVE_PY_SET_53BIT_PRECISION macro (moved to the internal C\nAPI).\n(Contributed by Victor Stinner in bpo-45412.)\n\n\nRemove the Py_UNICODE encoder APIs,\nas they have been deprecated since Python 3.3,\nare little used\nand are inefficient relative to the recommended alternatives.\nThe removed functions are:\n\nPyUnicode_Encode()\nPyUnicode_EncodeASCII()\nPyUnicode_EncodeLatin1()\nPyUnicode_EncodeUTF7()\nPyUnicode_EncodeUTF8()\nPyUnicode_EncodeUTF16()\nPyUnicode_EncodeUTF32()\nPyUnicode_EncodeUnicodeEscape()\nPyUnicode_EncodeRawUnicodeEscape()\nPyUnicode_EncodeCharmap()\nPyUnicode_TranslateCharmap()\nPyUnicode_EncodeDecimal()\nPyUnicode_TransformDecimalToASCII()\n\nSee PEP 624 for details and\nmigration guidance.\n(Contributed by Inada Naoki in bpo-44029.)\n\n\n\n\n\nNotable Changes in 3.11.4Â¶\n\ntarfileÂ¶\n\nThe extraction methods in tarfile, and shutil.unpack_archive(),\nhave a new a filter argument that allows limiting tar features than may be\nsurprising or dangerous, such as creating files outside the destination\ndirectory.\nSee Extraction filters for details.\nIn Python 3.12, use without the filter argument will show a\nDeprecationWarning.\nIn Python 3.14, the default will switch to 'data'.\n(Contributed by Petr Viktorin in PEP 706.)\n\n\n\n\nNotable Changes in 3.11.5Â¶\n\nOpenSSLÂ¶\n\nWindows builds and macOS installers from python.org now use OpenSSL 3.0.\n\n\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nWhatâs New In Python 3.11\nSummary â Release highlights\nNew Features\nPEP 657: Fine-grained error locations in tracebacks\nPEP 654: Exception Groups and except*\nPEP 678: Exceptions can be enriched with notes\nWindows py.exe launcher improvements\n\n\nNew Features Related to Type Hints\nPEP 646: Variadic generics\nPEP 655: Marking individual TypedDict items as required or not-required\nPEP 673: Self type\nPEP 675: Arbitrary literal string type\nPEP 681: Data class transforms\nPEP 563 may not be the future\n\n\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nasyncio\ncontextlib\ndataclasses\ndatetime\nenum\nfcntl\nfractions\nfunctools\nhashlib\nIDLE and idlelib\ninspect\nlocale\nlogging\nmath\noperator\nos\npathlib\nre\nshutil\nsocket\nsqlite3\nstring\nsys\nsysconfig\ntempfile\nthreading\ntime\ntkinter\ntraceback\ntyping\nunicodedata\nunittest\nvenv\nwarnings\nzipfile\n\n\nOptimizations\nFaster CPython\nFaster Startup\nFrozen imports / Static code objects\n\n\nFaster Runtime\nCheaper, lazy Python frames\nInlined Python function calls\nPEP 659: Specializing Adaptive Interpreter\n\n\nMisc\nFAQ\nHow should I write my code to utilize these speedups?\nWill CPython 3.11 use more memory?\nI donât see any speedups in my workload. Why?\nIs there a JIT compiler?\n\n\nAbout\n\n\nCPython bytecode changes\nNew opcodes\nReplaced opcodes\nChanged/removed opcodes\n\n\nDeprecated\nLanguage/Builtins\nModules\nStandard Library\n\n\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNew Features\nPorting to Python 3.11\nDeprecated\nPending Removal in Python 3.12\nRemoved\n\n\nNotable Changes in 3.11.4\ntarfile\n\n\nNotable Changes in 3.11.5\nOpenSSL\n\n\n\n\n\n\n\nPrevious topic\nWhatâs New in Python\n\n\nNext topic\nWhatâs New In Python 3.10\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nWhatâs New in Python »\nWhatâs New In Python 3.11\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/faq/index.html,Python Frequently Asked Questions — Python 3.11.8 documentation,"General Python FAQ, Programming FAQ, Design and History FAQ, Library and Extension FAQ, Extending/Embedding FAQ, Python on Windows FAQ, Graphic User Interface FAQ, âWhy is Python Installed on my Co...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nIsolating Extension Modules\n\n\nNext topic\nGeneral Python FAQ\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Frequently Asked Questions\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nPython Frequently Asked QuestionsÂ¶\n\n\nGeneral Python FAQ\nProgramming FAQ\nDesign and History FAQ\nLibrary and Extension FAQ\nExtending/Embedding FAQ\nPython on Windows FAQ\nGraphic User Interface FAQ\nâWhy is Python Installed on my Computer?â FAQ\n\n\n\n\n\n\n\n\n\n\nPrevious topic\nIsolating Extension Modules\n\n\nNext topic\nGeneral Python FAQ\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython Frequently Asked Questions\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/_static/pygments_dark.css,,,None,,
https://docs.python.org/3.11/tutorial/index.html,The Python Tutorial — Python 3.11.8 documentation,"Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Pythonâs elegant syntax an...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nChangelog\n\n\nNext topic\n1. Whetting Your Appetite\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Tutorial\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nThe Python TutorialÂ¶\nPython is an easy to learn, powerful programming language. It has efficient\nhigh-level data structures and a simple but effective approach to\nobject-oriented programming. Pythonâs elegant syntax and dynamic typing,\ntogether with its interpreted nature, make it an ideal language for scripting\nand rapid application development in many areas on most platforms.\nThe Python interpreter and the extensive standard library are freely available\nin source or binary form for all major platforms from the Python web site,\nhttps://www.python.org/, and may be freely distributed. The same site also\ncontains distributions of and pointers to many free third party Python modules,\nprograms and tools, and additional documentation.\nThe Python interpreter is easily extended with new functions and data types\nimplemented in C or C++ (or other languages callable from C). Python is also\nsuitable as an extension language for customizable applications.\nThis tutorial introduces the reader informally to the basic concepts and\nfeatures of the Python language and system. It helps to have a Python\ninterpreter handy for hands-on experience, but all examples are self-contained,\nso the tutorial can be read off-line as well.\nFor a description of standard objects and modules, see The Python Standard Library.\nThe Python Language Reference gives a more formal definition of the language.  To write\nextensions in C or C++, read Extending and Embedding the Python Interpreter and\nPython/C API Reference Manual. There are also several books covering Python in depth.\nThis tutorial does not attempt to be comprehensive and cover every single\nfeature, or even every commonly used feature. Instead, it introduces many of\nPythonâs most noteworthy features, and will give you a good idea of the\nlanguageâs flavor and style. After reading it, you will be able to read and\nwrite Python modules and programs, and you will be ready to learn more about the\nvarious Python library modules described in The Python Standard Library.\nThe Glossary is also worth going through.\n\n\n1. Whetting Your Appetite\n2. Using the Python Interpreter\n2.1. Invoking the Interpreter\n2.1.1. Argument Passing\n2.1.2. Interactive Mode\n\n\n2.2. The Interpreter and Its Environment\n2.2.1. Source Code Encoding\n\n\n\n\n3. An Informal Introduction to Python\n3.1. Using Python as a Calculator\n3.1.1. Numbers\n3.1.2. Text\n3.1.3. Lists\n\n\n3.2. First Steps Towards Programming\n\n\n4. More Control Flow Tools\n4.1. if Statements\n4.2. for Statements\n4.3. The range() Function\n4.4. break and continue Statements, and else Clauses on Loops\n4.5. pass Statements\n4.6. match Statements\n4.7. Defining Functions\n4.8. More on Defining Functions\n4.8.1. Default Argument Values\n4.8.2. Keyword Arguments\n4.8.3. Special parameters\n4.8.3.1. Positional-or-Keyword Arguments\n4.8.3.2. Positional-Only Parameters\n4.8.3.3. Keyword-Only Arguments\n4.8.3.4. Function Examples\n4.8.3.5. Recap\n\n\n4.8.4. Arbitrary Argument Lists\n4.8.5. Unpacking Argument Lists\n4.8.6. Lambda Expressions\n4.8.7. Documentation Strings\n4.8.8. Function Annotations\n\n\n4.9. Intermezzo: Coding Style\n\n\n5. Data Structures\n5.1. More on Lists\n5.1.1. Using Lists as Stacks\n5.1.2. Using Lists as Queues\n5.1.3. List Comprehensions\n5.1.4. Nested List Comprehensions\n\n\n5.2. The del statement\n5.3. Tuples and Sequences\n5.4. Sets\n5.5. Dictionaries\n5.6. Looping Techniques\n5.7. More on Conditions\n5.8. Comparing Sequences and Other Types\n\n\n6. Modules\n6.1. More on Modules\n6.1.1. Executing modules as scripts\n6.1.2. The Module Search Path\n6.1.3. âCompiledâ Python files\n\n\n6.2. Standard Modules\n6.3. The dir() Function\n6.4. Packages\n6.4.1. Importing * From a Package\n6.4.2. Intra-package References\n6.4.3. Packages in Multiple Directories\n\n\n\n\n7. Input and Output\n7.1. Fancier Output Formatting\n7.1.1. Formatted String Literals\n7.1.2. The String format() Method\n7.1.3. Manual String Formatting\n7.1.4. Old string formatting\n\n\n7.2. Reading and Writing Files\n7.2.1. Methods of File Objects\n7.2.2. Saving structured data with json\n\n\n\n\n8. Errors and Exceptions\n8.1. Syntax Errors\n8.2. Exceptions\n8.3. Handling Exceptions\n8.4. Raising Exceptions\n8.5. Exception Chaining\n8.6. User-defined Exceptions\n8.7. Defining Clean-up Actions\n8.8. Predefined Clean-up Actions\n8.9. Raising and Handling Multiple Unrelated Exceptions\n8.10. Enriching Exceptions with Notes\n\n\n9. Classes\n9.1. A Word About Names and Objects\n9.2. Python Scopes and Namespaces\n9.2.1. Scopes and Namespaces Example\n\n\n9.3. A First Look at Classes\n9.3.1. Class Definition Syntax\n9.3.2. Class Objects\n9.3.3. Instance Objects\n9.3.4. Method Objects\n9.3.5. Class and Instance Variables\n\n\n9.4. Random Remarks\n9.5. Inheritance\n9.5.1. Multiple Inheritance\n\n\n9.6. Private Variables\n9.7. Odds and Ends\n9.8. Iterators\n9.9. Generators\n9.10. Generator Expressions\n\n\n10. Brief Tour of the Standard Library\n10.1. Operating System Interface\n10.2. File Wildcards\n10.3. Command Line Arguments\n10.4. Error Output Redirection and Program Termination\n10.5. String Pattern Matching\n10.6. Mathematics\n10.7. Internet Access\n10.8. Dates and Times\n10.9. Data Compression\n10.10. Performance Measurement\n10.11. Quality Control\n10.12. Batteries Included\n\n\n11. Brief Tour of the Standard Library â Part II\n11.1. Output Formatting\n11.2. Templating\n11.3. Working with Binary Data Record Layouts\n11.4. Multi-threading\n11.5. Logging\n11.6. Weak References\n11.7. Tools for Working with Lists\n11.8. Decimal Floating Point Arithmetic\n\n\n12. Virtual Environments and Packages\n12.1. Introduction\n12.2. Creating Virtual Environments\n12.3. Managing Packages with pip\n\n\n13. What Now?\n14. Interactive Input Editing and History Substitution\n14.1. Tab Completion and History Editing\n14.2. Alternatives to the Interactive Interpreter\n\n\n15. Floating Point Arithmetic:  Issues and Limitations\n15.1. Representation Error\n\n\n16. Appendix\n16.1. Interactive Mode\n16.1.1. Error Handling\n16.1.2. Executable Python Scripts\n16.1.3. The Interactive Startup File\n16.1.4. The Customization Modules\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrevious topic\nChangelog\n\n\nNext topic\n1. Whetting Your Appetite\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nThe Python Tutorial\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/whatsnew/index.html,Whatâs New in Python — Python 3.11.8 documentation,The âWhatâs New in Pythonâ series of essays takes tours through the most important changes between major Python versions. They are a âmust readâ for anyone wishing to stay up-to-date after a new re...,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nPython Documentation contents\n\n\nNext topic\nWhatâs New In Python 3.11\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nWhatâs New in Python\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nWhatâs New in PythonÂ¶\nThe âWhatâs New in Pythonâ series of essays takes tours through the most\nimportant changes between major Python versions.  They are a âmust readâ for\nanyone wishing to stay up-to-date after a new release.\n\n\nWhatâs New In Python 3.11\nSummary â Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nOther CPython Implementation Changes\nNew Modules\nImproved Modules\nOptimizations\nFaster CPython\nCPython bytecode changes\nDeprecated\nPending Removal in Python 3.12\nRemoved\nPorting to Python 3.11\nBuild Changes\nC API Changes\nNotable Changes in 3.11.4\nNotable Changes in 3.11.5\n\n\nWhatâs New In Python 3.10\nSummary â Release highlights\nNew Features\nNew Features Related to Type Hints\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.10\nCPython bytecode changes\nBuild Changes\nC API Changes\nNotable security feature in 3.10.7\nNotable security feature in 3.10.8\nNotable changes in 3.10.12\n\n\nWhatâs New In Python 3.9\nSummary â Release highlights\nYou should check for DeprecationWarning in your code\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nDeprecated\nRemoved\nPorting to Python 3.9\nBuild Changes\nC API Changes\nNotable changes in Python 3.9.1\nNotable changes in Python 3.9.2\nNotable changes in Python 3.9.3\nNotable changes in Python 3.9.5\nNotable security feature in 3.9.14\nNotable changes in 3.9.17\n\n\nWhatâs New In Python 3.8\nSummary â Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nAPI and Feature Removals\nPorting to Python 3.8\nNotable changes in Python 3.8.1\nNotable changes in Python 3.8.2\nNotable changes in Python 3.8.3\nNotable changes in Python 3.8.8\nNotable changes in Python 3.8.9\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.10\nNotable changes in Python 3.8.12\nNotable security feature in 3.8.14\nNotable changes in 3.8.17\n\n\nWhatâs New In Python 3.7\nSummary â Release Highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nC API Changes\nBuild Changes\nOptimizations\nOther CPython Implementation Changes\nDeprecated Python Behavior\nDeprecated Python modules, functions and methods\nDeprecated functions and types of the C API\nPlatform Support Removals\nAPI and Feature Removals\nModule Removals\nWindows-only Changes\nPorting to Python 3.7\nNotable changes in Python 3.7.1\nNotable changes in Python 3.7.2\nNotable changes in Python 3.7.6\nNotable changes in Python 3.7.10\nNotable changes in Python 3.7.11\nNotable security feature in 3.7.14\n\n\nWhatâs New In Python 3.6\nSummary â Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nOther Improvements\nDeprecated\nRemoved\nPorting to Python 3.6\nNotable changes in Python 3.6.2\nNotable changes in Python 3.6.4\nNotable changes in Python 3.6.5\nNotable changes in Python 3.6.7\nNotable changes in Python 3.6.10\nNotable changes in Python 3.6.13\nNotable changes in Python 3.6.14\n\n\nWhatâs New In Python 3.5\nSummary â Release highlights\nNew Features\nOther Language Changes\nNew Modules\nImproved Modules\nOther module-level changes\nOptimizations\nBuild and C API Changes\nDeprecated\nRemoved\nPorting to Python 3.5\nNotable changes in Python 3.5.4\n\n\nWhatâs New In Python 3.4\nSummary â Release Highlights\nNew Features\nNew Modules\nImproved Modules\nCPython Implementation Changes\nDeprecated\nRemoved\nPorting to Python 3.4\nChanged in 3.4.3\n\n\nWhatâs New In Python 3.3\nSummary â Release highlights\nPEP 405: Virtual Environments\nPEP 420: Implicit Namespace Packages\nPEP 3118: New memoryview implementation and buffer protocol documentation\nPEP 393: Flexible String Representation\nPEP 397: Python Launcher for Windows\nPEP 3151: Reworking the OS and IO exception hierarchy\nPEP 380: Syntax for Delegating to a Subgenerator\nPEP 409: Suppressing exception context\nPEP 414: Explicit Unicode literals\nPEP 3155: Qualified name for classes and functions\nPEP 412: Key-Sharing Dictionary\nPEP 362: Function Signature Object\nPEP 421: Adding sys.implementation\nUsing importlib as the Implementation of Import\nOther Language Changes\nA Finer-Grained Import Lock\nBuiltin functions and types\nNew Modules\nImproved Modules\nOptimizations\nBuild and C API Changes\nDeprecated\nPorting to Python 3.3\n\n\nWhatâs New In Python 3.2\nPEP 384: Defining a Stable ABI\nPEP 389: Argparse Command Line Parsing Module\nPEP 391:  Dictionary Based Configuration for Logging\nPEP 3148:  The concurrent.futures module\nPEP 3147:  PYC Repository Directories\nPEP 3149: ABI Version Tagged .so Files\nPEP 3333: Python Web Server Gateway Interface v1.0.1\nOther Language Changes\nNew, Improved, and Deprecated Modules\nMulti-threading\nOptimizations\nUnicode\nCodecs\nDocumentation\nIDLE\nCode Repository\nBuild and C API Changes\nPorting to Python 3.2\n\n\nWhatâs New In Python 3.1\nPEP 372: Ordered Dictionaries\nPEP 378: Format Specifier for Thousands Separator\nOther Language Changes\nNew, Improved, and Deprecated Modules\nOptimizations\nIDLE\nBuild and C API Changes\nPorting to Python 3.1\n\n\nWhatâs New In Python 3.0\nCommon Stumbling Blocks\nOverview Of Syntax Changes\nChanges Already Present In Python 2.6\nLibrary Changes\nPEP 3101: A New Approach To String Formatting\nChanges To Exceptions\nMiscellaneous Other Changes\nBuild and C API Changes\nPerformance\nPorting To Python 3.0\n\n\nWhatâs New in Python 2.7\nThe Future for Python 2.x\nChanges to the Handling of Deprecation Warnings\nPython 3.1 Features\nPEP 372: Adding an Ordered Dictionary to collections\nPEP 378: Format Specifier for Thousands Separator\nPEP 389: The argparse Module for Parsing Command Lines\nPEP 391: Dictionary-Based Configuration For Logging\nPEP 3106: Dictionary Views\nPEP 3137: The memoryview Object\nOther Language Changes\nNew and Improved Modules\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.7\nNew Features Added to Python 2.7 Maintenance Releases\nAcknowledgements\n\n\nWhatâs New in Python 2.6\nPython 3.0\nChanges to the Development Process\nPEP 343: The âwithâ statement\nPEP 366: Explicit Relative Imports From a Main Module\nPEP 370: Per-user site-packages Directory\nPEP 371: The multiprocessing Package\nPEP 3101: Advanced String Formatting\nPEP 3105: print As a Function\nPEP 3110: Exception-Handling Changes\nPEP 3112: Byte Literals\nPEP 3116: New I/O Library\nPEP 3118: Revised Buffer Protocol\nPEP 3119: Abstract Base Classes\nPEP 3127: Integer Literal Support and Syntax\nPEP 3129: Class Decorators\nPEP 3141: A Type Hierarchy for Numbers\nOther Language Changes\nNew and Improved Modules\nDeprecations and Removals\nBuild and C API Changes\nPorting to Python 2.6\nAcknowledgements\n\n\nWhatâs New in Python 2.5\nPEP 308: Conditional Expressions\nPEP 309: Partial Function Application\nPEP 314: Metadata for Python Software Packages v1.1\nPEP 328: Absolute and Relative Imports\nPEP 338: Executing Modules as Scripts\nPEP 341: Unified try/except/finally\nPEP 342: New Generator Features\nPEP 343: The âwithâ statement\nPEP 352: Exceptions as New-Style Classes\nPEP 353: Using ssize_t as the index type\nPEP 357: The â__index__â method\nOther Language Changes\nNew, Improved, and Removed Modules\nBuild and C API Changes\nPorting to Python 2.5\nAcknowledgements\n\n\nWhatâs New in Python 2.4\nPEP 218: Built-In Set Objects\nPEP 237: Unifying Long Integers and Integers\nPEP 289: Generator Expressions\nPEP 292: Simpler String Substitutions\nPEP 318: Decorators for Functions and Methods\nPEP 322: Reverse Iteration\nPEP 324: New subprocess Module\nPEP 327: Decimal Data Type\nPEP 328: Multi-line Imports\nPEP 331: Locale-Independent Float/String Conversions\nOther Language Changes\nNew, Improved, and Deprecated Modules\nBuild and C API Changes\nPorting to Python 2.4\nAcknowledgements\n\n\nWhatâs New in Python 2.3\nPEP 218: A Standard Set Datatype\nPEP 255: Simple Generators\nPEP 263: Source Code Encodings\nPEP 273: Importing Modules from ZIP Archives\nPEP 277: Unicode file name support for Windows NT\nPEP 278: Universal Newline Support\nPEP 279: enumerate()\nPEP 282: The logging Package\nPEP 285: A Boolean Type\nPEP 293: Codec Error Handling Callbacks\nPEP 301: Package Index and Metadata for Distutils\nPEP 302: New Import Hooks\nPEP 305: Comma-separated Files\nPEP 307: Pickle Enhancements\nExtended Slices\nOther Language Changes\nNew, Improved, and Deprecated Modules\nPymalloc: A Specialized Object Allocator\nBuild and C API Changes\nOther Changes and Fixes\nPorting to Python 2.3\nAcknowledgements\n\n\nWhatâs New in Python 2.2\nIntroduction\nPEPs 252 and 253: Type and Class Changes\nPEP 234: Iterators\nPEP 255: Simple Generators\nPEP 237: Unifying Long Integers and Integers\nPEP 238: Changing the Division Operator\nUnicode Changes\nPEP 227: Nested Scopes\nNew and Improved Modules\nInterpreter Changes and Fixes\nOther Changes and Fixes\nAcknowledgements\n\n\nWhatâs New in Python 2.1\nIntroduction\nPEP 227: Nested Scopes\nPEP 236: __future__ Directives\nPEP 207: Rich Comparisons\nPEP 230: Warning Framework\nPEP 229: New Build System\nPEP 205: Weak References\nPEP 232: Function Attributes\nPEP 235: Importing Modules on Case-Insensitive Platforms\nPEP 217: Interactive Display Hook\nPEP 208: New Coercion Model\nPEP 241: Metadata in Python Packages\nNew and Improved Modules\nOther Changes and Fixes\nAcknowledgements\n\n\nWhatâs New in Python 2.0\nIntroduction\nWhat About Python 1.6?\nNew Development Process\nUnicode\nList Comprehensions\nAugmented Assignment\nString Methods\nGarbage Collection of Cycles\nOther Core Changes\nPorting to 2.0\nExtending/Embedding Changes\nDistutils: Making Modules Easy to Install\nXML Modules\nModule changes\nNew modules\nIDLE Improvements\nDeleted and Deprecated Modules\nAcknowledgements\n\n\n\n\nThe âChangelogâ is an HTML version of the file built from the contents of the\nMisc/NEWS.d directory tree, which contains all nontrivial changes\nto Python for the current version.\n\n\nChangelog\nPython next\nPython 3.11.8 final\nPython 3.11.7 final\nPython 3.11.6 final\nPython 3.11.5 final\nPython 3.11.4 final\nPython 3.11.3 final\nPython 3.11.2 final\nPython 3.11.1 final\nPython 3.11.0 final\nPython 3.11.0 release candidate 2\nPython 3.11.0 release candidate 1\nPython 3.11.0 beta 5\nPython 3.11.0 beta 4\nPython 3.11.0 beta 3\nPython 3.11.0 beta 2\nPython 3.11.0 beta 1\nPython 3.11.0 alpha 7\nPython 3.11.0 alpha 6\nPython 3.11.0 alpha 5\nPython 3.11.0 alpha 4\nPython 3.11.0 alpha 3\nPython 3.11.0 alpha 2\nPython 3.11.0 alpha 1\nPython 3.10.0 beta 1\nPython 3.10.0 alpha 7\nPython 3.10.0 alpha 6\nPython 3.10.0 alpha 5\nPython 3.10.0 alpha 4\nPython 3.10.0 alpha 3\nPython 3.10.0 alpha 2\nPython 3.10.0 alpha 1\nPython 3.9.0 beta 1\nPython 3.9.0 alpha 6\nPython 3.9.0 alpha 5\nPython 3.9.0 alpha 4\nPython 3.9.0 alpha 3\nPython 3.9.0 alpha 2\nPython 3.9.0 alpha 1\nPython 3.8.0 beta 1\nPython 3.8.0 alpha 4\nPython 3.8.0 alpha 3\nPython 3.8.0 alpha 2\nPython 3.8.0 alpha 1\nPython 3.7.0 final\nPython 3.7.0 release candidate 1\nPython 3.7.0 beta 5\nPython 3.7.0 beta 4\nPython 3.7.0 beta 3\nPython 3.7.0 beta 2\nPython 3.7.0 beta 1\nPython 3.7.0 alpha 4\nPython 3.7.0 alpha 3\nPython 3.7.0 alpha 2\nPython 3.7.0 alpha 1\nPython 3.6.6 final\nPython 3.6.6 release candidate 1\nPython 3.6.5 final\nPython 3.6.5 release candidate 1\nPython 3.6.4 final\nPython 3.6.4 release candidate 1\nPython 3.6.3 final\nPython 3.6.3 release candidate 1\nPython 3.6.2 final\nPython 3.6.2 release candidate 2\nPython 3.6.2 release candidate 1\nPython 3.6.1 final\nPython 3.6.1 release candidate 1\nPython 3.6.0 final\nPython 3.6.0 release candidate 2\nPython 3.6.0 release candidate 1\nPython 3.6.0 beta 4\nPython 3.6.0 beta 3\nPython 3.6.0 beta 2\nPython 3.6.0 beta 1\nPython 3.6.0 alpha 4\nPython 3.6.0 alpha 3\nPython 3.6.0 alpha 2\nPython 3.6.0 alpha 1\nPython 3.5.5 final\nPython 3.5.5 release candidate 1\nPython 3.5.4 final\nPython 3.5.4 release candidate 1\nPython 3.5.3 final\nPython 3.5.3 release candidate 1\nPython 3.5.2 final\nPython 3.5.2 release candidate 1\nPython 3.5.1 final\nPython 3.5.1 release candidate 1\nPython 3.5.0 final\nPython 3.5.0 release candidate 4\nPython 3.5.0 release candidate 3\nPython 3.5.0 release candidate 2\nPython 3.5.0 release candidate 1\nPython 3.5.0 beta 4\nPython 3.5.0 beta 3\nPython 3.5.0 beta 2\nPython 3.5.0 beta 1\nPython 3.5.0 alpha 4\nPython 3.5.0 alpha 3\nPython 3.5.0 alpha 2\nPython 3.5.0 alpha 1\n\n\n\n\n\n\n\n\n\n\n\n\nPrevious topic\nPython Documentation contents\n\n\nNext topic\nWhatâs New In Python 3.11\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nWhatâs New in Python\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/bugs.html,Dealing with Bugs — Python 3.11.8 documentation,"Python is a mature programming language which has established a reputation for stability. In order to maintain this reputation, the developers would like to know of any deficiencies you find in Pyt...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\n\n\n\n\n\nPrevious topic\nAbout these documents\n\n\nNext topic\nCopyright\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDealing with Bugs\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nDealing with BugsÂ¶\nPython is a mature programming language which has established a reputation for\nstability.  In order to maintain this reputation, the developers would like to\nknow of any deficiencies you find in Python.\nIt can be sometimes faster to fix bugs yourself and contribute patches to\nPython as it streamlines the process and involves less people. Learn how to\ncontribute.\n\nDocumentation bugsÂ¶\nIf you find a bug in this documentation or would like to propose an improvement,\nplease submit a bug report on the tracker.  If you\nhave a suggestion on how to fix it, include that as well.\nYou can also open a discussion item on our\nDocumentation Discourse forum.\nIf youâre short on time, you can also email documentation bug reports to\ndocs@python.org (behavioral bugs can be sent to python-list@python.org).\nâdocs@â is a mailing list run by volunteers; your request will be noticed,\nthough it may take a while to be processed.\n\nSee also\n\nDocumentation bugsA list of documentation bugs that have been submitted to the Python issue tracker.\n\nIssue TrackingOverview of the process involved in reporting an improvement on the tracker.\n\nHelping with DocumentationComprehensive guide for individuals that are interested in contributing to Python documentation.\n\nDocumentation TranslationsA list of GitHub pages for documentation translation and their primary contacts.\n\n\n\n\n\nUsing the Python issue trackerÂ¶\nIssue reports for Python itself should be submitted via the GitHub issues\ntracker (https://github.com/python/cpython/issues).\nThe GitHub issues tracker offers a web form which allows pertinent information\nto be entered and submitted to the developers.\nThe first step in filing a report is to determine whether the problem has\nalready been reported.  The advantage in doing so, aside from saving the\ndevelopersâ time, is that you learn what has been done to fix it; it may be that\nthe problem has already been fixed for the next release, or additional\ninformation is needed (in which case you are welcome to provide it if you can!).\nTo do this, search the tracker using the search box at the top of the page.\nIf the problem youâre reporting is not already in the list, log in to GitHub.\nIf you donât already have a GitHub account, create a new account using the\nâSign upâ link.\nIt is not possible to submit a bug report anonymously.\nBeing now logged in, you can submit an issue.\nClick on the âNew issueâ button in the top bar to report a new issue.\nThe submission form has two fields, âTitleâ and âCommentâ.\nFor the âTitleâ field, enter a very short description of the problem;\nfewer than ten words is good.\nIn the âCommentâ field, describe the problem in detail, including what you\nexpected to happen and what did happen.  Be sure to include whether any\nextension modules were involved, and what hardware and software platform you\nwere using (including version information as appropriate).\nEach issue report will be reviewed by a developer who will determine what needs to\nbe done to correct the problem. You will receive an update each time an action is\ntaken on the issue.\n\nSee also\n\nHow to Report Bugs EffectivelyArticle which goes into some detail about how to create a useful bug report.\nThis describes what kind of information is useful and why it is useful.\n\nBug Writing GuidelinesInformation about writing a good bug report.  Some of this is specific to the\nMozilla project, but describes general good practices.\n\n\n\n\n\nGetting started contributing to Python yourselfÂ¶\nBeyond just reporting bugs that you find, you are also welcome to submit\npatches to fix them.  You can find more information on how to get started\npatching Python in the Python Developerâs Guide.  If you have questions,\nthe core-mentorship mailing list is a friendly place to get answers to\nany and all questions pertaining to the process of fixing issues in Python.\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nDealing with Bugs\nDocumentation bugs\nUsing the Python issue tracker\nGetting started contributing to Python yourself\n\n\n\n\n\nPrevious topic\nAbout these documents\n\n\nNext topic\nCopyright\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nDealing with Bugs\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/genindex.html,Index — Python 3.11.8 documentation,,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nIndex\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\nIndex\nIndex pages by letter:\n\nSymbols\n     | _\n     | A\n     | B\n     | C\n     | D\n     | E\n     | F\n     | G\n     | H\n     | I\n     | J\n     | K\n     | L\n     | M\n     | N\n     | O\n     | P\n     | Q\n     | R\n     | S\n     | T\n     | U\n     | V\n     | W\n     | X\n     | Y\n     | Z\n\nFull index on one page\n                                               (can be huge)\n\n\n\n\n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nIndex\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/_static/opensearch.xml,,,None,,
https://docs.python.org/3.11/extending/index.html,Extending and Embedding the Python Interpreter — Python 3.11.8 documentation,This document describes how to write modules in C or C++ to extend the Python interpreter with new modules. Those modules can not only define new functions but also new object types and their metho...,"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nTable of Contents\n\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\nEmbedding the CPython runtime in a larger application\n\n\n\n\n\nPrevious topic\nSecurity Considerations\n\n\nNext topic\n1. Extending Python with C or C++\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nExtending and Embedding the Python Interpreter\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nExtending and Embedding the Python InterpreterÂ¶\nThis document describes how to write modules in C or C++ to extend the Python\ninterpreter with new modules.  Those modules can not only define new functions\nbut also new object types and their methods.  The document also describes how\nto embed the Python interpreter in another application, for use as an extension\nlanguage.  Finally, it shows how to compile and link extension modules so that\nthey can be loaded dynamically (at run time) into the interpreter, if the\nunderlying operating system supports this feature.\nThis document assumes basic knowledge about Python.  For an informal\nintroduction to the language, see The Python Tutorial.  The Python Language Reference\ngives a more formal definition of the language.  The Python Standard Library documents\nthe existing object types, functions and modules (both built-in and written in\nPython) that give the language its wide application range.\nFor a detailed description of the whole Python/C API, see the separate\nPython/C API Reference Manual.\n\nRecommended third party toolsÂ¶\nThis guide only covers the basic tools for creating extensions provided\nas part of this version of CPython. Third party tools like\nCython, cffi,\nSWIG and Numba\noffer both simpler and more sophisticated approaches to creating C and C++\nextensions for Python.\n\nSee also\n\nPython Packaging User Guide: Binary ExtensionsThe Python Packaging User Guide not only covers several available\ntools that simplify the creation of binary extensions, but also\ndiscusses the various reasons why creating an extension module may be\ndesirable in the first place.\n\n\n\n\n\nCreating extensions without third party toolsÂ¶\nThis section of the guide covers creating C and C++ extensions without\nassistance from third party tools. It is intended primarily for creators\nof those tools, rather than being a recommended way to create your own\nC extensions.\n\n\n1. Extending Python with C or C++\n1.1. A Simple Example\n1.2. Intermezzo: Errors and Exceptions\n1.3. Back to the Example\n1.4. The Moduleâs Method Table and Initialization Function\n1.5. Compilation and Linkage\n1.6. Calling Python Functions from C\n1.7. Extracting Parameters in Extension Functions\n1.8. Keyword Parameters for Extension Functions\n1.9. Building Arbitrary Values\n1.10. Reference Counts\n1.11. Writing Extensions in C++\n1.12. Providing a C API for an Extension Module\n\n\n2. Defining Extension Types: Tutorial\n2.1. The Basics\n2.2. Adding data and methods to the Basic example\n2.3. Providing finer control over data attributes\n2.4. Supporting cyclic garbage collection\n2.5. Subclassing other types\n\n\n3. Defining Extension Types: Assorted Topics\n3.1. Finalization and De-allocation\n3.2. Object Presentation\n3.3. Attribute Management\n3.4. Object Comparison\n3.5. Abstract Protocol Support\n3.6. Weak Reference Support\n3.7. More Suggestions\n\n\n4. Building C and C++ Extensions\n4.1. Building C and C++ Extensions with distutils\n4.2. Distributing your extension modules\n\n\n5. Building C and C++ Extensions on Windows\n5.1. A Cookbook Approach\n5.2. Differences Between Unix and Windows\n5.3. Using DLLs in Practice\n\n\n\n\n\n\nEmbedding the CPython runtime in a larger applicationÂ¶\nSometimes, rather than creating an extension that runs inside the Python\ninterpreter as the main application, it is desirable to instead embed\nthe CPython runtime inside a larger application. This section covers\nsome of the details involved in doing that successfully.\n\n\n1. Embedding Python in Another Application\n1.1. Very High Level Embedding\n1.2. Beyond Very High Level Embedding: An overview\n1.3. Pure Embedding\n1.4. Extending Embedded Python\n1.5. Embedding Python in C++\n1.6. Compiling and Linking under Unix-like systems\n\n\n\n\n\n\n\n\n\n\n\n\n\nTable of Contents\n\nExtending and Embedding the Python Interpreter\nRecommended third party tools\nCreating extensions without third party tools\nEmbedding the CPython runtime in a larger application\n\n\n\n\n\nPrevious topic\nSecurity Considerations\n\n\nNext topic\n1. Extending Python with C or C++\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nExtending and Embedding the Python Interpreter\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
https://docs.python.org/3.11/howto/index.html,Python HOWTOs — Python 3.11.8 documentation,"Python HOWTOs are documents that cover a single, specific topic, and attempt to cover it fairly completely. Modelled on the Linux Documentation Projectâs HOWTO collection, this collection is an eff...","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Theme\n    \nAuto\nLight\nDark\n\n\n\nPrevious topic\nInstalling Python Modules\n\n\nNext topic\nPorting Extension Modules to Python 3\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython HOWTOs\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n\n\n\n\nPython HOWTOsÂ¶\nPython HOWTOs are documents that cover a single, specific topic,\nand attempt to cover it fairly completely. Modelled on the Linux\nDocumentation Projectâs HOWTO collection, this collection is an\neffort to foster documentation thatâs more detailed than the\nPython Library Reference.\nCurrently, the HOWTOs are:\n\n\nPorting Extension Modules to Python 3\nCurses Programming with Python\nDescriptor HowTo Guide\nDebugging C API extensions and CPython Internals with GDB\nEnum HOWTO\nFunctional Programming HOWTO\nLogging HOWTO\nLogging Cookbook\nRegular Expression HOWTO\nSocket Programming HOWTO\nSorting HOW TO\nUnicode HOWTO\nHOWTO Fetch Internet Resources Using The urllib Package\nArgparse Tutorial\nAn introduction to the ipaddress module\nInstrumenting CPython with DTrace and SystemTap\nAnnotations Best Practices\nIsolating Extension Modules\n\n\n\n\n\n\n\n\n\n\nPrevious topic\nInstalling Python Modules\n\n\nNext topic\nPorting Extension Modules to Python 3\n\n\nThis Page\n\nReport a Bug\n\nShow Source\n        \n\n\n\n\n\nÂ«\n\n\n\n\n\nNavigation\n\n\nindex\n\nmodules |\n\nnext |\n\nprevious |\n\nPython »\n\n\n\n\n\n\n\n3.11.8 Documentation »\n    \nPython HOWTOs\n\n\n\n\n\n\n\n                     |\n                \n\n\n    Theme\n    \nAuto\nLight\nDark\n\n |\n\n\n\n    © Copyright 2001-2024, Python Software Foundation.\n    \n    This page is licensed under the Python Software Foundation License Version 2.\n    \n    Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License.\n    \n    See History and License for more information.\n\n\n    The Python Software Foundation is a non-profit corporation.\nPlease donate.\n\n\n\n    Last updated on Apr 02, 2024 (12:13 UTC).\n    Found a bug?\n    \n\n    Created using Sphinx 7.2.6.\n    \n\n",en,
